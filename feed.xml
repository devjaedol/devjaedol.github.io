<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://kimjaehyun.co.kr/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kimjaehyun.co.kr/" rel="alternate" type="text/html" /><updated>2022-05-28T06:31:32-05:00</updated><id>https://kimjaehyun.co.kr/feed.xml</id><title type="html">꿰보노트</title><subtitle>프로그래밍과 소프트웨어 정보 및 클라우드 개발에 대한 정보를 공유하는 블로그 입니다. 꿰보노트 / 꿰보Note / 꿰어야 보배</subtitle><author><name>devjaedol</name></author><entry><title type="html">[JAVA] 순열과 조합</title><link href="https://kimjaehyun.co.kr/algorithm/java/java-nPr_nCr/" rel="alternate" type="text/html" title="[JAVA] 순열과 조합" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/java/java-nPr_nCr</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/java/java-nPr_nCr/"><![CDATA[<h1 id="순열-permutation--npr-">순열 Permutation ( nPr )</h1>
<p>순열이란 서로 다른 n개중에 r개를 선택하는 경우의 수(순서 상관 있음) = <code class="language-plaintext highlighter-rouge">n! / (n-r)!</code>   <br />
<a href="https://www.acmicpc.net/problem/15649" target="_blank">백준 순열문제</a></p>

<h1 id="조합-combination--ncr-">조합 Combination ( nCr )</h1>
<p>조합이란 서로 다른 n개중에 r개를 선택하는 경우의 수(순서 상관 없음) = <code class="language-plaintext highlighter-rouge">n! / ((n-r)! * r!)</code>  <br />
<a href="https://www.acmicpc.net/problem/2407" target="_blank">백준 조합문제</a></p>

<h1 id="소스-코드">소스 코드</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">testcase</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CP</span> <span class="o">{</span>
	
	<span class="c1">//순열</span>
	<span class="kt">void</span> <span class="nf">p</span> <span class="o">(</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">out</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">ck</span><span class="o">,</span> <span class="kt">int</span> <span class="n">d</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="k">if</span><span class="o">(</span> <span class="n">d</span> <span class="o">==</span> <span class="n">r</span><span class="o">){</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">r</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>						<span class="c1">// r 만큼</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span><span class="n">out</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>		<span class="c1">//출력 out</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>			
			<span class="k">if</span><span class="o">(</span> <span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
				<span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
				
				<span class="n">out</span><span class="o">[</span><span class="n">d</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>						<span class="c1">// 중요</span>
				<span class="n">p</span> <span class="o">(</span> <span class="n">arr</span><span class="o">,</span> <span class="n">out</span><span class="o">,</span> <span class="n">ck</span><span class="o">,</span> <span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>			<span class="c1">// d+1</span>
				
				<span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span><span class="c1">// end for</span>
		
	<span class="o">}</span>
	
	<span class="c1">//조합</span>
	<span class="kt">void</span> <span class="nf">c</span> <span class="o">(</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span><span class="o">,</span>  <span class="kt">int</span><span class="o">[]</span> <span class="n">ck</span><span class="o">,</span> <span class="kt">int</span> <span class="n">d</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>

		<span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  					<span class="c1">// 시작 i &lt; n</span>
				<span class="k">if</span><span class="o">(</span><span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
					<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>		<span class="c1">//출력 arr</span>
				<span class="o">}</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">d</span> <span class="o">;</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>  				<span class="c1">// 중요 시작점 d</span>
			<span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			
			<span class="n">c</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span>  <span class="n">ck</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span> <span class="o">,</span> <span class="n">n</span> <span class="o">,</span> <span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">);</span> 					<span class="c1">// i+1 ,  , r-1 </span>
			
			<span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="o">}</span>
		
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> 	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>
		<span class="kt">int</span> <span class="o">[]</span> <span class="n">ck</span> 	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
		<span class="kt">int</span> <span class="o">[]</span> <span class="n">out</span> 	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>

		<span class="no">CP</span> <span class="n">obj</span>	<span class="o">=</span> <span class="k">new</span> <span class="no">CP</span><span class="o">();</span>
		<span class="c1">//obj.p(arr, out, ck, 0, arr.length, 5);</span>
		
		<span class="n">obj</span><span class="o">.</span><span class="na">c</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span>  <span class="n">ck</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>

<span class="c1">// 출력  obj.p(arr, out, ck, 0, arr.length, 5);</span>
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">3</span> 
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">2</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">2</span> 
<span class="mi">1</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> 
<span class="mi">1</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">2</span> 
<span class="mi">1</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="mi">1</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">2</span> 
<span class="mi">1</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">3</span> 
<span class="mi">1</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">2</span> 
<span class="mi">1</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="mi">1</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">2</span> 
<span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">4</span> 
<span class="mi">2</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">3</span> 
<span class="mi">2</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">2</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">4</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">1</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">4</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">1</span> 
<span class="mi">2</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">3</span> 
<span class="mi">2</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">1</span> 
<span class="mi">2</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">3</span> 
<span class="mi">2</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">1</span> 
<span class="mi">2</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">2</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">3</span> 
<span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">4</span> 
<span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">1</span> 
<span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">3</span> 
<span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">1</span> 
<span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> 
<span class="mi">3</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">5</span> 
<span class="mi">3</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">2</span> 
<span class="mi">3</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">4</span> 
<span class="mi">3</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">2</span> 
<span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">4</span> 
<span class="mi">3</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">5</span> 
<span class="mi">3</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">1</span> 
<span class="mi">3</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">4</span> 
<span class="mi">3</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">1</span> 
<span class="mi">3</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> 
<span class="mi">3</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">2</span> 
<span class="mi">3</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">5</span> 
<span class="mi">3</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">1</span> 
<span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">2</span> 
<span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">1</span> 
<span class="mi">3</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> 
<span class="mi">3</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">2</span> 
<span class="mi">3</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">4</span> 
<span class="mi">3</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">1</span> 
<span class="mi">3</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">2</span> 
<span class="mi">3</span> <span class="mi">5</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">1</span> 
<span class="mi">4</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">4</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> 
<span class="mi">4</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">5</span> 
<span class="mi">4</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">2</span> 
<span class="mi">4</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="mi">4</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">2</span> 
<span class="mi">4</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">4</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">3</span> 
<span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">5</span> 
<span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">1</span> 
<span class="mi">4</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">3</span> 
<span class="mi">4</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">1</span> 
<span class="mi">4</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> 
<span class="mi">4</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">5</span> <span class="mi">2</span> 
<span class="mi">4</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">5</span> 
<span class="mi">4</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">5</span> <span class="mi">1</span> 
<span class="mi">4</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">2</span> 
<span class="mi">4</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">1</span> 
<span class="mi">4</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="mi">4</span> <span class="mi">5</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">2</span> 
<span class="mi">4</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span> 
<span class="mi">4</span> <span class="mi">5</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">1</span> 
<span class="mi">4</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span> 
<span class="mi">4</span> <span class="mi">5</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span> 
<span class="mi">5</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">5</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">3</span> 
<span class="mi">5</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">4</span> 
<span class="mi">5</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">2</span> 
<span class="mi">5</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="mi">5</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">2</span> 
<span class="mi">5</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">5</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">3</span> 
<span class="mi">5</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">4</span> 
<span class="mi">5</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">1</span> 
<span class="mi">5</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">3</span> 
<span class="mi">5</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">1</span> 
<span class="mi">5</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> 
<span class="mi">5</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">4</span> <span class="mi">2</span> 
<span class="mi">5</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">4</span> 
<span class="mi">5</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">1</span> 
<span class="mi">5</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">2</span> 
<span class="mi">5</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">1</span> 
<span class="mi">5</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="mi">5</span> <span class="mi">4</span> <span class="mi">1</span> <span class="mi">3</span> <span class="mi">2</span> 
<span class="mi">5</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">1</span> <span class="mi">3</span> 
<span class="mi">5</span> <span class="mi">4</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">1</span> 
<span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">1</span> <span class="mi">2</span> 
<span class="mi">5</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">2</span> <span class="mi">1</span> 


<span class="c1">// 출력 obj.c(arr,  ck, 0, arr.length, 3);</span>
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> 
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">2</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">1</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">1</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> 
<span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> 
<span class="mi">2</span> <span class="mi">4</span> <span class="mi">5</span> 
<span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> 


</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="java" /><category term="nPr" /><category term="nCr" /><category term="순열" /><category term="조합" /><category term="Permutation. Combination" /><summary type="html"><![CDATA[순열 Permutation ( nPr ) 순열이란 서로 다른 n개중에 r개를 선택하는 경우의 수(순서 상관 있음) = n! / (n-r)! 백준 순열문제]]></summary></entry><entry><title type="html">[Python] deque (stack, queue) 구현</title><link href="https://kimjaehyun.co.kr/codingtest/python/java-sort/" rel="alternate" type="text/html" title="[Python] deque (stack, queue) 구현" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/codingtest/python/java-sort</id><content type="html" xml:base="https://kimjaehyun.co.kr/codingtest/python/java-sort/"><![CDATA[<p>Python에서 list형태로 queue를 구현시 성능이슈로 인해서 deque 사용을 권장합니다.</p>

<h1 id="list-vs-deque-성능-문제">list vs deque 성능 문제</h1>
<p>index 0번째 추가와 출력시 성능</p>
<ul>
  <li>list</li>
</ul>

<table>
  <thead>
    <tr>
      <th>작업</th>
      <th style="text-align: center">명령어</th>
      <th style="text-align: center">시간복잡도</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>출력</td>
      <td style="text-align: center">pop(0)</td>
      <td style="text-align: center">O(n)</td>
    </tr>
    <tr>
      <td>입력</td>
      <td style="text-align: center">Insert(0,value)</td>
      <td style="text-align: center">O(n)</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>deque</li>
</ul>

<table>
  <thead>
    <tr>
      <th>작업</th>
      <th style="text-align: center">명령어</th>
      <th style="text-align: center">시간복잡도</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>출력</td>
      <td style="text-align: center">popleft()</td>
      <td style="text-align: center">O(1)</td>
    </tr>
    <tr>
      <td>입력</td>
      <td style="text-align: center">appendleft(value)</td>
      <td style="text-align: center">O(1)</td>
    </tr>
  </tbody>
</table>

<h1 id="deque-기본-사용법">deque 기본 사용법</h1>
<p>입출력이 양방향 모두 지원하는 메소드가 존재하여, Queue, Stack을 모두 구현할 수 있습니다.</p>

<ul>
  <li>append() : 배열뒤로 추가됨</li>
  <li>pop() : 오른쪽부터 출력</li>
  <li>popleft() : 왼쪽부터 출력</li>
  <li>len(q) : 수를 반환 if len(q)==0 : # Empty 조건</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">#리스트 타입
</span><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="c1">#출력 pop은 뒤에서 부터 출력됨
</span><span class="mi">10</span>
<span class="mi">7</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>

<span class="c1"># deque
</span><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">deque</span>

<span class="c1"># deque([iterable, [maxlen])
</span><span class="n">q</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="n">deque</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">])</span>

<span class="n">q</span><span class="p">.</span><span class="n">appendleft</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>

<span class="o">&gt;</span> <span class="n">deque</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">])</span>

<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>
<span class="err">​</span>
<span class="c1"># pop() 오른쪽부터 출력됨
# popleft() 왼쪽부터 출력됨
</span>
<span class="o">&gt;</span> <span class="mi">9</span>
<span class="o">&gt;</span> <span class="mi">7</span>
<span class="o">&gt;</span> <span class="n">deque</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">])</span>
<span class="o">&gt;</span> <span class="mi">0</span>


<span class="n">q</span><span class="o">=</span><span class="n">deque</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">))</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">q</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">' , '</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"len="</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">))</span>

<span class="o">&gt;</span> <span class="mi">1</span> <span class="p">,</span> <span class="mi">2</span> <span class="p">,</span> <span class="mi">3</span> <span class="p">,</span> <span class="mi">4</span> <span class="p">,</span> <span class="mi">5</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">9</span> <span class="p">,</span> <span class="mi">10</span> <span class="p">,</span> <span class="nb">len</span><span class="o">=</span> <span class="mi">10</span>


<span class="n">q</span><span class="o">=</span><span class="n">deque</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="k">while</span> <span class="n">q</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s">' , '</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"len="</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">))</span>

<span class="o">&gt;</span> <span class="n">deque</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>
<span class="o">&gt;</span> <span class="mi">10</span> <span class="p">,</span> <span class="mi">9</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">5</span> <span class="p">,</span> <span class="mi">4</span> <span class="p">,</span> <span class="mi">3</span> <span class="p">,</span> <span class="mi">2</span> <span class="p">,</span> <span class="mi">1</span> <span class="p">,</span> <span class="nb">len</span><span class="o">=</span> <span class="mi">0</span>

<span class="n">q</span><span class="o">=</span><span class="n">deque</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">11</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="k">while</span> <span class="n">q</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="s">' , '</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"len="</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">q</span><span class="p">))</span>

<span class="o">&gt;</span> <span class="n">deque</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>
<span class="o">&gt;</span> <span class="mi">1</span> <span class="p">,</span> <span class="mi">2</span> <span class="p">,</span> <span class="mi">3</span> <span class="p">,</span> <span class="mi">4</span> <span class="p">,</span> <span class="mi">5</span> <span class="p">,</span> <span class="mi">6</span> <span class="p">,</span> <span class="mi">7</span> <span class="p">,</span> <span class="mi">8</span> <span class="p">,</span> <span class="mi">9</span> <span class="p">,</span> <span class="mi">10</span> <span class="p">,</span> <span class="nb">len</span><span class="o">=</span> <span class="mi">0</span>

</code></pre></div></div>

<h1 id="deque---stack-filo">deque - Stack FILO</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># Stack FILO
</span><span class="n">st</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
<span class="n">st</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">st</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">st</span><span class="p">.</span><span class="n">pop</span><span class="p">())</span>

<span class="c1">#출력
</span><span class="o">&gt;</span> <span class="mi">5</span>
<span class="o">&gt;</span> <span class="mi">4</span>
<span class="o">&gt;</span> <span class="mi">3</span>
<span class="o">&gt;</span> <span class="mi">2</span>
<span class="o">&gt;</span> <span class="mi">1</span>
</code></pre></div></div>

<h1 id="deque---queue-fifo">deque - Queue FIFO</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># Queue FIFO
</span><span class="n">q</span> <span class="o">=</span> <span class="n">deque</span><span class="p">()</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">q</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">popleft</span><span class="p">())</span>


<span class="c1">#출력
</span><span class="o">&gt;</span> <span class="mi">1</span>
<span class="o">&gt;</span> <span class="mi">2</span>
<span class="o">&gt;</span> <span class="mi">3</span>
<span class="o">&gt;</span> <span class="mi">4</span>
<span class="o">&gt;</span> <span class="mi">5</span>
</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="codingtest" /><category term="python" /><category term="queue" /><category term="stack" /><summary type="html"><![CDATA[Python에서 list형태로 queue를 구현시 성능이슈로 인해서 deque 사용을 권장합니다.]]></summary></entry><entry><title type="html">[자료구조] Stack &amp;amp; Queue</title><link href="https://kimjaehyun.co.kr/java/java-Stack-Queue/" rel="alternate" type="text/html" title="[자료구조] Stack &amp;amp; Queue" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/java/java-Stack-Queue</id><content type="html" xml:base="https://kimjaehyun.co.kr/java/java-Stack-Queue/"><![CDATA[<p>자료 구조 중에 스택과 큐에 대해서 TestCode를 작성해 봅니다.</p>

<h2 id="stack">Stack</h2>
<ul>
  <li>LIFO(Last Input Firs Out) 마지막에 넣은 요소가 먼저 나온다는 의미이다.</li>
  <li>DFS 사용</li>
</ul>

<h2 id="queue">Queue</h2>
<ul>
  <li>FIFO(Fisrt Input Firs Out) 먼저 들어간 데이터가 먼저 나오는 구조이다.</li>
  <li>BFS 사용</li>
</ul>

<h2 id="stack-soruce-code">Stack Soruce Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">datatype</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StackTest</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">Stack</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=================="</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"stack.size():"</span><span class="o">+</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
		
		<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span>
		<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"2"</span><span class="o">);</span>
		<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"3"</span><span class="o">);</span>
		<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"4"</span><span class="o">);</span>
		<span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"5"</span><span class="o">);</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"stack.peek():"</span><span class="o">+</span><span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">());</span> <span class="c1">// peek 마지막값을 확인하는 것</span>
		
		<span class="c1">//stack.remove(0);</span>
		<span class="n">stack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="s">"*****"</span><span class="o">);</span><span class="c1">//중간에 넣기</span>
		
		
		<span class="c1">//while(!stack.empty()){</span>
		<span class="c1">//	System.out.println("get : "+stack.peek());//제거하지 않고 마지막 값을 가져오므로 무한루프에 빠진다.</span>
		<span class="c1">//}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=================="</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++){</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">" : "</span><span class="o">+</span><span class="n">stack</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span> <span class="c1">// 제거없이 조회만</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"stack.size():"</span><span class="o">+</span><span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"=================="</span><span class="o">);</span>

		<span class="k">while</span><span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">empty</span><span class="o">()){</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"get : "</span><span class="o">+</span><span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span> <span class="c1">// 입력 역순으로 제거하면 조회됨</span>
		<span class="o">}</span>
	<span class="o">}</span>

<span class="o">}</span>

<span class="c1">//출력</span>
<span class="o">==================</span>
<span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">():</span><span class="mi">0</span>
<span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">():</span><span class="mi">5</span>
<span class="o">==================</span>
<span class="mi">0</span> <span class="o">:</span> <span class="o">*****</span>
<span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span>
<span class="mi">2</span> <span class="o">:</span> <span class="mi">2</span>
<span class="mi">3</span> <span class="o">:</span> <span class="mi">3</span>
<span class="mi">4</span> <span class="o">:</span> <span class="mi">4</span>
<span class="mi">5</span> <span class="o">:</span> <span class="mi">5</span>
<span class="n">stack</span><span class="o">.</span><span class="na">size</span><span class="o">():</span><span class="mi">6</span>
<span class="o">==================</span>
<span class="n">get</span> <span class="o">:</span> <span class="mi">5</span>
<span class="n">get</span> <span class="o">:</span> <span class="mi">4</span>
<span class="n">get</span> <span class="o">:</span> <span class="mi">3</span>
<span class="n">get</span> <span class="o">:</span> <span class="mi">2</span>
<span class="n">get</span> <span class="o">:</span> <span class="mi">1</span>
<span class="n">get</span> <span class="o">:</span> <span class="o">*****</span>

</code></pre></div></div>

<h2 id="queue-soruce-code">Queue Soruce Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">datatype</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueTest</span> <span class="o">{</span>

	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="c1">// add() 자료 입력</span>
		<span class="c1">// remove() 출력</span>
		<span class="c1">// peek() 출력할 첫번째 데이터 읽기(제거는 아님)</span>
		
		<span class="c1">//Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;();</span>
		<span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>

		<span class="c1">// 큐 는 FIFO 방식 처음에 들어간 값이 가장 먼저 나온다.</span>
		<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"토끼"</span><span class="o">);</span> <span class="c1">// 인덱스 번호 0 // offer 이나 add나 똑같다.</span>
		<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"개"</span><span class="o">);</span> <span class="c1">// 인덱스 번호 1 // offer 대신 add를 써도 된다.</span>
		<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"늑대"</span><span class="o">);</span> <span class="c1">// 인덱스 번호 2 // offer을 쓰는 이유는 큐를 이해하기 위해서</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"**String[]********************************"</span><span class="o">);</span>
		<span class="nc">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span> <span class="c1">// 처음 값을 지우지않고 리턴한다.</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"**********************************"</span><span class="o">);</span>
		
		
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">+</span> <span class="s">"	:	"</span> <span class="o">+</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">queue</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span> <span class="c1">// 처음 값을 지우지않고 리턴한다.</span>
			<span class="c1">// 그러기 때문에 계속 토끼만 리턴된다.</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"**********************************"</span><span class="o">);</span>

		<span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="c1">// isEmpty()는 LinkedList 객체 안에 데이터가 없으면 True</span>
									<span class="c1">// 하나라도 있다면 False 값을 리턴하는 메소드</span>
		<span class="o">{</span>
			<span class="c1">//String str = queue.poll(); // poll() 은 처음 값을 지우면서 리턴한다.</span>
			<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span> <span class="c1">// pop() 은 처음 값을 지우면서 리턴한다.</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"queue.size() : "</span><span class="o">+</span><span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>

	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">//출력</span>
<span class="o">**</span><span class="nc">String</span><span class="o">[]********************************</span>
<span class="n">토끼</span>
<span class="n">개</span>
<span class="n">늑대</span>
<span class="o">**********************************</span>
<span class="n">토끼</span>	<span class="o">:</span>	<span class="n">토끼</span>
<span class="n">토끼</span>	<span class="o">:</span>	<span class="n">개</span>
<span class="n">토끼</span>	<span class="o">:</span>	<span class="n">늑대</span>
<span class="o">**********************************</span>
<span class="n">토끼</span>
<span class="n">개</span>
<span class="n">늑대</span>
<span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">:</span> <span class="mi">0</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="java" /><category term="stack" /><category term="queue" /><category term="FIFO" /><category term="LIFO" /><category term="자료구조" /><summary type="html"><![CDATA[자료 구조 중에 스택과 큐에 대해서 TestCode를 작성해 봅니다.]]></summary></entry><entry><title type="html">[JAVA Class] PriorityQueue</title><link href="https://kimjaehyun.co.kr/java/java-Stack-PriorityQueue/" rel="alternate" type="text/html" title="[JAVA Class] PriorityQueue" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/java/java-Stack-PriorityQueue</id><content type="html" xml:base="https://kimjaehyun.co.kr/java/java-Stack-PriorityQueue/"><![CDATA[<p>큐에서 특정 우선순위를 적용하여, 먼저 출력하도록 하는 클래스 입니다.  <br />
정렬 등의 조건에서 사용이 가능합니다.</p>

<h2 id="일반적인-queue">일반적인 Queue</h2>
<ul>
  <li>FIFO(Fisrt Input Firs Out) 먼저 들어간 데이터가 먼저 나오는 구조이다.</li>
  <li>BFS 사용</li>
</ul>

<h2 id="일반-queue-soruce-code">일반 Queue Soruce Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">datatype</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QueueTest</span> <span class="o">{</span>

	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// TODO Auto-generated method stub</span>
		<span class="c1">// add() 자료 입력</span>
		<span class="c1">// remove() 출력</span>
		<span class="c1">// peek() 출력할 첫번째 데이터 읽기(제거는 아님)</span>
		
		<span class="c1">//Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;();</span>
		<span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>

		<span class="c1">// 큐 는 FIFO 방식 처음에 들어간 값이 가장 먼저 나온다.</span>
		<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"토끼"</span><span class="o">);</span> <span class="c1">// 인덱스 번호 0 // offer 이나 add나 똑같다.</span>
		<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"개"</span><span class="o">);</span> <span class="c1">// 인덱스 번호 1 // offer 대신 add를 써도 된다.</span>
		<span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="s">"늑대"</span><span class="o">);</span> <span class="c1">// 인덱스 번호 2 // offer을 쓰는 이유는 큐를 이해하기 위해서</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"**String[]********************************"</span><span class="o">);</span>
		<span class="nc">String</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span> <span class="c1">// 처음 값을 지우지않고 리턴한다.</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"**********************************"</span><span class="o">);</span>
		
		
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">queue</span><span class="o">.</span><span class="na">peek</span><span class="o">()</span> <span class="o">+</span> <span class="s">"	:	"</span> <span class="o">+</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">queue</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span> <span class="c1">// 처음 값을 지우지않고 리턴한다.</span>
			<span class="c1">// 그러기 때문에 계속 토끼만 리턴된다.</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"**********************************"</span><span class="o">);</span>

		<span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="c1">// isEmpty()는 LinkedList 객체 안에 데이터가 없으면 True</span>
									<span class="c1">// 하나라도 있다면 False 값을 리턴하는 메소드</span>
		<span class="o">{</span>
			<span class="c1">//String str = queue.poll(); // poll() 은 처음 값을 지우면서 리턴한다.</span>
			<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span> <span class="c1">// pop() 은 처음 값을 지우면서 리턴한다.</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"queue.size() : "</span><span class="o">+</span><span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>

	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">//출력</span>
<span class="o">**</span><span class="nc">String</span><span class="o">[]********************************</span>
<span class="n">토끼</span>
<span class="n">개</span>
<span class="n">늑대</span>
<span class="o">**********************************</span>
<span class="n">토끼</span>	<span class="o">:</span>	<span class="n">토끼</span>
<span class="n">토끼</span>	<span class="o">:</span>	<span class="n">개</span>
<span class="n">토끼</span>	<span class="o">:</span>	<span class="n">늑대</span>
<span class="o">**********************************</span>
<span class="n">토끼</span>
<span class="n">개</span>
<span class="n">늑대</span>
<span class="n">queue</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">:</span> <span class="mi">0</span>

</code></pre></div></div>

<h2 id="우선순위-queue-soruce-code">우선순위 Queue Soruce Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">datatype</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.PriorityQueue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PriorityQueueTest</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//낮은 숫자가 우선 순위인 int 형 우선순위 큐 선언</span>
		<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">pqLowest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;();</span>

		<span class="c1">//높은 숫자가 우선 순위인 int 형 우선순위 큐 선언</span>
		<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">pqHighest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
		
		<span class="c1">// add(value) 메서드의 경우 만약 삽입에 성공하면 true를 반환, </span>
		<span class="c1">// 큐에 여유 공간이 없어 삽입에 실패하면 IllegalStateException을 발생</span>
		<span class="n">pqLowest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">pqLowest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
		<span class="n">pqLowest</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>

		<span class="n">pqHighest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">pqHighest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
		<span class="n">pqHighest</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[pqLowest]==============="</span><span class="o">);</span>
		<span class="k">while</span><span class="o">(!</span><span class="n">pqLowest</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pqLowest</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[pqHighest]==============="</span><span class="o">);</span>
		<span class="k">while</span><span class="o">(!</span><span class="n">pqHighest</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pqHighest</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[Custome]==============="</span><span class="o">);</span>
		<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">pqCustom</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;();</span>
		<span class="n">pqCustom</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
		<span class="n">pqCustom</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">200</span><span class="o">));</span>
		<span class="n">pqCustom</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">70</span><span class="o">,</span> <span class="mi">300</span><span class="o">));</span>
		<span class="n">pqCustom</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">30</span><span class="o">,</span> <span class="mi">400</span><span class="o">));</span>
		
		<span class="k">while</span><span class="o">(!</span><span class="n">pqCustom</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">pqCustom</span><span class="o">.</span><span class="na">poll</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[]==============="</span><span class="o">);</span>
		

		<span class="c1">// 간단한 람다 방식으로 사용하려면 </span>
		<span class="c1">//높은 숫자가 우선 순위인 int 형 우선순위 큐 선언</span>
		<span class="c1">//PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;( (a, b) -&gt; a[0] - b[0] );</span>
		<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">pq</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;(</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;{</span>
			<span class="c1">//System.out.format(" %d - %d = %d \n", a[1], b[1], a[1] - b[1]);</span>
			<span class="k">return</span> <span class="o">(</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
			<span class="c1">//return (a[1] - b[1])* -1 ;</span>
			<span class="o">}</span> <span class="o">);</span>
		
		<span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">});</span>
		<span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">7</span><span class="o">});</span>
		<span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">3</span><span class="o">});</span>
		<span class="n">pq</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">});</span>

		<span class="k">while</span><span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="kt">int</span><span class="o">[]</span> <span class="n">t</span> <span class="o">=</span> <span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%5d %5d \n"</span><span class="o">,</span> <span class="n">t</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">t</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
		<span class="o">}</span>
		
		
		<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q_asc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
		<span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q_desc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;((</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)-&gt;(</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="o">));</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">q_asc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="n">q_desc</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==q_asc================="</span><span class="o">);</span>
		<span class="k">while</span><span class="o">(!</span><span class="n">q_asc</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d \n"</span><span class="o">,</span><span class="n">q_asc</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
		<span class="o">}</span><span class="c1">//end while</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==q_desc================="</span><span class="o">);</span>
		<span class="k">while</span><span class="o">(!</span><span class="n">q_desc</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d \n"</span><span class="o">,</span><span class="n">q_desc</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
		<span class="o">}</span><span class="c1">//end while		</span>
		
	<span class="o">}</span>

<span class="o">}</span>

<span class="c1">// Comparator 가 아닌 Comparable</span>
<span class="kd">class</span> <span class="nc">Node</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="n">data</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">data</span><span class="o">,</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"data : %-5d, distance : %-5d "</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">data</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">distance</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Node</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//return ( this.data - o.data ) * 1; // 1 asc, -1 desc</span>
		<span class="k">return</span> <span class="o">(</span> <span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">-</span> <span class="n">o</span><span class="o">.</span><span class="na">distance</span> <span class="o">)</span> <span class="o">*</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 1 asc, -1 desc</span>
	<span class="o">}</span>
	
<span class="o">}</span>


<span class="c1">//출력</span>
<span class="o">==[</span><span class="n">pqLowest</span><span class="o">]===============</span>
<span class="mi">1</span>
<span class="mi">10</span>
<span class="mi">100</span>
<span class="o">==[</span><span class="n">pqHighest</span><span class="o">]===============</span>
<span class="mi">100</span>
<span class="mi">10</span>
<span class="mi">1</span>
<span class="o">==[</span><span class="nc">Custome</span><span class="o">]===============</span>
<span class="n">data</span> <span class="o">:</span> <span class="mi">1</span>    <span class="o">,</span> <span class="n">distance</span> <span class="o">:</span> <span class="mi">100</span>   
<span class="n">data</span> <span class="o">:</span> <span class="mi">100</span>  <span class="o">,</span> <span class="n">distance</span> <span class="o">:</span> <span class="mi">200</span>   
<span class="n">data</span> <span class="o">:</span> <span class="mi">70</span>   <span class="o">,</span> <span class="n">distance</span> <span class="o">:</span> <span class="mi">300</span>   
<span class="n">data</span> <span class="o">:</span> <span class="mi">30</span>   <span class="o">,</span> <span class="n">distance</span> <span class="o">:</span> <span class="mi">400</span>   
<span class="o">==[]===============</span>
    <span class="mi">1</span>     <span class="mi">1</span> 
    <span class="mi">0</span>     <span class="mi">1</span> 
    <span class="mi">0</span>     <span class="mi">3</span> 
    <span class="mi">0</span>     <span class="mi">7</span> 
<span class="o">==</span><span class="n">q_asc</span><span class="o">=================</span>
<span class="mi">0</span> 
<span class="mi">1</span> 
<span class="mi">2</span> 
<span class="mi">3</span> 
<span class="mi">4</span> 
<span class="mi">5</span> 
<span class="mi">6</span> 
<span class="mi">7</span> 
<span class="mi">8</span> 
<span class="mi">9</span> 
<span class="o">==</span><span class="n">q_desc</span><span class="o">=================</span>
<span class="mi">9</span> 
<span class="mi">8</span> 
<span class="mi">7</span> 
<span class="mi">6</span> 
<span class="mi">5</span> 
<span class="mi">4</span> 
<span class="mi">3</span> 
<span class="mi">2</span> 
<span class="mi">1</span> 
<span class="mi">0</span> 

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="java" /><category term="PriorityQueue" /><category term="queue" /><category term="FIFO" /><category term="우선순위큐" /><category term="자료구조" /><summary type="html"><![CDATA[큐에서 특정 우선순위를 적용하여, 먼저 출력하도록 하는 클래스 입니다. 정렬 등의 조건에서 사용이 가능합니다.]]></summary></entry><entry><title type="html">[JAVA] Sort 함수</title><link href="https://kimjaehyun.co.kr/algorithm/java/java-sort/" rel="alternate" type="text/html" title="[JAVA] Sort 함수" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/java/java-sort</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/java/java-sort/"><![CDATA[<p>정렬 함수 테스트</p>

<h1 id="정렬-방식">정렬 방식</h1>
<ul>
  <li>Bubble Sort.			O(N^2)</li>
  <li>Selection Sort.		O(N^2)</li>
  <li>Insertion Sort.		O(N^2)</li>
  <li>Quick Sort.			avg O(N*logN), max O(N^2) - 이미정렬된 경우</li>
  <li>Merge Sort.			O(N*logN) 보장, 단점 정렬시 메모리 필요함.</li>
  <li>Heap Sort.			N/2*logN  (N이 클경우 logN은 값은 작은 값으로 결과적으로) &gt; O(N)</li>
  <li>Counting Sort.		O(N) 특정 범위 조건</li>
</ul>

<h1 id="bubble-sort">Bubble Sort.</h1>
<p>성능 O(N^2)</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">package</span> <span class="nn">sort</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BubbleSort</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="c1">// 버블O(N^2) &lt; 선택O(N^2) &lt; 삽입O(N^2) </span>
		<span class="c1">// 10 + 9 + .... + 1 =  10*(10+1)/2 = 55 (등차 수열)</span>
		<span class="c1">// 버블 정렬의 시간 복잡도 O(N*N) = O(N^2)</span>
		<span class="c1">// 선택 정렬과 시간 복잡도는 같으나, 매번 비교와 자리 바꿈으로 인해서 버블 정렬이 정렬중 제일 성능이 느림.</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"버블 정렬 : 바로 옆값과 비교하여 작은것을 앞으로, 실행시 마다 젤 큰값이 제일 뒤로 보내짐"</span><span class="o">);</span>
		
		<span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span>	<span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
		<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Origin-----------------------------------------"</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d"</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sort-------------------------------------------"</span><span class="o">);</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">j</span><span class="o">&lt;(</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="n">i</span><span class="o">)</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>	
				
				<span class="k">if</span><span class="o">(</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
					<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
					<span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
					<span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>							
				<span class="o">}</span>
				
				<span class="c1">//System.out.format("%4d",num[j]);				</span>
			<span class="o">}</span><span class="c1">//end for			</span>
			<span class="c1">//System.out.println("");</span>
			
			
			<span class="c1">//출력용</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d"</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>		
		<span class="o">}</span><span class="c1">//end for</span>
		
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 출력 결과</span>
<span class="nc">Origin</span><span class="o">-----------------------------------------</span>
   <span class="mi">1</span>  <span class="mi">10</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
<span class="nc">Sort</span><span class="o">-------------------------------------------</span>
   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>

</code></pre></div></div>

<h1 id="selection-sort">Selection Sort.</h1>
<p>성능 O(N^2)</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">sort</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SelectionSort</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		
		<span class="c1">// 10 + 9 + .... + 1 =  10*(10+1)/2 = 55 (등차 수열)</span>
		<span class="c1">// 선택 정렬의 시간 복잡도 O(N*N) = O(N^2)</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"선택 정렬 : 가장 작은 수를 제일 앞으로 이동"</span><span class="o">);</span>
		
		<span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span>	<span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
		<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Origin-----------------------------------------"</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d"</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sort-------------------------------------------"</span><span class="o">);</span>
		
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="c1">//System.out.println("[i]"+num[i]);</span>

			<span class="kt">int</span> <span class="n">midx</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="c1">//Min Value Index</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span><span class="n">i</span> <span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>			
				<span class="k">if</span><span class="o">(</span> <span class="n">num</span><span class="o">[</span><span class="n">midx</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
					<span class="n">midx</span> <span class="o">=</span> <span class="n">j</span><span class="o">;</span>
				<span class="o">}</span>				
			<span class="o">}</span>
			
			<span class="c1">//최소값 교체</span>
			<span class="k">if</span><span class="o">(</span> <span class="n">midx</span> <span class="o">!=</span> <span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
				<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">midx</span><span class="o">];</span>
				<span class="n">num</span><span class="o">[</span><span class="n">midx</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
			<span class="o">}</span>
			
			<span class="c1">//출력용</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d"</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>			
			
		<span class="o">}</span><span class="c1">//end for</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 출력 결과</span>
<span class="n">선택</span> <span class="n">정렬</span> <span class="o">:</span> <span class="n">가장</span> <span class="n">작은</span> <span class="n">수를</span> <span class="n">제일</span> <span class="n">앞으로</span> <span class="n">이동</span>
<span class="nc">Origin</span><span class="o">-----------------------------------------</span>
   <span class="mi">1</span>  <span class="mi">10</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
<span class="nc">Sort</span><span class="o">-------------------------------------------</span>
   <span class="mi">1</span>  <span class="mi">10</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">5</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">8</span>   <span class="mi">5</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">8</span>   <span class="mi">7</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">8</span>   <span class="mi">7</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>


</code></pre></div></div>

<h1 id="insertion-sort">Insertion Sort.</h1>
<p>성능 O(N^2)</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">sort</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InsertionSort</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="c1">// 삽입 정렬의 시간 복잡도 O(N*N) = O(N^2) 이나, 선택과 버블 정렬 대비, 중간 연산이 멈출수 있어서 시간을 줄일수 있음</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"삽입 정렬 : 바로 옆값과 비교하여 작은것을 앞으로, 실행시 마다 젤 큰값이 제일 뒤로 보내짐"</span><span class="o">);</span>
		
		<span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span>	<span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
		<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>

		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Origin-----------------------------------------"</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d"</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sort-------------------------------------------"</span><span class="o">);</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>	
				<span class="c1">// 교체</span>
				<span class="k">if</span><span class="o">(</span><span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>  <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">){</span>
					<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
					<span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
					<span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
				<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
					<span class="k">continue</span><span class="o">;</span>
				<span class="o">}</span>				
			<span class="o">}</span>
			
			<span class="c1">//출력용</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d"</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="o">}</span>
		
	<span class="o">}</span>
	
<span class="o">}</span>


<span class="c1">// 출력 결과</span>
<span class="nc">Origin</span><span class="o">-----------------------------------------</span>
   <span class="mi">1</span>  <span class="mi">10</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
<span class="nc">Sort</span><span class="o">-------------------------------------------</span>
   <span class="mi">1</span>  <span class="mi">10</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>  <span class="mi">10</span>   <span class="mi">5</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">5</span>  <span class="mi">10</span>   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">7</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">6</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">2</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>  <span class="mi">10</span>   <span class="mi">9</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>


</code></pre></div></div>

<h1 id="quick-sort">Quick Sort.</h1>
<p>avg O(N*logN), max O(N^2) - 이미정렬된 경우</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">sort</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuickSort</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//출력용</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d "</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>		
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span><span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//출력용</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			
			<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span><span class="s">""</span><span class="o">;</span>
			<span class="nc">String</span> <span class="n">e</span> <span class="o">=</span><span class="s">""</span><span class="o">;</span>
			
			<span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">l</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">){</span> <span class="c1">//대상 범위</span>
				<span class="n">s</span><span class="o">=</span><span class="s">"("</span><span class="o">;</span>
				<span class="n">e</span><span class="o">=</span><span class="s">")"</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="n">r</span> <span class="o">){</span> <span class="c1">//pivot</span>
				<span class="n">s</span><span class="o">=</span><span class="s">"["</span><span class="o">;</span>
				<span class="n">e</span><span class="o">=</span><span class="s">"]"</span><span class="o">;</span>
			<span class="o">}</span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%1s%2s%1s "</span><span class="o">,</span><span class="n">s</span><span class="o">,</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>		
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">quickSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>		
		<span class="k">if</span><span class="o">(</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
			
			<span class="n">print</span><span class="o">(</span> <span class="n">num</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
			
			<span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>			
			<span class="n">quickSort</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span>  <span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span> <span class="c1">//p 왼쪽 구간 재정렬</span>
			<span class="n">quickSort</span><span class="o">(</span><span class="n">num</span><span class="o">,</span>  <span class="n">p</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">//p 오른쪽 구간 재정렬</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="c1">//partition 함수 호출시 pivot의 위치를 확정하는 역할을 함</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">pV</span> 	<span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">r</span><span class="o">];</span> <span class="c1">//제일 마지막 값을 pivot으로</span>
		<span class="kt">int</span> <span class="n">i</span>	<span class="o">=</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">;</span> <span class="c1">// pivot 보다 작은 수의 갯수 (-1)부터 시작</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">l</span> <span class="o">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">-</span><span class="mi">1</span> <span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//처음부터 pivot까지 순회</span>
			<span class="k">if</span><span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">pV</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// &lt;= 오름 차순</span>
			<span class="c1">//if(num[j] &gt; pV) { // &lt;= 내림 차순</span>
				<span class="n">i</span><span class="o">++;</span>
				<span class="n">swap</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
			<span class="o">}</span>			
		<span class="o">}</span><span class="c1">//end</span>
		<span class="n">swap</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">),</span> <span class="n">r</span> <span class="o">);</span><span class="c1">//pivot보다 작은 수의 다음에 pivot으로 위치시킴</span>
		<span class="k">return</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span><span class="c1">//pivot에 위치를 반환함.</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">a</span><span class="o">];</span>
		<span class="n">num</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">b</span><span class="o">];</span>
		<span class="n">num</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
	<span class="o">}</span>
	
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="c1">// 퀵 정렬의 시간 복잡도 평균 O(N*logN) 이지만, 피봇값 선택에 따라서 최악의 경우 O(N^2) 까지 출력됨.</span>
		<span class="c1">// 퀵 정렬은 분할 알고리즘(편향된 분할 가능, 이미 정렬된 배열에서는 O(N^2) 발생 가능)</span>
		<span class="c1">// avg O(N*logN), max O(N^2) </span>

		<span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span>	<span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
		<span class="c1">//int[] num =	{2,1,3,4,5,7};</span>
		<span class="n">quickSort</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"================================================="</span><span class="o">);</span>
		<span class="n">print</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>

	<span class="o">}</span>

<span class="o">}</span>


<span class="c1">// 출력 결과</span>
<span class="o">(</span> <span class="mi">1</span><span class="o">)</span> <span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="o">(</span> <span class="mi">5</span><span class="o">)</span> <span class="o">(</span> <span class="mi">8</span><span class="o">)</span> <span class="o">(</span> <span class="mi">7</span><span class="o">)</span> <span class="o">(</span> <span class="mi">6</span><span class="o">)</span> <span class="o">(</span> <span class="mi">4</span><span class="o">)</span> <span class="o">(</span> <span class="mi">3</span><span class="o">)</span> <span class="o">(</span> <span class="mi">2</span><span class="o">)</span> <span class="o">[</span> <span class="mi">9</span><span class="o">]</span> 
<span class="o">(</span> <span class="mi">1</span><span class="o">)</span> <span class="o">(</span> <span class="mi">5</span><span class="o">)</span> <span class="o">(</span> <span class="mi">8</span><span class="o">)</span> <span class="o">(</span> <span class="mi">7</span><span class="o">)</span> <span class="o">(</span> <span class="mi">6</span><span class="o">)</span> <span class="o">(</span> <span class="mi">4</span><span class="o">)</span> <span class="o">(</span> <span class="mi">3</span><span class="o">)</span> <span class="o">[</span> <span class="mi">2</span><span class="o">]</span>   <span class="mi">9</span>   <span class="mi">10</span>  
  <span class="mi">1</span>    <span class="mi">2</span>  <span class="o">(</span> <span class="mi">8</span><span class="o">)</span> <span class="o">(</span> <span class="mi">7</span><span class="o">)</span> <span class="o">(</span> <span class="mi">6</span><span class="o">)</span> <span class="o">(</span> <span class="mi">4</span><span class="o">)</span> <span class="o">(</span> <span class="mi">3</span><span class="o">)</span> <span class="o">[</span> <span class="mi">5</span><span class="o">]</span>   <span class="mi">9</span>   <span class="mi">10</span>  
  <span class="mi">1</span>    <span class="mi">2</span>  <span class="o">(</span> <span class="mi">4</span><span class="o">)</span> <span class="o">[</span> <span class="mi">3</span><span class="o">]</span>   <span class="mi">5</span>    <span class="mi">8</span>    <span class="mi">7</span>    <span class="mi">6</span>    <span class="mi">9</span>   <span class="mi">10</span>  
  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>  <span class="o">(</span> <span class="mi">8</span><span class="o">)</span> <span class="o">(</span> <span class="mi">7</span><span class="o">)</span> <span class="o">[</span> <span class="mi">6</span><span class="o">]</span>   <span class="mi">9</span>   <span class="mi">10</span>  
  <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>  <span class="o">(</span> <span class="mi">7</span><span class="o">)</span> <span class="o">[</span> <span class="mi">8</span><span class="o">]</span>   <span class="mi">9</span>   <span class="mi">10</span>  
<span class="o">=================================================</span>
   <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>   <span class="mi">10</span> 


</code></pre></div></div>

<h1 id="merge-sort">Merge Sort.</h1>
<p>O(N*logN) 보장, 단점 정렬시 메모리 필요함.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">sort</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MergeSort</span> <span class="o">{</span>

	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">new_num</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">initTemp</span><span class="o">(</span><span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">new_num</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//출력용</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d "</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>		
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span><span class="kt">int</span> <span class="n">l</span><span class="o">,</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span><span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//출력용</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">" %d - %d - %d \t"</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			
			<span class="nc">String</span> <span class="n">s</span> <span class="o">=</span><span class="s">""</span><span class="o">;</span>
			<span class="nc">String</span> <span class="n">e</span> <span class="o">=</span><span class="s">""</span><span class="o">;</span>
			
			<span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="n">l</span> <span class="o">){</span> <span class="c1">//대상 범위 S</span>
				<span class="n">s</span><span class="o">=</span><span class="s">"("</span><span class="o">;</span>
				<span class="n">e</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
			<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="n">r</span> <span class="o">){</span> <span class="c1">//대상 범위 EW</span>
				<span class="n">s</span><span class="o">=</span><span class="s">""</span><span class="o">;</span>
				<span class="n">e</span><span class="o">=</span><span class="s">")"</span><span class="o">;</span>
			<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="n">m</span> <span class="o">){</span> <span class="c1">//중간값</span>
				<span class="n">s</span><span class="o">=</span><span class="s">"["</span><span class="o">;</span>
				<span class="n">e</span><span class="o">=</span><span class="s">"]"</span><span class="o">;</span>
			<span class="o">}</span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%1s%2s%1s "</span><span class="o">,</span><span class="n">s</span><span class="o">,</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span><span class="n">e</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>		
	<span class="o">}</span>
	
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">mergeSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>		
		<span class="k">if</span><span class="o">(</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="o">)</span> <span class="o">{</span> <span class="c1">// 1개 이상에서</span>
			<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="o">(</span><span class="n">l</span> <span class="o">+</span> <span class="n">r</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span> <span class="c1">// 중앙점 m을 발견</span>
			<span class="c1">//int m = l + (r - 1)/2; // 중앙점 m을 발견 (위 식과 같으나 overflow 방지)</span>
			<span class="c1">//System.out.format(" %d - %d - %d \n", l, m, r);</span>
			<span class="n">print</span><span class="o">(</span> <span class="n">num</span><span class="o">,</span><span class="n">l</span><span class="o">,</span> <span class="n">m</span> <span class="o">,</span><span class="n">r</span><span class="o">);</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">l</span><span class="o">==</span><span class="mi">8</span> <span class="o">&amp;&amp;</span> <span class="n">m</span><span class="o">==</span><span class="mi">8</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="o">==</span><span class="mi">9</span><span class="o">)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">mergeSort</span><span class="o">(</span> <span class="n">num</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span> <span class="c1">// 오른쪽 파트 정렬</span>
			<span class="n">mergeSort</span><span class="o">(</span> <span class="n">num</span><span class="o">,</span> <span class="n">m</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span> <span class="c1">//왼쪽 파트 정렬</span>
			<span class="n">merge</span><span class="o">(</span> <span class="n">num</span><span class="o">,</span> <span class="n">l</span><span class="o">,</span> <span class="n">m</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">merge</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span>  <span class="n">l</span> <span class="o">;</span> <span class="c1">//왼쪽 시작 index지점</span>
		<span class="kt">int</span> <span class="n">j</span> <span class="o">=</span>  <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 오른쪽 시작 지점</span>
		<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span>  <span class="n">l</span><span class="o">;</span>
		
		<span class="c1">// 적을 값을 저장함.</span>
		<span class="c1">//  l[i,,,,,,]m[j,,,,,,]r</span>
		<span class="c1">//  [k,,,,,,,,,,,,]</span>
		<span class="k">while</span><span class="o">(</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="o">){</span>
			<span class="k">if</span><span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">])</span> <span class="o">{</span> <span class="c1">//오른쪽, 왼쪽 arrary의 첫번째 값을 비교하여 이동함</span>
				<span class="n">new_num</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="n">i</span><span class="o">++;</span> <span class="c1">//다음 값으로 이동함</span>
			<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
				<span class="n">new_num</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
				<span class="n">j</span><span class="o">++;</span>
			<span class="o">}</span>
			<span class="n">k</span><span class="o">++;</span> <span class="c1">//저장 위치 이동</span>
		<span class="o">}</span><span class="c1">// end while</span>
		
		
		
		<span class="c1">//남은 데이터 삽입</span>
		<span class="k">if</span><span class="o">(</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">m</span> <span class="o">)</span> <span class="o">{</span>
			<span class="c1">//j쪽 배열만 남은 경우</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">j</span> <span class="o">;</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">;</span> <span class="n">t</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
				<span class="n">new_num</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">t</span><span class="o">];</span>
				<span class="n">k</span><span class="o">++;</span>
			<span class="o">}</span>
		<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
			<span class="c1">//i쪽 배열만 남은 경우</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">i</span> <span class="o">;</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">m</span> <span class="o">;</span> <span class="n">t</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
				<span class="n">new_num</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">t</span><span class="o">];</span>
				<span class="n">k</span><span class="o">++;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="c1">//정렬된 배열을 모두 입력</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">l</span> <span class="o">;</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">r</span> <span class="o">;</span> <span class="n">t</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
			<span class="n">num</span><span class="o">[</span><span class="n">t</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_num</span><span class="o">[</span><span class="n">t</span><span class="o">];</span>
		<span class="o">}</span>
		
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 병합 정렬의 시간 복잡도  O(N*logN) 값 보장, </span>
		<span class="c1">// 병합 정렬은 분할 알고리즘(중간 범위 분할 알고리즘)</span>
		<span class="c1">// 반씩 나눠서 합치면서 정리함.</span>
		<span class="c1">// 병합과 재정렬을 위해서 기존 데이터를 저장할 추가적인 메모리가 필요함.(단점 메모리 비효율, 장점 N*logN 속도 보장)</span>
		
		<span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span>	<span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
		<span class="c1">//int[] num =	{2,1,3,4,5,7};</span>
		<span class="n">initTemp</span><span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
		<span class="n">mergeSort</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"========================================="</span><span class="o">);</span>
		<span class="n">print</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>


<span class="c1">// 출력 결과</span>
 <span class="mi">0</span> <span class="o">-</span> <span class="mi">4</span> <span class="o">-</span> <span class="mi">9</span> 	<span class="o">(</span> <span class="mi">1</span>   <span class="mi">10</span>    <span class="mi">5</span>    <span class="mi">8</span>  <span class="o">[</span> <span class="mi">7</span><span class="o">]</span>   <span class="mi">6</span>    <span class="mi">4</span>    <span class="mi">3</span>    <span class="mi">2</span>    <span class="mi">9</span><span class="o">)</span> 
 <span class="mi">0</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">-</span> <span class="mi">4</span> 	<span class="o">(</span> <span class="mi">1</span>   <span class="mi">10</span>  <span class="o">[</span> <span class="mi">5</span><span class="o">]</span>   <span class="mi">8</span>    <span class="mi">7</span><span class="o">)</span>   <span class="mi">6</span>    <span class="mi">4</span>    <span class="mi">3</span>    <span class="mi">2</span>    <span class="mi">9</span>  
 <span class="mi">0</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="mi">2</span> 	<span class="o">(</span> <span class="mi">1</span>  <span class="o">[</span><span class="mi">10</span><span class="o">]</span>   <span class="mi">5</span><span class="o">)</span>   <span class="mi">8</span>    <span class="mi">7</span>    <span class="mi">6</span>    <span class="mi">4</span>    <span class="mi">3</span>    <span class="mi">2</span>    <span class="mi">9</span>  
 <span class="mi">0</span> <span class="o">-</span> <span class="mi">0</span> <span class="o">-</span> <span class="mi">1</span> 	<span class="o">(</span> <span class="mi">1</span>   <span class="mi">10</span><span class="o">)</span>   <span class="mi">5</span>    <span class="mi">8</span>    <span class="mi">7</span>    <span class="mi">6</span>    <span class="mi">4</span>    <span class="mi">3</span>    <span class="mi">2</span>    <span class="mi">9</span>  
 <span class="mi">3</span> <span class="o">-</span> <span class="mi">3</span> <span class="o">-</span> <span class="mi">4</span> 	  <span class="mi">1</span>    <span class="mi">5</span>   <span class="mi">10</span>  <span class="o">(</span> <span class="mi">8</span>    <span class="mi">7</span><span class="o">)</span>   <span class="mi">6</span>    <span class="mi">4</span>    <span class="mi">3</span>    <span class="mi">2</span>    <span class="mi">9</span>  
 <span class="mi">5</span> <span class="o">-</span> <span class="mi">7</span> <span class="o">-</span> <span class="mi">9</span> 	  <span class="mi">1</span>    <span class="mi">5</span>    <span class="mi">7</span>    <span class="mi">8</span>   <span class="mi">10</span>  <span class="o">(</span> <span class="mi">6</span>    <span class="mi">4</span>  <span class="o">[</span> <span class="mi">3</span><span class="o">]</span>   <span class="mi">2</span>    <span class="mi">9</span><span class="o">)</span> 
 <span class="mi">5</span> <span class="o">-</span> <span class="mi">6</span> <span class="o">-</span> <span class="mi">7</span> 	  <span class="mi">1</span>    <span class="mi">5</span>    <span class="mi">7</span>    <span class="mi">8</span>   <span class="mi">10</span>  <span class="o">(</span> <span class="mi">6</span>  <span class="o">[</span> <span class="mi">4</span><span class="o">]</span>   <span class="mi">3</span><span class="o">)</span>   <span class="mi">2</span>    <span class="mi">9</span>  
 <span class="mi">5</span> <span class="o">-</span> <span class="mi">5</span> <span class="o">-</span> <span class="mi">6</span> 	  <span class="mi">1</span>    <span class="mi">5</span>    <span class="mi">7</span>    <span class="mi">8</span>   <span class="mi">10</span>  <span class="o">(</span> <span class="mi">6</span>    <span class="mi">4</span><span class="o">)</span>   <span class="mi">3</span>    <span class="mi">2</span>    <span class="mi">9</span>  
 <span class="mi">8</span> <span class="o">-</span> <span class="mi">8</span> <span class="o">-</span> <span class="mi">9</span> 	  <span class="mi">1</span>    <span class="mi">5</span>    <span class="mi">7</span>    <span class="mi">8</span>   <span class="mi">10</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">6</span>  <span class="o">(</span> <span class="mi">2</span>    <span class="mi">9</span><span class="o">)</span> 
<span class="o">=========================================</span>
   <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>   <span class="mi">10</span> 

</code></pre></div></div>

<h1 id="heap-sort">Heap Sort.</h1>
<p>N/2*logN  (N이 클경우 logN은 값은 작은 값으로 결과적으로) &gt; O(N)</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">sort</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeapSort</span> <span class="o">{</span>

	
	<span class="c1">// Heap 완전 인트리</span>
	<span class="c1">// Min Heap 가장 작은 값이 위로 오도록</span>
	<span class="c1">// Max Heap 가장 큰 값이 위로 오도록 </span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">debug</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">a</span><span class="o">];</span>
		<span class="n">num</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">[</span><span class="n">b</span><span class="o">];</span>
		<span class="n">num</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>

		<span class="k">if</span><span class="o">(</span><span class="n">debug</span><span class="o">)</span> <span class="o">{</span>
			<span class="c1">//출력용</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d"</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//출력용</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">=</span><span class="mi">0</span> <span class="o">;</span> <span class="n">d</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span> <span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%4d "</span><span class="o">,</span><span class="n">num</span><span class="o">[</span><span class="n">d</span><span class="o">]);</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>		
	<span class="o">}</span>
	
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		
		<span class="c1">// N/2*logN  (N이 클경우 logN은 값은 작은 값으로 결과적으로) &gt; O(N)</span>
		
		<span class="c1">//int[] num =	{1, 2, 3, 4, 5, 6, 7, 8, 9 , 10};</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span>	<span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">9</span><span class="o">};</span>
		<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
		
		<span class="c1">//자료 구조를 힙 구조로 정렬함.</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span> <span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c1">//1부터 시작함.</span>

			<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="c1">//자식 위치</span>
			<span class="k">do</span> <span class="o">{</span>
				<span class="kt">int</span> <span class="n">root</span> <span class="o">=</span> <span class="o">(</span><span class="n">c</span><span class="o">-</span><span class="mi">1</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span> <span class="c1">//부모의 위치</span>
				<span class="c1">//System.out.format("%d(%d) ", i, root);</span>
				<span class="c1">//1(0) 2(0) 3(1) 4(1) 5(2) 6(2) 7(3) 8(3) 9(4) </span>
				
				<span class="k">if</span><span class="o">(</span><span class="n">num</span><span class="o">[</span><span class="n">root</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">[</span><span class="n">c</span><span class="o">]){</span> <span class="c1">//자식이 부모보다 클 경우 swap </span>
					<span class="n">swap</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
				<span class="o">}</span>
				
				<span class="n">c</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span> <span class="c1">//자식을 부모로 이동하여, 재귀로 내려감</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d  "</span><span class="o">,</span> <span class="n">c</span><span class="o">);</span>
			
			<span class="o">}</span><span class="k">while</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>	
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"------------------------------"</span><span class="o">);</span>	
		<span class="n">print</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"------------------------------"</span><span class="o">);</span>	
		<span class="c1">//크기 축소를 줄이고 힙을 만듬</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span> <span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
			<span class="n">swap</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// 0번째 원소가 가장 큰값으로 가장 큰 값과 가장 작은 값을 교체함.		</span>
			
			<span class="kt">int</span> <span class="n">root</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			
			<span class="k">do</span> <span class="o">{</span>
				<span class="n">c</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">root</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
				<span class="c1">//자식 좌우 중에 더 큰 값을 찾기</span>
				<span class="k">if</span><span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">[</span><span class="n">c</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
					<span class="n">c</span><span class="o">++;</span>
				<span class="o">}</span>
				<span class="c1">//루트보다 자식이 더 크면 교환함.</span>
				<span class="k">if</span><span class="o">(</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">i</span>  <span class="o">&amp;&amp;</span> <span class="n">num</span><span class="o">[</span><span class="n">root</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">num</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
					<span class="n">swap</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span> <span class="n">c</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
				<span class="o">}</span>
				<span class="n">root</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
			<span class="o">}</span><span class="k">while</span><span class="o">(</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="n">i</span> <span class="o">);</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"------------------------------"</span><span class="o">);</span>	
		<span class="n">print</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
		
	<span class="o">}</span>

<span class="o">}</span>


<span class="c1">// 출력 결과</span>
<span class="mi">0</span>  
<span class="mi">0</span>  
<span class="mi">1</span>  <span class="mi">0</span>  
<span class="mi">1</span>  <span class="mi">0</span>  
<span class="mi">2</span>  <span class="mi">0</span>  
<span class="mi">2</span>  <span class="mi">0</span>  
<span class="mi">3</span>  <span class="mi">1</span>  <span class="mi">0</span>  
<span class="mi">3</span>  <span class="mi">1</span>  <span class="mi">0</span>  
<span class="mi">4</span>  <span class="mi">1</span>  <span class="mi">0</span>  
<span class="o">------------------------------</span>
  <span class="mi">10</span>    <span class="mi">9</span>    <span class="mi">6</span>    <span class="mi">3</span>    <span class="mi">8</span>    <span class="mi">5</span>    <span class="mi">4</span>    <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">7</span> 
<span class="o">------------------------------</span>
   <span class="mi">7</span>   <span class="mi">9</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">8</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">2</span>  <span class="mi">10</span>
   <span class="mi">9</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">8</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">2</span>  <span class="mi">10</span>
   <span class="mi">9</span>   <span class="mi">8</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">7</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">2</span>  <span class="mi">10</span>
   <span class="mi">2</span>   <span class="mi">8</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">7</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">8</span>   <span class="mi">2</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">7</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">8</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">7</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">7</span>   <span class="mi">1</span>   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">7</span>   <span class="mi">3</span>   <span class="mi">6</span>   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">4</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">6</span>   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">5</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">6</span>   <span class="mi">3</span>   <span class="mi">5</span>   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">4</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">5</span>   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">5</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">4</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">1</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">3</span>   <span class="mi">2</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">3</span>   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">2</span>   <span class="mi">1</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
   <span class="mi">1</span>   <span class="mi">2</span>   <span class="mi">3</span>   <span class="mi">4</span>   <span class="mi">5</span>   <span class="mi">6</span>   <span class="mi">7</span>   <span class="mi">8</span>   <span class="mi">9</span>  <span class="mi">10</span>
<span class="o">------------------------------</span>
   <span class="mi">1</span>    <span class="mi">2</span>    <span class="mi">3</span>    <span class="mi">4</span>    <span class="mi">5</span>    <span class="mi">6</span>    <span class="mi">7</span>    <span class="mi">8</span>    <span class="mi">9</span>   <span class="mi">10</span> 


</code></pre></div></div>

<h1 id="counting-sort">Counting Sort.</h1>
<p>O(N) 특정 범위 조건</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">sort</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CountingSort</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">// 특정 범위 조건이 있는 경우 빠름, O(N)</span>

		<span class="kt">int</span> <span class="n">count</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">6</span><span class="o">];</span> <span class="c1">//1~5</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">num</span> <span class="o">=</span>	 <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span>
				 <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span>
				 <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
		<span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
		
		<span class="c1">//count 초기화</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">count</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> 
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">count</span><span class="o">[</span><span class="n">num</span><span class="o">[</span><span class="n">i</span><span class="o">]]++;</span> 
		<span class="o">}</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">count</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">];</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span><span class="n">i</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>	
	
	<span class="o">}</span>

<span class="o">}</span>

<span class="c1">// 출력 결과</span>
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">4</span> <span class="mi">4</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">5</span> <span class="mi">5</span> <span class="mi">5</span> 


</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="java" /><category term="Bubble" /><category term="Selection" /><category term="Insertion" /><category term="Quick" /><category term="Merge" /><category term="Heap" /><category term="Counting" /><summary type="html"><![CDATA[정렬 함수 테스트]]></summary></entry><entry><title type="html">[알고리즘] 어떤 종류들이 있는지?</title><link href="https://kimjaehyun.co.kr/algorithm/algorithm-index/" rel="alternate" type="text/html" title="[알고리즘] 어떤 종류들이 있는지?" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/algorithm-index</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/algorithm-index/"><![CDATA[<p>어떤 알고리즘이 있고, 어떨때 쓰는지를 정리해보려는 목적 입니다.</p>

<p>정리하려고  알게된 몇가지 사실은 9세기 페르시아의 수학자인  <br />
무하마드 알콰리즈미 의 이름을 라틴어화한 algorismus 에서 유래 되었답니다.     <br />
<img src="\assets/images_post/algorithm/algorithm_muhamad.png" alt="무함마드 이븐 무사 알콰리즈미" width="200px" /></p>

<p>위키백과의 알고리즘 정의를 보면   <br />
수학과 컴퓨터 과학, 언어학 또는 관련 분야에서  <br />
어떠한 문제를 해결하기 위해 정해진  <br />
일련의 절차나 방법을 공식화한 형태로 표현한 것.</p>

<p>정리 시작!!!</p>

<h1 id="정렬-방식">정렬 방식</h1>
<ul>
  <li>Bubble Sort.			O(N^2)</li>
  <li>Selection Sort.		O(N^2)</li>
  <li>Insertion Sort.		O(N^2)</li>
  <li>Quick Sort.			avg O(N*logN), max O(N^2) - 이미정렬된 경우</li>
  <li>Merge Sort.			O(N*logN) 보장, 단점 정렬시 메모리 필요함.</li>
  <li>Heap Sort.			N/2*logN  (N이 클경우 logN은 값은 작은 값으로 결과적으로) &gt; O(N)</li>
  <li>
    <p>Counting Sort.		O(N) 특정 범위 조건</p>
  </li>
  <li>조건별 정리 : 위상정리 TopologySort  (임계 경로 찾기, 임계경로란 갈수있는 길의 최대 값)</li>
</ul>

<h1 id="최단경로-문제">최단경로 문제</h1>
<ul>
  <li>다익스트라 알고리즘 (특정 시작점에서 모든 지점에 최소점을 구할때)</li>
  <li>플로이드 마샬(모든 정점’에서 ‘모든 정점’으로의 최단 경로를 구할때)</li>
</ul>

<h1 id="최소-신장-트리">최소 신장 트리</h1>
<p>정의 (Node와 Node-1의 간선으로 이루어짐) - UnionFind</p>
<ul>
  <li>프림 알고리즘 (Prim)</li>
  <li>크루스칼 알고리즘(Kruskal)</li>
  <li>MST(Minimum Spanning Tree)</li>
</ul>

<h1 id="글자-검색">글자 검색</h1>
<ul>
  <li>KMP</li>
  <li>라빈카프</li>
</ul>

<h1 id="이진-트리">이진 트리</h1>
<ul>
  <li>전위 순회(Preorder Traversal)		(부) - L - R</li>
  <li>중위 순회(Inorder Traversal)		L - (부) - R</li>
  <li>후위 순회(Postorder Traversal)	L - R - (부)</li>
</ul>

<h1 id="그래프-검색">그래프 검색</h1>
<ul>
  <li>DFS (Stack)</li>
  <li>BFS (Queue)</li>
</ul>

<h1 id="동일-부모-검색">동일 부모 검색</h1>
<ul>
  <li>Union Find</li>
</ul>

<h1 id="최대-유량-문제네트워크-선로-지연우회-관련">최대 유량 문제(네트워크 선로 지연/우회 관련)</h1>
<ul>
  <li>NetworkFlow (BSF)</li>
</ul>

<h1 id="백트래킹">백트래킹</h1>
<ul>
  <li>조합, 순열 관련시</li>
</ul>

<h1 id="floodfill-기법">FloodFill 기법</h1>
<ul>
  <li>좌표중에 덩어리의 묶음을 찾는 방법 (*DFS, BSF)</li>
</ul>

<h1 id="bfs-검색시">BFS 검색시</h1>
<ul>
  <li>가중치가 동일한 경우 중복을 미허용시키고</li>
  <li>가중치가 다른 경우 중복방문을 허용하여 값을 overide함</li>
</ul>

<h1 id="최소-범위-검색">최소 범위 검색</h1>
<ul>
  <li>슬라이딩 윈도우 기법 (s, e를 이동하여 최소 범위 검색)</li>
</ul>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="Bubble" /><category term="Selection" /><category term="Insertion" /><category term="Quick" /><category term="Merge" /><category term="Heap" /><category term="Counting" /><category term="다익스트라" /><category term="플로이드마샬" /><category term="크루스칼" /><category term="프림" /><category term="KMP" /><category term="이진트리" /><category term="BFS" /><category term="DFS" /><summary type="html"><![CDATA[어떤 알고리즘이 있고, 어떨때 쓰는지를 정리해보려는 목적 입니다.]]></summary></entry><entry><title type="html">[JAVA] DFS vs BFS</title><link href="https://kimjaehyun.co.kr/algorithm/java/java-dfs-bsf/" rel="alternate" type="text/html" title="[JAVA] DFS vs BFS" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/java/java-dfs-bsf</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/java/java-dfs-bsf/"><![CDATA[<h1 id="깊이-우선-검색dfs">깊이 우선 검색(DFS)</h1>
<ul>
  <li>연결된 항목으 끝까지 검색 후 상위 브랜치로 이동하여 검색을 진행</li>
  <li>최대한 깊이 내려간뒤, 더이상 없을때 옆으로 이동하는 검색 형태</li>
  <li>Stack</li>
</ul>

<h1 id="넓이-우선-검색bsf">넓이 우선 검색(BSF)</h1>
<ul>
  <li>연결된 인접노드를 먼저 넓게 검색한 다음 더이상 없을때 하위로 내려감</li>
  <li>최대한 넓게 이동 검색 후 하위로 이동.</li>
  <li>Queue</li>
</ul>

<h1 id="소스-코드">소스 코드</h1>
<p>문제 그래프 연결 조건  <br />
<img src="/assets/images_post/codingtest/bfsdfs_graph_ex001.png" alt="그래프 연결" /></p>
<ul>
  <li>DFS(0시작) 결과 : 0 1 2 4 3 5 6 8 7</li>
  <li>BFS(0시작) 결과 : 0 1 2 3 4 5 6 7 8</li>
</ul>

<h2 id="dfsdepth-first-search">DFS(Depth-First Search)</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">dfsbfs</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dfs</span> <span class="o">{</span>	<span class="c1">// Depth-First Search (inorder, preorder, postorder)</span>
	<span class="c1">//Stack 사용	</span>
	<span class="kt">int</span> <span class="n">cnt</span><span class="o">;</span>
	<span class="kt">int</span><span class="o">[]</span> <span class="n">ck</span><span class="o">;</span>	<span class="c1">//방문 표시용</span>
	<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">node</span><span class="o">;</span> 	<span class="c1">//node 관계 표시</span>

	<span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">st</span><span class="o">;</span>	<span class="c1">// DFS용</span>
	
	<span class="kd">public</span> <span class="nf">Dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">cnt</span> <span class="o">=</span> <span class="n">cnt</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">ck</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">cnt</span><span class="o">];</span>
		<span class="k">this</span><span class="o">.</span><span class="na">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">[</span><span class="n">cnt</span><span class="o">];</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">cnt</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">node</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
		<span class="o">}</span>
		
		<span class="c1">//DFS 용</span>
		<span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>

	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addEdge</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">node</span><span class="o">[</span><span class="n">a</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
		<span class="n">node</span><span class="o">[</span><span class="n">b</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">point</span><span class="o">)</span> <span class="o">{</span>  
		<span class="k">if</span><span class="o">(</span><span class="n">ck</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span> <span class="c1">//이미 방문</span>
		
		<span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
		<span class="n">ck</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		
		<span class="kt">int</span> <span class="n">out_point</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">().</span><span class="na">intValue</span><span class="o">();</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span> <span class="n">out_point</span><span class="o">);</span>
		
		<span class="c1">//자식을 dfs에 재귀호출</span>
		<span class="k">while</span><span class="o">(</span> <span class="o">!</span> <span class="n">node</span><span class="o">[</span><span class="n">out_point</span><span class="o">].</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">child</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="n">out_point</span><span class="o">].</span><span class="na">poll</span><span class="o">().</span><span class="na">intValue</span><span class="o">();</span>
			<span class="n">dfs</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
		<span class="o">}</span>		
	<span class="o">}</span>
	
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

		<span class="nc">Dfs</span> <span class="n">fs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Dfs</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span><span class="c1">//자료의 갯수</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span><span class="mi">7</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">);</span>
		
		<span class="n">fs</span><span class="o">.</span><span class="na">dfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>	<span class="c1">//0 1 2 4 3 5 6 8 7</span>
		<span class="c1">//fs.dfs(3);		//3 1 0 2 4 5 6 8 7 </span>
		
	<span class="o">}</span>

<span class="o">}</span>

<span class="c1">// 출력 </span>
<span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">8</span> <span class="mi">7</span>

</code></pre></div></div>

<h2 id="bfsbreadth-first-search">BFS(Breadth-First Search)</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">dfsbfs</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Bfs</span> <span class="o">{</span>	<span class="c1">// Breadth-First Search</span>
	<span class="c1">// Queue</span>
	
	<span class="kt">int</span> <span class="n">cnt</span><span class="o">;</span>
	<span class="kt">int</span><span class="o">[]</span> <span class="n">ck</span><span class="o">;</span>	<span class="c1">//방문 표시용</span>
	<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">node</span><span class="o">;</span> 	<span class="c1">//node 관계 표시</span>
	<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">;</span> 	
	
	<span class="kd">public</span> <span class="nf">Bfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">cnt</span> <span class="o">=</span> <span class="n">cnt</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">ck</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">cnt</span><span class="o">];</span>
		<span class="k">this</span><span class="o">.</span><span class="na">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">[</span><span class="n">cnt</span><span class="o">];</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">cnt</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">node</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
		<span class="o">}</span>
		
		<span class="c1">//BSF용</span>
		<span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">bfs</span><span class="o">(){</span>
		<span class="n">bfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">addEdge</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="c1">//System.out.format("%d %d \n",a,b);</span>
		<span class="n">node</span><span class="o">[</span><span class="n">a</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
		<span class="n">node</span><span class="o">[</span><span class="n">b</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">bfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">point</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">ck</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">)</span> <span class="k">return</span><span class="o">;</span>
		
		<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">point</span><span class="o">);</span>
		<span class="n">ck</span><span class="o">[</span><span class="n">point</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		
		<span class="k">while</span><span class="o">(</span> <span class="o">!</span> <span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">out_piont</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">().</span><span class="na">intValue</span><span class="o">();</span>
			
			<span class="k">while</span><span class="o">(</span> <span class="o">!</span> <span class="n">node</span><span class="o">[</span><span class="n">out_piont</span><span class="o">].</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
				<span class="kt">int</span> <span class="n">child</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="n">out_piont</span><span class="o">].</span><span class="na">poll</span><span class="o">().</span><span class="na">intValue</span><span class="o">();</span>
				<span class="c1">//자식 노드들을 Q에 추가함</span>
				<span class="k">if</span><span class="o">(</span> <span class="n">ck</span><span class="o">[</span><span class="n">child</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
					<span class="n">ck</span><span class="o">[</span><span class="n">child</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
					<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span><span class="c1">//end whil</span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span> <span class="n">out_piont</span><span class="o">);</span>
			
		<span class="o">}</span><span class="c1">//end while</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>	
		<span class="nc">Bfs</span> <span class="n">fs</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bfs</span><span class="o">(</span><span class="mi">9</span><span class="o">);</span><span class="c1">//자료의 갯수</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span><span class="mi">7</span><span class="o">);</span>
		<span class="n">fs</span><span class="o">.</span><span class="na">addEdge</span><span class="o">(</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">);</span>
		
		<span class="n">fs</span><span class="o">.</span><span class="na">bfs</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>	<span class="c1">//0 1 2 3 4 5 6 7 8 </span>
		<span class="c1">//fs.bfs(3);		//3 1 2 4 5 0 6 7 8 </span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 출력 </span>
<span class="mi">0</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="mi">8</span> 
</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="java" /><category term="dfs" /><category term="bfs" /><category term="깊이우선탐색" /><category term="넓이우선탐색" /><category term="Breadth-First Search" /><summary type="html"><![CDATA[깊이 우선 검색(DFS) 연결된 항목으 끝까지 검색 후 상위 브랜치로 이동하여 검색을 진행 최대한 깊이 내려간뒤, 더이상 없을때 옆으로 이동하는 검색 형태 Stack]]></summary></entry><entry><title type="html">[JAVA] 이진 트리</title><link href="https://kimjaehyun.co.kr/algorithm/java/java-binarytree/" rel="alternate" type="text/html" title="[JAVA] 이진 트리" /><published>2022-05-28T00:00:00-05:00</published><updated>2022-05-28T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/java/java-binarytree</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/java/java-binarytree/"><![CDATA[<h1 id="이진트리">이진트리</h1>
<p>접근 순회 방식에 따라서 아래와 같이 나뉨.</p>
<h2 id="전위-순회preorder-traversal">전위 순회(Preorder Traversal)</h2>
<p>(부) - L - R</p>
<h2 id="중위-순회inorder-traversal">중위 순회(Inorder Traversal)</h2>
<p>L - (부) - R</p>
<h2 id="후위-순회postorder-traversal">후위 순회(Postorder Traversal)</h2>
<p>L - R - (부)</p>

<h1 id="소스-코드">소스 코드</h1>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">tree</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BinaryTree</span> <span class="o">{</span>
	
	<span class="kd">public</span> <span class="nc">Node</span> <span class="n">root</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRoot</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">root</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">Node</span> <span class="nf">getRoot</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">root</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">Node</span> <span class="nf">makeNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">data</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Node</span> <span class="n">n</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">();</span>
		<span class="n">n</span><span class="o">.</span><span class="na">data</span> <span class="o">=</span> <span class="n">data</span><span class="o">;</span>
		<span class="n">n</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
		<span class="n">n</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
		<span class="k">return</span> <span class="n">n</span><span class="o">;</span>
	<span class="o">}</span>
	
	
	<span class="c1">//① 전위 순회(Preorder Traversal)	(부) - L - R</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">preOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">" %d "</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
			<span class="n">preOrder</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
			<span class="n">preOrder</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>			
		<span class="o">}</span>
	<span class="o">}</span>	
	<span class="c1">//② 중위 순회(Inorder Traversal)		L - (부) - R</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">inOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
			<span class="n">inOrder</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">" %d "</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
			<span class="n">inOrder</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>			
		<span class="o">}</span>
	<span class="o">}</span>
	<span class="c1">//③ 후위 순회(Postorder Traversal)	L - R - (부)</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">postOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
			<span class="n">postOrder</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
			<span class="n">postOrder</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">" %d "</span><span class="o">,</span> <span class="n">n</span><span class="o">.</span><span class="na">data</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	<span class="cm">/*
	① 전위 순회(Preorder Traversal)	(부) - L - R
	② 중위 순회(Inorder Traversal)		L - (부) - R
	③ 후위 순회(Postorder Traversal)	L - R - (부)
	 	1
	   /  \
	  2   3
	 / \
	4   5
	
	 */</span>
		<span class="nc">BinaryTree</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BinaryTree</span><span class="o">();</span>
		<span class="nc">Node</span> <span class="n">n4</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">makeNode</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
		<span class="nc">Node</span> <span class="n">n5</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">makeNode</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
		<span class="nc">Node</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">makeNode</span><span class="o">(</span><span class="n">n4</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">n5</span><span class="o">);</span>
		<span class="nc">Node</span> <span class="n">n3</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">makeNode</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
		<span class="nc">Node</span> <span class="n">n1</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">makeNode</span><span class="o">(</span><span class="n">n2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">n3</span><span class="o">);</span>
		
		<span class="n">t</span><span class="o">.</span><span class="na">setRoot</span><span class="o">(</span><span class="n">n1</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"inOrder:"</span><span class="o">);</span>
		<span class="n">t</span><span class="o">.</span><span class="na">inOrder</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getRoot</span><span class="o">());</span> <span class="c1">//4  2  5  1  3 </span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"preOrder:"</span><span class="o">);</span>
		<span class="n">t</span><span class="o">.</span><span class="na">preOrder</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getRoot</span><span class="o">());</span> <span class="c1">// 1  2  4  5  3 </span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"postOrder:"</span><span class="o">);</span>
		<span class="n">t</span><span class="o">.</span><span class="na">postOrder</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">getRoot</span><span class="o">());</span> <span class="c1">// 4  5  2  3  1 </span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
	<span class="kt">int</span> <span class="n">data</span><span class="o">;</span>
	<span class="nc">Node</span> <span class="n">left</span><span class="o">;</span>
	<span class="nc">Node</span> <span class="n">right</span><span class="o">;</span>
	
<span class="o">}</span>



<span class="c1">// 출력 obj.c(arr,  ck, 0, arr.length, 3);</span>
<span class="nl">inOrder:</span>
 <span class="mi">4</span>  <span class="mi">2</span>  <span class="mi">5</span>  <span class="mi">1</span>  <span class="mi">3</span> 
<span class="nl">preOrder:</span>
 <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">4</span>  <span class="mi">5</span>  <span class="mi">3</span> 
<span class="nl">postOrder:</span>
 <span class="mi">4</span>  <span class="mi">5</span>  <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">1</span> 


</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="java" /><category term="트리" /><category term="Tree" /><category term="이진트리" /><category term="BinaryTree" /><summary type="html"><![CDATA[이진트리 접근 순회 방식에 따라서 아래와 같이 나뉨. 전위 순회(Preorder Traversal) (부) - L - R 중위 순회(Inorder Traversal) L - (부) - R 후위 순회(Postorder Traversal) L - R - (부)]]></summary></entry><entry><title type="html">[AWS S3] Simple Storage Service 서비스 사용</title><link href="https://kimjaehyun.co.kr/cloud/cloud_what_is_serverless-copy/" rel="alternate" type="text/html" title="[AWS S3] Simple Storage Service 서비스 사용" /><published>2022-05-27T00:00:00-05:00</published><updated>2022-05-27T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/cloud/cloud_what_is_serverless%20copy</id><content type="html" xml:base="https://kimjaehyun.co.kr/cloud/cloud_what_is_serverless-copy/"><![CDATA[<h1 id="s3란-simple-storage-service">S3란 (Simple Storage Service)</h1>
<p>Cloud내 File를 저장하기 위해서 사용함.  <br />
특징</p>
<ul>
  <li>99.999999999% 내구성</li>
  <li>객체 스토리지 서비스
    <ul>
      <li>반대 서비스, Block Storage Serivce (EBS, EFS등)</li>
    </ul>
  </li>
  <li>무제한 확장 가능
    <ul>
      <li>객체 한개는 (0byte~5TB 이내 조건)</li>
    </ul>
  </li>
  <li>Static web 서비스 기능 제공
    <ul>
      <li>서비스 도메인과 Buket명과 같음</li>
    </ul>
  </li>
  <li>암호화 및 보안 적용 지원
    <ul>
      <li>SSE S3(S3서비스가 알아서 암호화)</li>
      <li>SSE KMS(KMS 서비스를 토해서 암호화)</li>
      <li>SSE C (클라이언트가 제공한 암호 방식 사용)</li>
    </ul>
  </li>
  <li>Bucket 단위로 사용
    <ul>
      <li>Buket이름은 Unique함</li>
    </ul>
  </li>
</ul>

<h1 id="s3-구성">S3 구성</h1>
<ul>
  <li>key : 파일이름</li>
  <li>Value : 파일데이터</li>
  <li>Version id : 파일 버전</li>
  <li>ACL :  : 접근 권한</li>
  <li>Metadata :  파일 메타 정보</li>
</ul>

<h1 id="s3의-정적-호스팅-주소-형태">S3의 정적 호스팅 주소 형태</h1>
<p>주소 구조</p>
<ul>
  <li>https://Bucket이름.s3.리전명.amazoneaws.com/키이름</li>
  <li>https://s3.리전명.amazoneaws.com/Bucket이름/키이름</li>
</ul>

<h1 id="s3---glacier">S3 - Glacier</h1>
<ul>
  <li>아카이브용 저장소</li>
  <li>가격이 저렴함</li>
  <li>데이터 가져오는데 시간이 소요됨.</li>
</ul>

<h1 id="s3-보안">S3 보안</h1>
<p>정책 적용 설정 <br />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_12.png" alt="bucket 생성" />
<a href="https://awspolicygen.s3.amazonaws.com/policygen.html" target="_blank">AWS Policy Generator</a>  <br />
<a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html" target="_blank">AWS Policy Sample</a></p>

<h2 id="bucket-policy">Bucket policy</h2>
<ul>
  <li>Bucket 단위로 정책이 적용됨</li>
  <li>Version 문법의 작성 버전 ( 2008-10-17 or 2012-10-17 )</li>
  <li>Id : 아이디</li>
  <li>Statement
    <ul>
      <li>Sid : 구별을 위한 아이디</li>
      <li>Effect : 허가 여부 Allow or Deny</li>
      <li>Principal : 권한의 이용을 위한 Target을 선택함</li>
      <li>Action : 사용할 권한에 대한 동작</li>
      <li>Resource : 동작에 대상이 되는 리소스</li>
      <li>Condition : 동작에 대한 조건을 설정</li>
    </ul>
  </li>
</ul>

<h2 id="aclaccess-control-list">ACL(Access Control List)</h2>
<ul>
  <li>파일 단위로 정책이 적용됨</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;Sample&gt;</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PolicyXXXXXXX"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"StmtXXXXXXXXXX"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"s3:GetObject"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::버킷이름/*"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h1 id="s3-static-hosting-실습">S3 Static Hosting 실습</h1>
<h2 id="버킷-생성">버킷 생성</h2>
<h3 id="s3--create-bucket-화면">S3 &gt; Create Bucket 화면</h3>
<ul>
  <li>버킷 이름을 입력합니다.</li>
  <li>퍼블릭 엑세스가 가능하도록 보안을 해제 합니다.</li>
  <li>생성을 실행합니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_1.png" alt="bucket 생성" /></li>
</ul>

<h2 id="버킷-권한-설정">버킷 권한 설정</h2>
<ul>
  <li>Amazon S3 &gt; 버킷 &gt; (버킷이름) 을 선택합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">권한</code> 탭에서 <code class="language-plaintext highlighter-rouge">버킷정책</code> 편집을 실행 후 위 정책을 적용 합니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_13.png" alt="bucket 생성" />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_4.png" alt="bucket 생성" />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_5.png" alt="bucket 생성" /></li>
  <li>정책 수정시 주의 사항
    <ul>
      <li>Actions를 GetObject로 선택합니다.</li>
      <li>ARN이름은 버킷 초기 화면 속성에서 확인합니다.</li>
      <li>Principal을 모두 접근이 가능하도록 <code class="language-plaintext highlighter-rouge">*</code> 로 입력합니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_11.png" alt="bucket 생성" />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_12.png" alt="bucket 생성" /></li>
    </ul>
  </li>
</ul>

<h2 id="정적-웹-사이트-호스팅">정적 웹 사이트 호스팅</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">속성</code> 탭으로 이동 후 정적 웹사이트 호스팅으로 진입 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">정적 웹 사이트 호스팅</code>을 활성화를 선택합니다.</li>
  <li>인덱스 문서 항목에 진입시 페이지 <code class="language-plaintext highlighter-rouge">index.html</code>를 입력 합니다.</li>
  <li>저장 후 <code class="language-plaintext highlighter-rouge">엔드포인트 주소</code>를 선택하면 정적 웹 호스팅이 된 것을 알 수 있습니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_16.png" alt="bucket 생성" /></li>
</ul>

<h2 id="엔드포인트-주소를-도메인으로-연결">엔드포인트 주소를 도메인으로 연결</h2>
<p><code class="language-plaintext highlighter-rouge">Roue53 &gt; 호스팅영역 &gt; yourdomain &gt; 레코드 생성</code> 위치에서 하기 입력으로 subdomain 연결함</p>
<ul>
  <li>트레픽 라우팅 대상에서 <code class="language-plaintext highlighter-rouge">별칭</code> 사용 선택</li>
  <li>S3 웹 사이트 엔드포인트에 대한 별칭</li>
  <li>사용 리전 선택 (예) <code class="language-plaintext highlighter-rouge">아시아 태평양(서울) [ap-northeast-2]</code></li>
  <li>생성한 S3 엔드포인트 선택  <br />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_17.png" alt="bucket 생성" /></li>
</ul>

<p>일정시간 후 연결됨을 확인 할 수 있습니다.</p>]]></content><author><name>devjaedol</name></author><category term="cloud" /><category term="AWS" /><category term="Simple Storage Service" /><category term="S3" /><category term="File" /><category term="S3 Static Hosting" /><summary type="html"><![CDATA[S3란 (Simple Storage Service) Cloud내 File를 저장하기 위해서 사용함. 특징 99.999999999% 내구성 객체 스토리지 서비스 반대 서비스, Block Storage Serivce (EBS, EFS등) 무제한 확장 가능 객체 한개는 (0byte~5TB 이내 조건) Static web 서비스 기능 제공 서비스 도메인과 Buket명과 같음 암호화 및 보안 적용 지원 SSE S3(S3서비스가 알아서 암호화) SSE KMS(KMS 서비스를 토해서 암호화) SSE C (클라이언트가 제공한 암호 방식 사용) Bucket 단위로 사용 Buket이름은 Unique함]]></summary></entry><entry><title type="html">[AWS] 기초 개념</title><link href="https://kimjaehyun.co.kr/cloud/AWS-Basic/" rel="alternate" type="text/html" title="[AWS] 기초 개념" /><published>2022-05-27T00:00:00-05:00</published><updated>2022-05-27T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/cloud/AWS-Basic</id><content type="html" xml:base="https://kimjaehyun.co.kr/cloud/AWS-Basic/"><![CDATA[<p>AWS 에서 정의된 클라우드 컴퓨팅 내용  <br />
<code class="language-plaintext highlighter-rouge">클라우드 컴퓨팅은 IT 리소스를 인터넷을 통해서 온디맨드(수요에 반응함)로 제공하고 사용한 만큼만 비용을 지불하는것을 말합니다.</code>
쉽게 서버 자원이 필요할때 빌려 쓸수 있는 환경 정도로 이해….  <br />
Amazon.com에서 시작해서 2006년 S3/EC2를 출시하며 시작함.</p>

<h2 id="클라우드-컴퓨팅-모델">클라우드 컴퓨팅 모델</h2>
<ul>
  <li>IaaS : Infrastructure as a Service</li>
  <li>PaaS : Platform as a Service</li>
  <li>SaaS : Software as a Service</li>
</ul>

<table>
  <thead>
    <tr>
      <th>제공범위</th>
      <th style="text-align: center">IaaS</th>
      <th style="text-align: center">PaaS</th>
      <th style="text-align: center">SaaS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>APP</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>런타임</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>OS</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>H/W</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>스토리지</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>네트워킹</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
  </tbody>
</table>

<h2 id="scale-up-scale-down">Scale-Up, Scale-Down</h2>
<p>Scale-Up, Scale-Down 은 Cloud 장치를 Spec을 올리거나 낮추는 의미로 사용됩니다.  <br />
예를들면 CPU, 메모리 등의 성능을 늘리는 것을 Scale-Up이라고 부르며, 낮추는 것을 Scale-Down 이라고 합니다.</p>

<h2 id="scale-in-scale-out">Scale-In, Scale-Out</h2>
<p>Scale-In, Scale-Out 은 클라우드 서비스 인스턴스 수를 병렬적으로 늘리거나 줄이는 것을 의미 합니다. 
1개의 인스턴스를 N개로 증설시키는 것을 Scale-Out이라고 하며, 반대로 줄이는 것을 Scale-In 이라고 합니다.</p>

<h2 id="클라우드-배포-모델">클라우드 배포 모델</h2>
<ul>
  <li>올인 클라우드</li>
  <li>하이브리드 클라우드</li>
  <li>온프레미스, 프라이빗 클라우드</li>
</ul>

<h2 id="aws-구조">AWS 구조</h2>
<ul>
  <li>AWS 여러 서비스
    <ul>
      <li>리전 Region(북미, 남미, 유럽, 서울, 도쿄 등등…)
        <ul>
          <li>가용영역 AZ(Availability Zone)
            <ul>
              <li>하나의 AZ는 여섯개의 데이터 센터로 구성됨.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>AWS는 기존의 AZ외 사용자는 많지만, 리전이 없는 지역에 로컬존(Local Zone)이 존재하는 경우도 있음.</li>
  <li>엣지 로케이션 또는 POP(Points Of Presence)로 부르는 접속 지점의 경우도 있음.</li>
  <li>리전별 서비스가 다를수 있음.</li>
  <li>미국 동부(버지니아 북부)리전 us-east-1 은 최초 출시된 리전으로 모든 서비스가 최초로 출시적용됨.</li>
  <li>하나의 리전은 2개 이상의 가용역역으로 구성</li>
  <li>모든 AZ는 100km 이내의 거리에 위치(재해 대비)</li>
  <li>리전간에는 일정 이상의 거리 이상 떨어져 있음(재해 대비)</li>
</ul>

<h2 id="aws-의-보인-인증검증-내역">AWS 의 보인 인증/검증 내역</h2>
<p>다양한 종류와 다양한 국가의 인증을 준수하고 있습니다.  <br />
자세한 내용은 아래 링크에서 확인 가능합니다.</p>

<p><a href="https://aws.amazon.com/ko/compliance/programs/" target="_blank">AWS 클라우드 보안</a></p>

<ul>
  <li>C5</li>
  <li>CMMC</li>
  <li>Cyber Essentials Plus</li>
  <li>DoD SRG</li>
  <li>ENS 상위</li>
  <li>FedRAMP</li>
  <li>FINMA</li>
  <li>FIPS</li>
  <li>GSMA</li>
  <li>HDS</li>
  <li>IRAP</li>
  <li>ISMAP</li>
  <li>ISO 9001</li>
  <li>ISO 27001</li>
  <li>ISO 27017</li>
  <li>ISO 27018</li>
  <li>K-ISMS</li>
  <li>MTCS 티어 3</li>
  <li>OSPAR</li>
  <li>PCI DSS 레벨 1</li>
  <li>SOC 1</li>
  <li>SOC 2</li>
  <li>SOC 3</li>
  <li>TISAX</li>
</ul>

<h2 id="aws-서비스-제공-지역에-따른-분류">AWS 서비스 제공 지역에 따른 분류</h2>
<h3 id="글로벌-서비스">글로벌 서비스</h3>
<p>글로벌이 단일 서비스로 묶이는 경우</p>
<ul>
  <li>CloudFront</li>
  <li>IAM</li>
  <li>Route53</li>
  <li>WAF</li>
</ul>

<h3 id="지역-서비스">지역 서비스</h3>
<p>특정 리전을 기반으로 서비스 제공</p>
<ul>
  <li>S3 (데이터는 리전에 종속됨)</li>
</ul>

<h2 id="arn-amazon-resource-name">ARN (Amazon Resource Name)</h2>
<p>아마존 리소스에 고유 이름으로 text형식으로 표현됨.  <br />
<a href="https://docs.aws.amazon.com/ko_kr/quicksight/latest/APIReference/qs-arn-format.html" target="_blank">ARN 형식</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arn</span><span class="p">:</span><span class="nx">partition</span><span class="p">:</span><span class="nx">service</span><span class="p">:</span><span class="nx">region</span><span class="p">:</span><span class="nx">account</span><span class="o">-</span><span class="nx">id</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">arn</span><span class="p">:</span><span class="nx">partition</span><span class="p">:</span><span class="nx">service</span><span class="p">:</span><span class="nx">region</span><span class="p">:</span><span class="nx">account</span><span class="o">-</span><span class="nx">id</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">type</span><span class="o">/</span><span class="nx">resource</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">arn</span><span class="p">:</span><span class="nx">partition</span><span class="p">:</span><span class="nx">service</span><span class="p">:</span><span class="nx">region</span><span class="p">:</span><span class="nx">account</span><span class="o">-</span><span class="nx">id</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">type</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">id</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">partition</code> — 리소스가 있는 파티션입니다.  <br />
<code class="language-plaintext highlighter-rouge">service</code> — AWS 제품을 식별하는 서비스 네임스페이스입니다.   <br />
<code class="language-plaintext highlighter-rouge">region</code> — 리소스가 상주하는 AWS 리전입니다.  <br />
<code class="language-plaintext highlighter-rouge">account-id</code> — 리소스를 소유하는 AWS 계정의 ID입니다.(예: 123456789012).   <br />
<code class="language-plaintext highlighter-rouge">resource</code> 또는 <code class="language-plaintext highlighter-rouge">resource-typeARN</code> 이 부분의 내용은 서비스별로 다릅니다.
<code class="language-plaintext highlighter-rouge">*</code> - 와일드 카드를 통해 다수 적용 가능합니다.</p>]]></content><author><name>devjaedol</name></author><category term="cloud" /><category term="AWS" /><category term="Cloud" /><category term="IasS" /><category term="PaaS" /><category term="SaaS" /><category term="Region" /><category term="AZ" /><category term="ARN" /><summary type="html"><![CDATA[AWS 에서 정의된 클라우드 컴퓨팅 내용 클라우드 컴퓨팅은 IT 리소스를 인터넷을 통해서 온디맨드(수요에 반응함)로 제공하고 사용한 만큼만 비용을 지불하는것을 말합니다. 쉽게 서버 자원이 필요할때 빌려 쓸수 있는 환경 정도로 이해…. Amazon.com에서 시작해서 2006년 S3/EC2를 출시하며 시작함.]]></summary></entry></feed>