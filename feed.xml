<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://kimjaehyun.co.kr/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kimjaehyun.co.kr/" rel="alternate" type="text/html" /><updated>2023-03-01T06:45:22-06:00</updated><id>https://kimjaehyun.co.kr/feed.xml</id><title type="html">꿰보노트</title><subtitle>프로그래밍과 소프트웨어 정보 및 클라우드 개발에 대한 정보를 공유하는 블로그 입니다. 꿰보노트 / 꿰보Note / 꿰어야 보배</subtitle><author><name>devjaedol</name></author><entry><title type="html">NPM (node package manager)</title><link href="https://kimjaehyun.co.kr/nodejs/npm/" rel="alternate" type="text/html" title="NPM (node package manager)" /><published>2023-03-01T00:00:00-06:00</published><updated>2023-03-01T00:00:00-06:00</updated><id>https://kimjaehyun.co.kr/nodejs/npm</id><content type="html" xml:base="https://kimjaehyun.co.kr/nodejs/npm/"><![CDATA[<p>Node.js는 JavaScript로 서버측 애플리케이션을 작성하는 데 사용되는 JavaScript 런타임입니다. Node.js는 다양한 패키지와 모듈을 제공하며 이러한 패키지와 모듈을 관리하기 위해 npm(Node Package Manager)이 제공됩니다.</p>

<p>npm은 Node.js의 공식 패키지 관리자입니다. 개발자는 npm을 사용하여 Node.js 패키지 및 모듈을 설치, 업데이트, 삭제 및 관리할 수 있습니다. 이러한 패키지와 모듈을 사용하면 프로젝트를 더 쉽고 빠르게 빌드할 수 있습니다.</p>

<p>개발자는 npm을 사용하여 다른 사람이 작성한 패키지와 모듈도 쉽게 사용할 수 있습니다. npm 레지스트리에서 원하는 패키지나 모듈을 검색하고 설치한 다음 프로젝트에 포함하기만 하면 됩니다. 또한 npm은 코드 공유를 위한 플랫폼으로 사용됩니다. 개발자는 코드를 npm에 업로드하여 다른 사람이 사용할 수 있도록 할 수 있습니다.</p>

<p>npm은 Node.js와 함께 설치되며 명령줄 인터페이스를 통해 액세스할 수 있습니다. npm이 제공하는 사용 편의성 덕분에 Node.js 개발자는 거의 보편적으로 npm을 사용하여 패키지와 모듈을 관리합니다.</p>

<h1 id="npm-명령어">NPM 명령어</h1>
<p>npm 에는 다양한 명령어가 존재 합니다. 자주 사용되는 명령어를 정리해 봅시다.  <br />
<a href="https://docs.npmjs.com/cli/v9/commands" target="_blank">NPM CLI Commands</a></p>

<h2 id="초기화패키지-설치-관련">초기화/패키지 설치 관련</h2>

<h3 id="npm--v">npm -v</h3>
<p>npm 의 버전을 표시합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">packageName</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="o">-</span><span class="nx">v</span>
<span class="mf">6.14</span><span class="p">.</span><span class="mi">6</span>
</code></pre></div></div>
<h3 id="npm-config">npm config</h3>
<p>npm의 설정을 표시 또는 설정 할 수 있습니다.  <br />
<code class="language-plaintext highlighter-rouge">npm set</code>, <code class="language-plaintext highlighter-rouge">npm get</code> 을 통해서 설정 및 조회가 가능합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">config</span> <span class="nx">list</span>

<span class="nx">metrics</span><span class="o">-</span><span class="nx">registry</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">https://registry.npmjs.org/</span><span class="dl">"</span>
<span class="nx">scope</span> <span class="o">=</span> <span class="dl">""</span>
<span class="nx">user</span><span class="o">-</span><span class="nx">agent</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">npm/6.14.6 node/v12.18.2 win32 x64</span><span class="dl">"</span>

<span class="p">;</span> <span class="nx">builtin</span> <span class="nx">config</span> <span class="kc">undefined</span>
<span class="nx">prefix</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">C:</span><span class="se">\\</span><span class="s2">Users</span><span class="se">\\</span><span class="s2">Admin</span><span class="se">\\</span><span class="s2">AppData</span><span class="se">\\</span><span class="s2">Roaming</span><span class="se">\\</span><span class="s2">npm</span><span class="dl">"</span>

<span class="p">;</span> <span class="nx">node</span> <span class="nx">bin</span> <span class="nx">location</span> <span class="o">=</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">nodejs</span><span class="err">\</span><span class="nx">node</span><span class="p">.</span><span class="nx">exe</span>
<span class="p">;</span> <span class="nx">cwd</span> <span class="o">=</span> <span class="nx">D</span><span class="p">:</span><span class="err">\</span><span class="nx">패키지</span> <span class="nx">위치</span>
<span class="p">;</span> <span class="nx">HOME</span> <span class="o">=</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Admin</span>
<span class="p">;</span> <span class="dl">"</span><span class="s2">npm config ls -l</span><span class="dl">"</span> <span class="nx">to</span> <span class="nx">show</span> <span class="nx">all</span> <span class="nx">defaults</span><span class="p">.</span>


<span class="nx">D</span><span class="p">:</span><span class="err">\</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="kd">get</span> <span class="nx">prefix</span>
<span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">Users</span><span class="err">\</span><span class="nx">Admin</span><span class="err">\</span><span class="nx">AppData</span><span class="err">\</span><span class="nx">Roaming</span><span class="err">\</span><span class="nx">npm</span>

</code></pre></div></div>

<h3 id="npm-init">npm init</h3>
<p><code class="language-plaintext highlighter-rouge">package.json</code> 생성 합니다.  <br />
프로젝트 패키지를 생성 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">init</span> <span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">spec</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">same</span> <span class="k">as</span> <span class="s2">`npx &lt;package-spec&gt;`</span><span class="p">)</span>
<span class="nx">npm</span> <span class="nx">init</span> <span class="o">&lt;</span><span class="p">@</span><span class="nd">scope</span><span class="o">&gt;</span> <span class="p">(</span><span class="nx">same</span> <span class="k">as</span> <span class="s2">`npx &lt;@scope&gt;/create`</span><span class="p">)</span>

<span class="nx">aliases</span><span class="p">:</span> <span class="nx">create</span><span class="p">,</span> <span class="nx">innit</span>


<span class="o">&gt;</span> <span class="nx">npm</span> <span class="nx">init</span>
<span class="nx">This</span> <span class="nx">utility</span> <span class="nx">will</span> <span class="nx">walk</span> <span class="nx">you</span> <span class="nx">through</span> <span class="nx">creating</span> <span class="nx">a</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">file</span><span class="p">.</span>        
<span class="nx">It</span> <span class="nx">only</span> <span class="nx">covers</span> <span class="nx">the</span> <span class="nx">most</span> <span class="nx">common</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">and</span> <span class="nx">tries</span> <span class="nx">to</span> <span class="nx">guess</span> <span class="nx">sensible</span> <span class="nx">defaults</span><span class="p">.</span>

<span class="nx">See</span> <span class="s2">`npm help init`</span> <span class="k">for</span> <span class="nx">definitive</span> <span class="nx">documentation</span> <span class="nx">on</span> <span class="nx">these</span> <span class="nx">fields</span>        
<span class="nx">and</span> <span class="nx">exactly</span> <span class="nx">what</span> <span class="nx">they</span> <span class="k">do</span><span class="p">.</span>

<span class="nx">Use</span> <span class="s2">`npm install &lt;pkg&gt;`</span> <span class="nx">afterwards</span> <span class="nx">to</span> <span class="nx">install</span> <span class="nx">a</span> <span class="kr">package</span> <span class="nx">and</span>
<span class="nx">save</span> <span class="nx">it</span> <span class="k">as</span> <span class="nx">a</span> <span class="nx">dependency</span> <span class="k">in</span> <span class="nx">the</span> <span class="kr">package</span><span class="p">.</span><span class="nx">json</span> <span class="nx">file</span><span class="p">.</span>

<span class="nx">Press</span> <span class="o">^</span><span class="nx">C</span> <span class="nx">at</span> <span class="nx">any</span> <span class="nx">time</span> <span class="nx">to</span> <span class="nx">quit</span><span class="p">.</span>
<span class="kr">package</span> <span class="nx">name</span><span class="p">:</span> <span class="p">(</span><span class="nx">폴더명</span><span class="p">)</span>
<span class="nx">version</span><span class="p">:</span> <span class="p">(</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="p">)</span>
<span class="nx">description</span><span class="p">:</span>
<span class="nx">entry</span> <span class="nx">point</span><span class="p">:</span> <span class="p">(</span><span class="nx">index</span><span class="p">.</span><span class="nx">js</span><span class="p">)</span>
<span class="nx">test</span> <span class="nx">command</span><span class="p">:</span>
<span class="nx">git</span> <span class="nx">repository</span><span class="p">:</span>
<span class="nx">keywords</span><span class="p">:</span>
<span class="nx">author</span><span class="p">:</span>
<span class="nx">license</span><span class="p">:</span> <span class="p">(</span><span class="nx">ISC</span><span class="p">)</span>
<span class="nx">About</span> <span class="nx">to</span> <span class="nx">write</span> <span class="nx">to</span> <span class="nx">D</span><span class="p">:</span><span class="err">\</span><span class="nx">DEV</span><span class="o">-</span><span class="nx">Source</span><span class="err">\</span><span class="nx">tech_npm</span><span class="err">\</span><span class="kr">package</span><span class="p">.</span><span class="nx">json</span><span class="p">:</span>

<span class="p">{</span>
  <span class="dl">"</span><span class="s2">name</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">폴더명</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">1.0.0</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">description</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">main</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">index.js</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="dl">"</span><span class="s2">author</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">license</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ISC</span><span class="dl">"</span>
<span class="p">}</span>
<span class="nx">Is</span> <span class="k">this</span> <span class="nx">OK</span><span class="p">?</span> <span class="p">(</span><span class="nx">yes</span><span class="p">)</span>

</code></pre></div></div>

<h3 id="npm-install">npm install</h3>
<p><code class="language-plaintext highlighter-rouge">npm install 패키지명</code> 으로 패키지를 설치 합니다.  <br />
<code class="language-plaintext highlighter-rouge">--save or -S : dependencies</code>에 추가  <br />
<code class="language-plaintext highlighter-rouge">--save-dev or -D : devDependencies</code>에 추가  <br />
<code class="language-plaintext highlighter-rouge">-g : global</code> 패키지에 추가</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="p">[</span><span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">spec</span><span class="o">&gt;</span> <span class="p">...]</span>

<span class="nx">aliases</span><span class="p">:</span> <span class="nx">add</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="k">in</span><span class="p">,</span> <span class="nx">ins</span><span class="p">,</span> <span class="nx">inst</span><span class="p">,</span> <span class="nx">insta</span><span class="p">,</span> <span class="nx">instal</span><span class="p">,</span> <span class="nx">isnt</span><span class="p">,</span> <span class="nx">isnta</span><span class="p">,</span> <span class="nx">isntal</span><span class="p">,</span> <span class="nx">isntall</span>


<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">sax</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">githubname</span><span class="o">/</span><span class="nx">reponame</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="p">@</span><span class="nd">myorg</span><span class="sr">/privatepackag</span><span class="err">e
</span><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">node</span><span class="o">-</span><span class="nx">tap</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">dtrace</span><span class="o">-</span><span class="nx">provider</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">optional</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">readable</span><span class="o">-</span><span class="nx">stream</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">exact</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">ansi</span><span class="o">-</span><span class="nx">regex</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">bundle</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="dl">"</span><span class="s2">패키지명</span><span class="dl">"</span><span class="p">@</span><span class="nd">0</span><span class="p">.</span><span class="mf">0.1</span>       <span class="c1">//패키지 특정 @버전 설치      </span>

</code></pre></div></div>

<h3 id="npm-uninstall">npm uninstall</h3>
<p><code class="language-plaintext highlighter-rouge">npm uninstall 패키지명</code> 으로 패키지를 제거/삭제 합니다.  <br />
<code class="language-plaintext highlighter-rouge">--save or -S : dependencies</code>에 추가  <br />
<code class="language-plaintext highlighter-rouge">--save-dev or -D : devDependencies</code>에 추가  <br />
<code class="language-plaintext highlighter-rouge">-g : global</code> 패키지에 추가</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">uninstall</span> <span class="p">[</span><span class="o">&lt;</span><span class="p">@</span><span class="nd">scope</span><span class="o">&gt;</span><span class="sr">/]&lt;pkg&gt;..</span><span class="err">.
</span>
<span class="nx">aliases</span><span class="p">:</span> <span class="nx">unlink</span><span class="p">,</span> <span class="nx">remove</span><span class="p">,</span> <span class="nx">rm</span><span class="p">,</span> <span class="nx">r</span><span class="p">,</span> <span class="nx">un</span>


<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">sax</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">githubname</span><span class="o">/</span><span class="nx">reponame</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="p">@</span><span class="nd">myorg</span><span class="sr">/privatepackag</span><span class="err">e
</span><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">node</span><span class="o">-</span><span class="nx">tap</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">dev</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">dtrace</span><span class="o">-</span><span class="nx">provider</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">optional</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">readable</span><span class="o">-</span><span class="nx">stream</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">exact</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="nx">ansi</span><span class="o">-</span><span class="nx">regex</span> <span class="o">--</span><span class="nx">save</span><span class="o">-</span><span class="nx">bundle</span>

</code></pre></div></div>

<h3 id="npm-update">npm update</h3>
<p>설치한 패키지를 업데이트하는 명령어입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">update</span> <span class="p">[</span><span class="o">&lt;</span><span class="nx">pkg</span><span class="o">&gt;</span><span class="p">...]</span>

<span class="nx">aliases</span><span class="p">:</span> <span class="nx">up</span><span class="p">,</span> <span class="nx">upgrade</span><span class="p">,</span> <span class="nx">udpate</span>
</code></pre></div></div>

<h2 id="관련-정보-조회">관련 정보 조회</h2>

<h3 id="npm-root">npm root</h3>
<p>패키지 설치 경로인 <code class="language-plaintext highlighter-rouge">node_modules</code> 의 위치를 출력 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">test_npm</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">root</span>
<span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">test_npm</span><span class="err">\</span><span class="nx">node_modules</span>
</code></pre></div></div>

<h3 id="npm-outdated">npm outdated</h3>
<p>설치된 패키지의 현재 버전과 패키지의 최신 버전 등 패키지 버전에 대한 정보를 확인 할 수 있습니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">outdated</span> <span class="p">[</span><span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">spec</span><span class="o">&gt;</span> <span class="p">...]</span>

<span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">packageName</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">outdated</span>
<span class="nx">Package</span>                        <span class="nx">Current</span>       <span class="nx">Wanted</span>          <span class="nx">Latest</span>  <span class="nx">Location</span>
<span class="nx">axios</span>                           <span class="mf">0.19</span><span class="p">.</span><span class="mi">2</span>       <span class="mf">0.19</span><span class="p">.</span><span class="mi">2</span>           <span class="mf">1.3</span><span class="p">.</span><span class="mi">4</span>  <span class="nx">packageName</span>
<span class="nx">body</span><span class="o">-</span><span class="nx">parser</span>                     <span class="mf">1.19</span><span class="p">.</span><span class="mi">0</span>       <span class="mf">1.20</span><span class="p">.</span><span class="mi">2</span>          <span class="mf">1.20</span><span class="p">.</span><span class="mi">2</span>  <span class="nx">packageName</span>
<span class="nx">cheerio</span>                     <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="nx">rc</span><span class="p">.</span><span class="mi">3</span>  <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="nx">rc</span><span class="p">.</span><span class="mi">12</span>     <span class="mf">1.0</span><span class="p">.</span><span class="mi">0</span><span class="o">-</span><span class="nx">rc</span><span class="p">.</span><span class="mi">12</span>  <span class="nx">packageName</span>
<span class="nx">cookie</span><span class="o">-</span><span class="nx">parser</span>                    <span class="mf">1.4</span><span class="p">.</span><span class="mi">5</span>        <span class="mf">1.4</span><span class="p">.</span><span class="mi">6</span>           <span class="mf">1.4</span><span class="p">.</span><span class="mi">6</span>  <span class="nx">packageName</span>
<span class="nx">ejs</span>                              <span class="mf">3.0</span><span class="p">.</span><span class="mi">2</span>        <span class="mf">3.1</span><span class="p">.</span><span class="mi">8</span>           <span class="mf">3.1</span><span class="p">.</span><span class="mi">8</span>  <span class="nx">packageName</span>
<span class="nx">express</span>                         <span class="mf">4.17</span><span class="p">.</span><span class="mi">1</span>       <span class="mf">4.18</span><span class="p">.</span><span class="mi">2</span>          <span class="mf">4.18</span><span class="p">.</span><span class="mi">2</span>  <span class="nx">packageName</span>
<span class="nx">express</span><span class="o">-</span><span class="nx">mysql</span><span class="o">-</span><span class="nx">session</span>            <span class="mf">2.1</span><span class="p">.</span><span class="mi">4</span>        <span class="mf">2.1</span><span class="p">.</span><span class="mi">8</span>           <span class="mf">2.1</span><span class="p">.</span><span class="mi">8</span>  <span class="nx">packageName</span>
<span class="nx">express</span><span class="o">-</span><span class="nx">session</span>                 <span class="mf">1.17</span><span class="p">.</span><span class="mi">1</span>       <span class="mf">1.17</span><span class="p">.</span><span class="mi">3</span>          <span class="mf">1.17</span><span class="p">.</span><span class="mi">3</span>  <span class="nx">packageName</span>
<span class="nx">http</span>                             <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span>        <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span>  <span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span><span class="o">-</span><span class="nx">security</span>  <span class="nx">packageName</span>
<span class="nx">lodash</span>                         <span class="mf">4.17</span><span class="p">.</span><span class="mi">15</span>      <span class="mf">4.17</span><span class="p">.</span><span class="mi">21</span>         <span class="mf">4.17</span><span class="p">.</span><span class="mi">21</span>  <span class="nx">packageName</span>
<span class="nx">moment</span>                          <span class="mf">2.24</span><span class="p">.</span><span class="mi">0</span>       <span class="mf">2.29</span><span class="p">.</span><span class="mi">4</span>          <span class="mf">2.29</span><span class="p">.</span><span class="mi">4</span>  <span class="nx">packageName</span>
<span class="nx">express</span><span class="o">-</span><span class="nx">mysql</span><span class="o">-</span><span class="nx">session</span>            <span class="mf">2.1</span><span class="p">.</span><span class="mi">4</span>        <span class="mf">2.1</span><span class="p">.</span><span class="mi">8</span>           <span class="mf">2.1</span><span class="p">.</span><span class="mi">8</span>  <span class="nx">packageName</span>
<span class="nx">express</span><span class="o">-</span><span class="nx">session</span>                 <span class="mf">1.17</span><span class="p">.</span><span class="mi">1</span>       <span class="mf">1.17</span><span class="p">.</span><span class="mi">3</span>          <span class="mf">1.17</span><span class="p">.</span><span class="mi">3</span>  <span class="nx">packageName</span>
<span class="nx">http</span>                             <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span>        <span class="mf">0.0</span><span class="p">.</span><span class="mi">0</span>  <span class="mf">0.0</span><span class="p">.</span><span class="mi">1</span><span class="o">-</span><span class="nx">security</span>  <span class="nx">packageName</span>
<span class="nx">lodash</span>                         <span class="mf">4.17</span><span class="p">.</span><span class="mi">15</span>      <span class="mf">4.17</span><span class="p">.</span><span class="mi">21</span>         <span class="mf">4.17</span><span class="p">.</span><span class="mi">21</span>  <span class="nx">packageName</span>
<span class="nx">moment</span>                          <span class="mf">2.24</span><span class="p">.</span><span class="mi">0</span>       <span class="mf">2.29</span><span class="p">.</span><span class="mi">4</span>          <span class="mf">2.29</span><span class="p">.</span><span class="mi">4</span>  <span class="nx">packageName</span>
<span class="nx">node</span><span class="o">-</span><span class="nx">cron</span>                        <span class="mf">2.0</span><span class="p">.</span><span class="mi">3</span>        <span class="mf">2.0</span><span class="p">.</span><span class="mi">3</span>           <span class="mf">3.0</span><span class="p">.</span><span class="mi">2</span>  <span class="nx">packageName</span>
<span class="nx">node</span><span class="o">-</span><span class="nx">html</span><span class="o">-</span><span class="nx">to</span><span class="o">-</span><span class="nx">image</span>               <span class="mf">2.1</span><span class="p">.</span><span class="mi">1</span>        <span class="mf">2.1</span><span class="p">.</span><span class="mi">1</span>           <span class="mf">3.3</span><span class="p">.</span><span class="mi">0</span>  <span class="nx">packageName</span>
<span class="nx">nodemailer</span>                       <span class="mf">6.4</span><span class="p">.</span><span class="mi">6</span>        <span class="mf">6.9</span><span class="p">.</span><span class="mi">1</span>           <span class="mf">6.9</span><span class="p">.</span><span class="mi">1</span>  <span class="nx">packageName</span>
<span class="nx">passport</span>                         <span class="mf">0.4</span><span class="p">.</span><span class="mi">1</span>        <span class="mf">0.4</span><span class="p">.</span><span class="mi">1</span>           <span class="mf">0.6</span><span class="p">.</span><span class="mi">0</span>  <span class="nx">packageName</span>
<span class="nx">puppeteer</span>                        <span class="mf">3.0</span><span class="p">.</span><span class="mi">2</span>        <span class="mf">3.3</span><span class="p">.</span><span class="mi">0</span>          <span class="mf">19.7</span><span class="p">.</span><span class="mi">2</span>  <span class="nx">packageName</span>
<span class="nx">querystring</span>                      <span class="mf">0.2</span><span class="p">.</span><span class="mi">0</span>        <span class="mf">0.2</span><span class="p">.</span><span class="mi">1</span>           <span class="mf">0.2</span><span class="p">.</span><span class="mi">1</span>  <span class="nx">packageName</span>
<span class="nx">randomstring</span>                     <span class="mf">1.1</span><span class="p">.</span><span class="mi">5</span>        <span class="mf">1.2</span><span class="p">.</span><span class="mi">3</span>           <span class="mf">1.2</span><span class="p">.</span><span class="mi">3</span>  <span class="nx">packageName</span>
<span class="nx">serve</span><span class="o">-</span><span class="kd">static</span>                    <span class="mf">1.14</span><span class="p">.</span><span class="mi">1</span>       <span class="mf">1.15</span><span class="p">.</span><span class="mi">0</span>          <span class="mf">1.15</span><span class="p">.</span><span class="mi">0</span>  <span class="nx">packageName</span>
<span class="nx">sharp</span>                           <span class="mf">0.25</span><span class="p">.</span><span class="mi">2</span>       <span class="mf">0.25</span><span class="p">.</span><span class="mi">4</span>          <span class="mf">0.31</span><span class="p">.</span><span class="mi">3</span>  <span class="nx">packageName</span>
<span class="nx">url</span><span class="o">-</span><span class="nx">search</span><span class="o">-</span><span class="nx">params</span><span class="o">-</span><span class="nx">polyfill</span>       <span class="mf">8.1</span><span class="p">.</span><span class="mi">0</span>        <span class="mf">8.1</span><span class="p">.</span><span class="mi">1</span>           <span class="mf">8.1</span><span class="p">.</span><span class="mi">1</span>  <span class="nx">packageName</span>

</code></pre></div></div>

<h3 id="npm-ls-npm-list">npm ls, npm list</h3>
<p>패키지 정보를 조회 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">ls</span> <span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">spec</span><span class="o">&gt;</span>

<span class="nx">alias</span><span class="p">:</span> <span class="nx">list</span>

<span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">packageName</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">ls</span> <span class="nx">express</span>
<span class="nx">packageName</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">0.0</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">packageName</span>
<span class="s2">`-- express@4.17.1
</span></code></pre></div></div>
<p>패키지명 없이 조회시 설치된 전체 리스트가 조회 됩니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">packageName</span><span class="o">&gt;</span><span class="nx">npm</span> <span class="nx">ls</span>
<span class="nx">packageName</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">0.0</span> <span class="nx">C</span><span class="p">:</span><span class="err">\</span><span class="nx">packageName</span><span class="o">&gt;</span>
<span class="o">+--</span> <span class="nx">axios</span><span class="p">@</span><span class="nd">0</span><span class="p">.</span><span class="mf">19.2</span>
<span class="o">|</span> <span class="s2">`-- follow-redirects@1.5.10
|   `</span><span class="o">--</span> <span class="nx">debug</span><span class="p">@</span><span class="nd">3</span><span class="p">.</span><span class="mf">1.0</span>
<span class="o">|</span>     <span class="s2">`-- ms@2.0.0 deduped
+-- body-parser@1.19.0
| +-- bytes@3.1.0
| +-- content-type@1.0.4
| +-- debug@2.6.9
| | `</span><span class="o">--</span> <span class="nx">ms</span><span class="p">@</span><span class="nd">2</span><span class="p">.</span><span class="mf">0.0</span>
<span class="o">|</span> <span class="o">+--</span> <span class="nx">depd</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">1.2</span>
<span class="o">|</span> <span class="o">+--</span> <span class="nx">http</span><span class="o">-</span><span class="nx">errors</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">7.2</span>
<span class="o">|</span> <span class="o">|</span> <span class="o">+--</span> <span class="nx">depd</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">1.2</span> <span class="nx">deduped</span>
<span class="o">|</span> <span class="o">|</span> <span class="o">+--</span> <span class="nx">inherits</span><span class="p">@</span><span class="nd">2</span><span class="p">.</span><span class="mf">0.3</span>
<span class="o">|</span> <span class="o">|</span> <span class="o">+--</span> <span class="nx">setprototypeof</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">1.1</span> <span class="nx">deduped</span>
<span class="o">|</span> <span class="o">|</span> <span class="o">+--</span> <span class="nx">statuses</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">5.0</span> <span class="nx">deduped</span>
<span class="o">|</span> <span class="o">|</span> <span class="s2">`-- toidentifier@1.0.0
| +-- iconv-lite@0.4.24
| | `</span><span class="o">--</span> <span class="nx">safer</span><span class="o">-</span><span class="nx">buffer</span><span class="p">@</span><span class="nd">2</span><span class="p">.</span><span class="mf">1.2</span>
<span class="o">|</span> <span class="o">+--</span> <span class="nx">on</span><span class="o">-</span><span class="nx">finished</span><span class="p">@</span><span class="nd">2</span><span class="p">.</span><span class="mf">3.0</span>
<span class="o">|</span> <span class="o">|</span> <span class="s2">`-- ee-first@1.1.1
| +-- qs@6.7.0
| +-- raw-body@2.4.0
| | +-- bytes@3.1.0 deduped
| | +-- http-errors@1.7.2 deduped
| | +-- iconv-lite@0.4.24 deduped
| | `</span><span class="o">--</span> <span class="nx">unpipe</span><span class="p">@</span><span class="nd">1</span><span class="p">.</span><span class="mf">0.0</span>
<span class="o">|</span> <span class="s2">`-- type-is@1.6.18
|   +-- media-typer@0.3.0
|   `</span><span class="o">--</span> <span class="nx">mime</span><span class="o">-</span><span class="nx">types</span><span class="p">@</span><span class="nd">2</span><span class="p">.</span><span class="mf">1.26</span> <span class="nx">deduped</span>
</code></pre></div></div>

<p>` npm list -g –depth=0` 옵션을 추가해서 출력 표시 depth 선택 및 전역 범위 등을 선택 할 수 있습니다.</p>

<h2 id="프로젝트-실행">프로젝트 실행</h2>

<h3 id="npm-start-stop-test">npm start, stop, test</h3>
<p><code class="language-plaintext highlighter-rouge">package.json</code> 내의 scripts 영역의 명령을 실행 합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">start</span> <span class="p">[</span><span class="o">--</span> <span class="o">&lt;</span><span class="nx">args</span><span class="o">&gt;</span><span class="p">]</span>

<span class="p">{</span>
  <span class="dl">"</span><span class="s2">scripts</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">start</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node foo.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">stop</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node bar.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">node test.js</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<h3 id="npm-restart">npm restart</h3>
<p><code class="language-plaintext highlighter-rouge">package.json</code> 내의 scripts 에 <code class="language-plaintext highlighter-rouge">restart</code> 항목이 있을 경우 실행하며, 
<code class="language-plaintext highlighter-rouge">restart</code>가 없는 경우, <code class="language-plaintext highlighter-rouge">stop</code>,<code class="language-plaintext highlighter-rouge">start</code>를 실행 합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">restart</span> <span class="p">[</span><span class="o">--</span> <span class="o">&lt;</span><span class="nx">args</span><span class="o">&gt;</span><span class="p">]</span>
</code></pre></div></div>

<h3 id="npm-run-run-script">npm run, run-script</h3>
<p><code class="language-plaintext highlighter-rouge">package.json</code> 내의 scripts 항목을 실행하는 명령어 입니다. <br />
패키징을 위한 <code class="language-plaintext highlighter-rouge">build</code> 항목을 등록 해놓고 <code class="language-plaintext highlighter-rouge">npm run build</code> 등으로 특정 script 항목을 실행 할 수 있습니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">run</span><span class="o">-</span><span class="nx">script</span> <span class="o">&lt;</span><span class="nx">command</span><span class="o">&gt;</span> <span class="p">[</span><span class="o">--</span> <span class="o">&lt;</span><span class="nx">args</span><span class="o">&gt;</span><span class="p">]</span>

<span class="nx">aliases</span><span class="p">:</span> <span class="nx">run</span><span class="p">,</span> <span class="nx">rum</span><span class="p">,</span> <span class="nx">urn</span>
</code></pre></div></div>

<h2 id="기타">기타</h2>
<h3 id="npm-cache-clean">npm cache clean</h3>
<p>npm에 설치 등에 오류가 발생될때 재설치를 위해 cache clean 등을 진행 합니다.  <br />
<code class="language-plaintext highlighter-rouge">cache</code>의 설치 위치는  <code class="language-plaintext highlighter-rouge">Windows: %LocalAppData%\npm-cache, Posix: ~/.npm</code></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">cache</span> <span class="nx">add</span> <span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">spec</span><span class="o">&gt;</span>
<span class="nx">npm</span> <span class="nx">cache</span> <span class="nx">clean</span> <span class="p">[</span><span class="o">&lt;</span><span class="nx">key</span><span class="o">&gt;</span><span class="p">]</span>
<span class="nx">npm</span> <span class="nx">cache</span> <span class="nx">ls</span> <span class="p">[</span><span class="o">&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="p">@</span><span class="o">&lt;</span><span class="nx">version</span><span class="o">&gt;</span><span class="p">]</span>
<span class="nx">npm</span> <span class="nx">cache</span> <span class="nx">verify</span>
</code></pre></div></div>

<h3 id="npm-rebuild">npm rebuild</h3>
<p><code class="language-plaintext highlighter-rouge">cache clean</code>으로 오류를 제거 후 재설치 등에 사용 합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">rebuild</span> <span class="p">[</span><span class="o">&lt;</span><span class="kr">package</span><span class="o">-</span><span class="nx">spec</span><span class="o">&gt;</span><span class="p">]</span> <span class="p">...]</span>

<span class="nx">alias</span><span class="p">:</span> <span class="nx">rb</span>
</code></pre></div></div>

<h1 id="package-버전-명시---등">package 버전 명시 ^, ~ 등</h1>
<p><code class="language-plaintext highlighter-rouge">package.json</code>에는 설치 패키지 버전을 관리하기 위한 틸드(~) 또는 캐럿(^) 등의 표시가 있습니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">1.0.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">&gt;1.1.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">&gt;=1.1.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;2.0.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">&lt;=2.1.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">~2.1.0</code></li>
</ul>

<h2 id="틸드">틸드(~)</h2>
<p>버그 패치 등에 대한 업데이트 등, 사소한 변화에 대한 버전 업데이트를 허용하는 정책 입니다. <br />
마지막 자리 내의 범위에서만 자동으로 업데이트한다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">~0.0.1 : 0.0.1 &lt;= 허용 &lt; 0.1.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">~0.1.1 : 0.1.1 &lt;= 허용 &lt; 0.2.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">~0.1 : 0.1.0 &lt;= 허용  &lt; 0.2.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">~0 : 0.0 &lt;= 허용  &lt; 1.0</code></li>
</ul>

<h2 id="캐럿">캐럿(^)</h2>
<p>Major 버전의 마지막 수준까지 업데이트를 허용한다.  <br />
동작의 하위호환성 부분에 이슈가 발생할 수 있으므로 주의가 필요합니다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">^1.0.2 : 1.0.2 &lt;= 허용 &lt;2.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">^1.0 : 1.0.0 &lt;= 허용 &lt;2.0</code></li>
  <li><code class="language-plaintext highlighter-rouge">^1 : 1.0.0 &lt;= 허용 &lt;2.0</code></li>
</ul>

<h2 id="기타-버전-설정">기타 버전 설정</h2>
<p>하기와 같이 명시적으로 버전을 명기 할 수 있습니다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">1.0.0</code>
특정 버전 이상으로 하위 버전 선을 명기 할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">&gt;1.0.0</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">package.json 예제</code></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="dl">"</span><span class="s2">dependencies</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">axios</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^0.19.2</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">body-parser</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.19.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">cheerio</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.0.0-rc.3</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">cookie-parser</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.4.4</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">cors</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^2.8.5</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">crypto</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.0.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">ejs</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^3.0.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">errorhandler</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.5.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^4.17.1</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">express-error-handler</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.1.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">express-mysql-session</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^2.1.3</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">express-session</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.17.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">0.0.1-security</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">url</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^0.11.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">url-search-params-polyfill</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^8.1.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">xml-escape</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^1.1.0</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">xml2js</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">^0.4.23</span><span class="dl">"</span>
  <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="nodejs" /><category term="NPM" /><category term="node package manager" /><summary type="html"><![CDATA[Node.js는 JavaScript로 서버측 애플리케이션을 작성하는 데 사용되는 JavaScript 런타임입니다. Node.js는 다양한 패키지와 모듈을 제공하며 이러한 패키지와 모듈을 관리하기 위해 npm(Node Package Manager)이 제공됩니다. npm은 Node.js의 공식 패키지 관리자입니다. 개발자는 npm을 사용하여 Node.js 패키지 및 모듈을 설치, 업데이트, 삭제 및 관리할 수 있습니다. 이러한 패키지와 모듈을 사용하면 프로젝트를 더 쉽고 빠르게 빌드할 수 있습니다. 개발자는 npm을 사용하여 다른 사람이 작성한 패키지와 모듈도 쉽게 사용할 수 있습니다. npm 레지스트리에서 원하는 패키지나 모듈을 검색하고 설치한 다음 프로젝트에 포함하기만 하면 됩니다. 또한 npm은 코드 공유를 위한 플랫폼으로 사용됩니다. 개발자는 코드를 npm에 업로드하여 다른 사람이 사용할 수 있도록 할 수 있습니다. npm은 Node.js와 함께 설치되며 명령줄 인터페이스를 통해 액세스할 수 있습니다. npm이 제공하는 사용 편의성 덕분에 Node.js 개발자는 거의 보편적으로 npm을 사용하여 패키지와 모듈을 관리합니다.]]></summary></entry><entry><title type="html">Javascript Promise await async</title><link href="https://kimjaehyun.co.kr/javascript/JS-Promise1/" rel="alternate" type="text/html" title="Javascript Promise await async" /><published>2023-03-01T00:00:00-06:00</published><updated>2023-03-01T00:00:00-06:00</updated><id>https://kimjaehyun.co.kr/javascript/JS-Promise1</id><content type="html" xml:base="https://kimjaehyun.co.kr/javascript/JS-Promise1/"><![CDATA[<p>Javascript 비동기 처리 방법에는 Promise, async/await, callback 등의 방법이 있습니다.   <br />
JavaScript의 비동기 처리 방식은 비차단 코드 실행을 허용하여 서로가 완료될 때까지 기다리지 않고 여러 작업을 동시에 수행할 수 있도록 합니다.   <br />
이는 callbacks, promises, async/await, and event-driven 및 이벤트 기반 프로그래밍을 사용하여 달성됩니다.</p>

<h1 id="promise">Promise</h1>
<p>Promise는 비동기 처리에 사용되는 Javascript 객체 입니다.</p>

<h2 id="promise를-관리하는-status-상태값">Promise를 관리하는 Status 상태값</h2>
<p>Promise는 3가지 상태를 가지고 있고, 각각의 개별 상태 값은 직접 접근 할 수 없습니다.</p>

<table>
  <thead>
    <tr>
      <th>Status</th>
      <th style="text-align: center">value</th>
      <th>desc</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>초기</td>
      <td style="text-align: center">pending(대기)</td>
      <td>초기 상태, 비동기 처리를 진행중인 상태</td>
    </tr>
    <tr>
      <td>resolve</td>
      <td style="text-align: center">fulfilled(이행)</td>
      <td>resolve 호출시, 처리가 완료된 의미</td>
    </tr>
    <tr>
      <td>reject</td>
      <td style="text-align: center">rejected(실패)</td>
      <td>reject 호출시, 실패 또는 오류가 발생한 상태</td>
    </tr>
  </tbody>
</table>

<p>기본 사용 형태</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 실행코드</span>
    <span class="nf">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="c1">// 성공 완료시 value와 함께 호출</span>
    <span class="nf">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="c1">//실행 실패시 error와 함께 호출</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Syntax</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Promise는 성공 또는 실패에 대한 응답을 진행해야함.</span>
    <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">Success</span><span class="dl">"</span><span class="p">);</span>
    <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fail</span><span class="dl">"</span><span class="p">));</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="then">then</h2>
<p>then 2개의 콜백 인수를 가지고 있고, Promise의 최종 처리 결과를 수신 합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span> 
        <span class="c1">// resolve 호출시</span>
    <span class="p">},</span>
    <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span> 
        <span class="c1">// reject 호출시</span>
    <span class="p">}</span>
<span class="p">);</span>

<span class="c1">// 축약</span>
<span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
  <span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">result</span><span class="p">),</span>
  <span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
<span class="p">);</span>

</code></pre></div></div>

<p>하기 코드는 3초뒤 성공을 Return하는 코드 입니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//setTimeout(() =&gt; resolve("Success"), 3000);</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fail</span><span class="dl">"</span><span class="p">))</span> <span class="p">,</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">// reject 함수는 .then의 두 번째 함수를 실행합니다.</span>
<span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
  <span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`SUCCESS : </span><span class="p">${</span><span class="nx">result</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span>
  <span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">);</span>

</code></pre></div></div>

<h2 id="catch">catch</h2>
<p><code class="language-plaintext highlighter-rouge">then(null, error)</code> 과 같이 에러를 처리하기 위한 구문으로, cathc(error) 로 축약된 기능.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fail</span><span class="dl">"</span><span class="p">))</span> <span class="p">,</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nf">catch</span><span class="p">(</span>
  <span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`catch : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>     <span class="c1">//catch : Error: Fail 출력</span>
<span class="p">);</span>

</code></pre></div></div>

<h2 id="finally">finally</h2>
<p>promise에서 실행의 성공, 실패와 무관하게 마지막에 실행됨을 보장하는 함수 입니다.<br />
데이터 조회시 로딩 바를 보이고, 숨기는 동작에 자주 활용 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">success</span><span class="dl">"</span><span class="p">),</span> <span class="mi">2000</span><span class="p">)</span>
<span class="p">})</span>
<span class="p">.</span><span class="nf">then</span><span class="p">(</span><span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`then value : </span><span class="p">${</span><span class="nx">result</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span> <span class="p">)</span>
<span class="p">.</span><span class="nf">finally</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`finally`</span><span class="p">)</span> <span class="p">);</span>

</code></pre></div></div>

<h1 id="promisethenff-vs-promisethenfcatchf">promise.then(f,f) vs promise.then(f).catch(f)</h1>
<p>promise.then(successFn, failFn) vs promise.then(successFn).catch(failFn)   <br />
<code class="language-plaintext highlighter-rouge">promise.then(성공,실패)</code>과 <code class="language-plaintext highlighter-rouge">promise.then(성공).catch(실패)</code>에 동작성을 하기 코드로 확인해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Case 1</span>
<span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">Success</span><span class="dl">"</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
  <span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`SUCCESS : </span><span class="p">${</span><span class="nx">result</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span> 
  <span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// 출력값</span>
<span class="c1">// SUCCESS : Success</span>


<span class="c1">// Case 2</span>
<span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">Success</span><span class="dl">"</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
    <span class="nx">result</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`SUCCESS : </span><span class="p">${</span><span class="nx">result</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">).</span><span class="nf">catch</span><span class="p">(</span>
    <span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// 출력값</span>
<span class="c1">// SUCCESS : Success</span>

</code></pre></div></div>
<p>Case 1, 2 모두 동일한 <code class="language-plaintext highlighter-rouge">SUCCESS : Success</code> 를 출력한다.
Case 3, 4 의 변형된 소스를 파악해보면, 성공 응답과정 내에 내부적 이슈가 발생했을때를 가정한 소스 입니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Case 3</span>
<span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">Success</span><span class="dl">"</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
  <span class="nx">result</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`SUCCESS : </span><span class="p">${</span><span class="nx">result</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span> 
    <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fail</span><span class="dl">"</span><span class="p">));</span>   <span class="c1">//처리 중간 실패를 전달    </span>
  <span class="p">},</span>
  <span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// 출력값</span>
<span class="c1">// SUCCESS : Success</span>
<span class="c1">// Uncaught (in promise) ReferenceError: reject is not defined &lt;- 소스 핸들링 범위 밖으로 에러가 발생함</span>
   

<span class="c1">// Case 4</span>
<span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">Success</span><span class="dl">"</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">promise</span><span class="p">.</span><span class="nf">then</span><span class="p">(</span>
    <span class="nx">result</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`SUCCESS : </span><span class="p">${</span><span class="nx">result</span><span class="p">}</span><span class="s2">`</span><span class="p">),</span> 
    <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Fail</span><span class="dl">"</span><span class="p">));</span>   <span class="c1">//처리 중간 실패를 전달    </span>
   <span class="p">}</span> 
<span class="p">).</span><span class="nf">catch</span><span class="p">(</span>
    <span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>
<span class="p">);</span>

<span class="c1">// 출력값</span>
<span class="c1">// SUCCESS : Success</span>
<span class="c1">// ERROR : ReferenceError: reject is not defined  &lt;- 함수를 통해서 출력됨</span>
</code></pre></div></div>

<p>Case 3, 4 의 응답은 다른 결과를 나타 냅니다.  <br />
<code class="language-plaintext highlighter-rouge">promise.then(successFn, failFn)</code> 형태의 응답은 중간 처리과정에서의 에러 처리가 <code class="language-plaintext highlighter-rouge">Uncaught</code> 처리될 수 있습니다.  <br />
완벽하게 Case를 모두 처리가 가능하면 문제가 되지 않으나, 예상하지 못하는 에러가 발생시 최악의 경우 에러발생시 소스 실행이 멈출수 있습니다.  <br />
반면 <code class="language-plaintext highlighter-rouge">promise.then(successFn).catch(failFn)</code> 방식의 실행은 에러 처리를 <code class="language-plaintext highlighter-rouge">catch(failFn)</code>에서 전담하여, 일괄 관리 할 수 있는 차이점 있습니다.</p>

<h1 id="promise-api">Promise API</h1>
<h2 id="promiseresolve">Promise.resolve()</h2>
<p>성공한 경우 호출하는 함수… 위의 예제 참조.</p>
<h2 id="promisereject">Promise.reject()</h2>
<p>실패한 경우 호출하는 함수… 위의 예제 참조.</p>

<h2 id="promiseall">Promise.all()</h2>
<p>다수의 Promise를 일괄 처리를 모두 완료하였을때 then의 핸들러 함수를 실행 할 수 있습니다.   <br />
syntax</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nf">all</span><span class="p">([...</span><span class="nx">promise</span> <span class="nx">array</span><span class="p">...]);</span>

<span class="nb">Promise</span><span class="p">.</span><span class="nf">all</span><span class="p">([</span>
  <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">),</span>
  <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">),</span>
  <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">)</span>
<span class="p">]).</span><span class="nf">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">...</span> <span class="p">);</span> 

</code></pre></div></div>

<p>사용 예제</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p1 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p2 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">2000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p3 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
  <span class="c1">//setTimeout(() =&gt; reject(new Error("p3 실패")) , 3000);</span>
<span class="p">});</span>

<span class="nb">Promise</span>
  <span class="p">.</span><span class="nf">all</span><span class="p">([</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">])</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">param</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`then(</span><span class="p">${</span><span class="nx">param</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">) : </span><span class="p">${</span><span class="nx">param</span><span class="p">}</span><span class="s2">`</span> <span class="p">)</span> <span class="p">)</span>
  <span class="p">.</span><span class="nf">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span> 

<span class="c1">// 모두 성공 반환시</span>
<span class="c1">// param 은 p1,p2,p3의 resolve 인수를 모두 배열로 반환 ['p1 성공', 'p2 성공', 'p3 성공']</span>

<span class="c1">// 한건 이상의 Fail 반환시 catch 호출</span>
<span class="c1">// catch 로직으로 진입함 ERROR : Error: p3 실패 </span>
</code></pre></div></div>

<h2 id="promiseallsettled">Promise.allSettled()</h2>
<p><code class="language-plaintext highlighter-rouge">Promise.all</code>과 달리 개별 건의 실행 결과를 받을 수 있습니다.  <br />
개별 Promise의 값, 상태 를 받아서 처리해야 될 경우 사용할 수 있습니다.</p>

<p>모두 성공한 경우 사용 예제</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p1 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p2 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">2000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p3 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
  <span class="c1">//setTimeout(() =&gt; reject(new Error("p3 실패")) , 3000);</span>
<span class="p">});</span>

<span class="nb">Promise</span>
  <span class="p">.</span><span class="nf">allSettled</span><span class="p">([</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">])</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">param</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`then(</span><span class="p">${</span><span class="nx">param</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">) : </span><span class="p">${</span><span class="nx">param</span><span class="p">}</span><span class="s2">`</span> <span class="p">);</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">param</span><span class="p">);}</span> <span class="p">)</span>
  <span class="p">.</span><span class="nf">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span> 

<span class="c1">// 응답값</span>
<span class="nf">then</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">],[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">],[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span>
<span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">[{</span><span class="err">…</span><span class="p">},</span> <span class="p">{</span><span class="err">…</span><span class="p">},</span> <span class="p">{</span><span class="err">…</span><span class="p">}]</span>
<span class="mi">0</span> <span class="p">:</span> <span class="p">{</span><span class="nl">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fulfilled</span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">p1 성공</span><span class="dl">'</span><span class="p">}</span>
<span class="mi">1</span> <span class="p">:</span> <span class="p">{</span><span class="nl">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fulfilled</span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">p2 성공</span><span class="dl">'</span><span class="p">}</span>
<span class="mi">2</span> <span class="p">:</span> <span class="p">{</span><span class="nl">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fulfilled</span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">p3 성공</span><span class="dl">'</span><span class="p">}</span>


</code></pre></div></div>

<p>일부 실패가 존재하는 경우 사용 예제, 
일부 실패 <code class="language-plaintext highlighter-rouge">reject</code>호출에도 catch로 진입하지 않고 <code class="language-plaintext highlighter-rouge">then</code>의 개별 Object 결과를 반환합니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p1 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p2 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">2000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">//setTimeout(() =&gt; resolve("p3 성공"), 3000);</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">reject</span><span class="p">(</span><span class="k">new</span> <span class="nc">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">p3 실패</span><span class="dl">"</span><span class="p">))</span> <span class="p">,</span> <span class="mi">3000</span><span class="p">);</span>
<span class="p">});</span>

<span class="nb">Promise</span>
  <span class="p">.</span><span class="nf">allSettled</span><span class="p">([</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">])</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">param</span><span class="p">)</span><span class="o">=&gt;</span> <span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`then(</span><span class="p">${</span><span class="nx">param</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">) : </span><span class="p">${</span><span class="nx">param</span><span class="p">}</span><span class="s2">`</span> <span class="p">);</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">param</span><span class="p">);}</span> <span class="p">)</span>
  <span class="p">.</span><span class="nf">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span>  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span> 

<span class="c1">// 응답값</span>
<span class="nf">then</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">:</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">],[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">],[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span>
<span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="p">[{</span><span class="err">…</span><span class="p">},</span> <span class="p">{</span><span class="err">…</span><span class="p">},</span> <span class="p">{</span><span class="err">…</span><span class="p">}]</span>
<span class="mi">0</span> <span class="p">:</span> <span class="p">{</span><span class="nl">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fulfilled</span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">p1 성공</span><span class="dl">'</span><span class="p">}</span>
<span class="mi">1</span> <span class="p">:</span> <span class="p">{</span><span class="nl">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fulfilled</span><span class="dl">'</span><span class="p">,</span> <span class="nx">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">p2 성공</span><span class="dl">'</span><span class="p">}</span>
<span class="mi">2</span> <span class="p">:</span> <span class="p">{</span><span class="nl">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">rejected</span><span class="dl">'</span><span class="p">,</span> <span class="nx">reason</span><span class="p">:</span> <span class="nb">Error</span><span class="p">:</span> <span class="nx">p3</span> <span class="nx">실패</span> <span class="nx">at</span> <span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span><span class="p">:</span><span class="mi">11</span><span class="p">:</span><span class="mi">27</span><span class="p">}</span>

</code></pre></div></div>

<h2 id="promiserace">Promise.race()</h2>
<p>resolve, reject와 관계 없이 처음 한번은 then()이 실행 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p1 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p2 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">2000</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">p3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p3 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">3000</span><span class="p">);</span>
  <span class="c1">//setTimeout(() =&gt; reject(new Error("p3 실패")) , 3000);</span>
<span class="p">});</span>

<span class="nb">Promise</span>
  <span class="p">.</span><span class="nf">race</span><span class="p">([</span><span class="nx">p1</span><span class="p">,</span> <span class="nx">p2</span><span class="p">,</span> <span class="nx">p3</span><span class="p">])</span>
  <span class="p">.</span><span class="nf">then</span><span class="p">((</span><span class="nx">param</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`then : </span><span class="p">${</span><span class="nx">param</span><span class="p">}</span><span class="s2">`</span><span class="p">))</span>
  <span class="p">.</span><span class="nf">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`ERROR : </span><span class="p">${</span><span class="nx">error</span><span class="p">}</span><span class="s2">`</span><span class="p">));</span> 

<span class="c1">// 모두 성공 반환시</span>
<span class="c1">// param 은 p1,p2,p3의 resolve 인수를 모두 배열로 반환 ['p1 성공', 'p2 성공', 'p3 성공']</span>

<span class="c1">// 한건 이상의 Fail판환시</span>
<span class="c1">// catch 로직으로 진입함 ERROR : Error: p3 실패 </span>
</code></pre></div></div>

<h1 id="async--await">async / await</h1>
<p>최근 나온 문법으로 <code class="language-plaintext highlighter-rouge">Promise</code> 사용시 발생하는 <code class="language-plaintext highlighter-rouge">Promise 지옥</code> 또는 <code class="language-plaintext highlighter-rouge">Callback 지옥</code> 을 해결할 수 있는 비동기 처리 문법 입니다.  <br />
async, await 는 함수 안에서만 동작하는 제약 사항이 있으며, await를 통해서 Promise 반환 값을 전달 받을 수 있습니다.</p>

<p>코드 가독성을 개선한 방법이 async/await이지만 동작의 큰 흐름적 방향성은 유사 합니다.
Promise는 <code class="language-plaintext highlighter-rouge">catch()</code>를 통해서 에러 처리를 지원하며, async/await 별도의 에러 처리 메소드를 제공하지 않고 일반 에러 처리 로직인 <code class="language-plaintext highlighter-rouge">try{ ... }cathc(e){ ... }</code>를 통해 지원 합니다.</p>

<p>사용 예</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//익명 함수 형태</span>
<span class="p">(</span><span class="nf">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
        <span class="c1">//setTimeout(() =&gt; reject(new Error("p 실패")) , 1000);</span>
    <span class="p">});</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">promise</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span> <span class="nf">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">})();</span>


<span class="c1">//명시적 함수 생성</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">ex</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nf">resolve</span><span class="p">(</span><span class="dl">"</span><span class="s2">p 성공</span><span class="dl">"</span><span class="p">),</span> <span class="mi">1000</span><span class="p">);</span>
        <span class="c1">//setTimeout(() =&gt; reject(new Error("p 실패")) , 1000);</span>
    <span class="p">});</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">promise</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span> <span class="nf">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="nf">ex</span><span class="p">();</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="javascript" /><category term="Promise" /><category term="await" /><category term="async" /><category term="Promise.all" /><category term="Promise.allSettled" /><category term="Promise.race" /><category term="콜백지옥" /><category term="동기화" /><summary type="html"><![CDATA[Javascript 비동기 처리 방법에는 Promise, async/await, callback 등의 방법이 있습니다. JavaScript의 비동기 처리 방식은 비차단 코드 실행을 허용하여 서로가 완료될 때까지 기다리지 않고 여러 작업을 동시에 수행할 수 있도록 합니다. 이는 callbacks, promises, async/await, and event-driven 및 이벤트 기반 프로그래밍을 사용하여 달성됩니다.]]></summary></entry><entry><title type="html">Javascript Class</title><link href="https://kimjaehyun.co.kr/javascript/JS-Class/" rel="alternate" type="text/html" title="Javascript Class" /><published>2023-02-27T00:00:00-06:00</published><updated>2023-02-27T00:00:00-06:00</updated><id>https://kimjaehyun.co.kr/javascript/JS-Class</id><content type="html" xml:base="https://kimjaehyun.co.kr/javascript/JS-Class/"><![CDATA[<p>Javascript Class 사용과 상속에 대해서 정리해 봅시다.  <br />
JavaScript에서 클래스는 유사한 특성과 동작을 공유하는 개체를 만들기 위한 청사진입니다. 고유한 속성과 메서드를 가질 수 있는 새로운 개체 유형을 정의하는 방법을 제공합니다.</p>

<p>클래스 선언 구문은 ES6에서 도입되어 개체 지향 프로그래밍 언어에서 오는 개발자에게 더 친숙한 구문을 허용합니다. . 클래스에는 인스턴스 메서드 및 정적 메서드뿐만 아니라 해당 속성의 기본값으로 객체를 초기화하는 데 사용되는 생성자가 있을 수 있습니다.</p>

<p>클래스는 상속을 사용하여 확장될 수 있으며, 여기서 하위 클래스는 속성을 상속할 수 있고 부모 클래스의 메소드. 이를 통해 코드 재사용이 가능하고 보다 체계적인 코드베이스를 만드는 데 도움이 됩니다.</p>

<h1 id="class-basic-syntax">Class Basic Syntax</h1>
<p>클래스의 기본 생성 방법</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CarClass</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">//생성자</span>
    <span class="nf">method1</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">// 메소드</span>
    <span class="nf">method2</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> <span class="c1">// 메소드</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="sample-code">Sample Code</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span> 

    <span class="nf">getMaxSpeed</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="c1">// 클래스 생성 및 호출</span>

<span class="kd">let</span> <span class="nx">mycar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="dl">'</span><span class="s1">sonata</span><span class="dl">'</span><span class="p">,</span> <span class="mi">120</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mycar</span><span class="p">.</span><span class="nf">getName</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mycar</span><span class="p">.</span><span class="nf">getMaxSpeed</span><span class="p">());</span>

</code></pre></div></div>

<h1 id="class의-타입과-instance의-타입-비교">Class의 타입과 Instance의 타입 비교</h1>
<p>위에서 생성한 Class와 Instance의 Type의 차이를 참고 하기 바랍니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">Car</span><span class="p">);</span>  <span class="c1">// 'function'  </span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">mycar</span><span class="p">);</span>  <span class="c1">// 'object'</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">Car</span> <span class="o">==</span> <span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="kd">constructor</span><span class="p">);</span>  <span class="c1">// true   </span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nf">getOwnPropertyNames</span><span class="p">(</span><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">));</span> <span class="c1">//전체 메소드 출력</span>
<span class="o">&gt;&gt;</span> <span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="err"> </span><span class="p">[</span><span class="dl">'</span><span class="s1">constructor</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">getName</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">getMaxSpeed</span><span class="dl">'</span><span class="p">]</span>

</code></pre></div></div>

<h1 id="function-형태로-class생성">Function 형태로 Class생성</h1>
<p>Class는 다음과 같은 Function, prototype 형태로도 생성 할 수 있습니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">Car</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span> 
<span class="p">}</span>

<span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getMaxSpeed</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">speed</span><span class="p">;</span> 
<span class="p">}</span>

</code></pre></div></div>

<h1 id="class-field">Class Field</h1>
<p>클래스의 필드 변수를 선언할 수 있습니다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nx">engine</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">gasoline</span><span class="dl">"</span><span class="p">;</span>

    <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span> 

    <span class="nf">getMaxSpeed</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span> 
    <span class="nf">getEngineType</span><span class="p">(){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">engine</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">mycar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="dl">'</span><span class="s1">sonata</span><span class="dl">'</span><span class="p">,</span> <span class="mi">120</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mycar</span><span class="p">.</span><span class="nf">getEngineType</span><span class="p">());</span>  <span class="c1">// gasoline</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mycar</span><span class="p">.</span><span class="nx">engine</span><span class="p">);</span>  <span class="c1">// gasoline</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">Car</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">engine</span><span class="p">);</span> <span class="c1">// undefined</span>

</code></pre></div></div>

<h1 id="getter-and-setter">Getter and Setter</h1>
<p>getter와 setter는 User.prototype에 정의됨.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nx">engine</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">gasoline</span><span class="dl">"</span><span class="p">;</span>

    <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>        
        <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span> <span class="c1">//speed 항목의 get/set을 적용</span>
    <span class="p">}</span>

    <span class="kd">get</span> <span class="nf">speed</span><span class="p">(){</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_speed</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kd">set</span> <span class="nf">speed</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span>
        <span class="nf">if</span><span class="p">(</span><span class="nx">value</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">){</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_speed</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_speed</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">mycar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Car</span><span class="p">(</span><span class="dl">'</span><span class="s1">sonata</span><span class="dl">'</span><span class="p">,</span> <span class="o">-</span><span class="mi">100</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mycar</span><span class="p">.</span><span class="nx">speed</span><span class="p">);</span> <span class="c1">// 0 응답</span>
</code></pre></div></div>

<h1 id="class-상속-extends">Class 상속 (extends)</h1>
<p>Javascript 클래스도 상속을 지원 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span> 

    <span class="nf">getMaxSpeed</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Truck</span> <span class="kd">extends</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nf">getLoad</span><span class="p">(){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">1톤 적재 가능</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 클래스 생성 및 호출</span>

<span class="kd">let</span> <span class="nx">mytruck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Truck</span><span class="p">(</span><span class="dl">'</span><span class="s1">bonggo</span><span class="dl">'</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mytruck</span><span class="p">.</span><span class="nf">getName</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mytruck</span><span class="p">.</span><span class="nf">getMaxSpeed</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mytruck</span><span class="p">.</span><span class="nf">getLoad</span><span class="p">());</span>  <span class="c1">// 1톤 적재 가능</span>

</code></pre></div></div>

<h1 id="메소드-오버라이딩">메소드 오버라이딩</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span> 

    <span class="nf">getMaxSpeed</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Truck</span> <span class="kd">extends</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="dl">"</span><span class="s2">the new </span><span class="dl">"</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">mytruck</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Truck</span><span class="p">(</span><span class="dl">'</span><span class="s1">bonggo</span><span class="dl">'</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mytruck</span><span class="p">.</span><span class="nf">getName</span><span class="p">());</span>         <span class="c1">// the new bonggo</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">mytruck</span><span class="p">.</span><span class="nf">getMaxSpeed</span><span class="p">());</span>

</code></pre></div></div>

<h1 id="super">super</h1>
<p>상속 받은 하위 클래스에서 상위 부모의 메소드/생성자 접근시 super사용.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
    <span class="p">}</span> 

    <span class="nf">getMaxSpeed</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Truck</span> <span class="kd">extends</span> <span class="nc">Car</span> <span class="p">{</span>
    <span class="nf">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">)</span> <span class="p">{</span> 
        <span class="nf">super</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">speed</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">speed</span> <span class="o">=</span> <span class="nx">speed</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nf">getName</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">super</span><span class="p">.</span><span class="nf">getName</span><span class="p">();</span>
    <span class="p">}</span> 
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="javascript" /><category term="Class" /><category term="constructor" /><category term="extends" /><category term="super" /><summary type="html"><![CDATA[Javascript Class 사용과 상속에 대해서 정리해 봅시다. JavaScript에서 클래스는 유사한 특성과 동작을 공유하는 개체를 만들기 위한 청사진입니다. 고유한 속성과 메서드를 가질 수 있는 새로운 개체 유형을 정의하는 방법을 제공합니다. 클래스 선언 구문은 ES6에서 도입되어 개체 지향 프로그래밍 언어에서 오는 개발자에게 더 친숙한 구문을 허용합니다. . 클래스에는 인스턴스 메서드 및 정적 메서드뿐만 아니라 해당 속성의 기본값으로 객체를 초기화하는 데 사용되는 생성자가 있을 수 있습니다. 클래스는 상속을 사용하여 확장될 수 있으며, 여기서 하위 클래스는 속성을 상속할 수 있고 부모 클래스의 메소드. 이를 통해 코드 재사용이 가능하고 보다 체계적인 코드베이스를 만드는 데 도움이 됩니다.]]></summary></entry><entry><title type="html">[문제 유형 분석]키순서 랜덤 배열에 앞사람 보기 찾기</title><link href="https://kimjaehyun.co.kr/codingtest/Qtype-stack-sort-count/" rel="alternate" type="text/html" title="[문제 유형 분석]키순서 랜덤 배열에 앞사람 보기 찾기" /><published>2022-07-08T00:00:00-05:00</published><updated>2022-07-08T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/codingtest/Qtype-stack-sort-count</id><content type="html" xml:base="https://kimjaehyun.co.kr/codingtest/Qtype-stack-sort-count/"><![CDATA[<h1 id="문제-조건">문제 조건</h1>
<p>N 명의 사람이 다른 키를 가지로 일렬로 배치 합니다.  <br />
키가 높은 사람은 앞사람이 본인 보다 작은 경우 내려 볼수 있습니다.  <br />
랜덤으로 배치된 사람이 내려다 볼수 있는 사람의 총합을 구하시요.  <br />
조건 : 내려다 보는 방향은 순서대로 (오른쪽-&gt; 왼쪽) 한방향만 가능합니다.</p>

<p>예를 들어 아래 키의 순서로 N개의 배열이 제공될 때.  <br />
[0] index의 <code class="language-plaintext highlighter-rouge">170</code> 은 [1]<code class="language-plaintext highlighter-rouge">150</code> 은 내려다 볼수 있어서 1명을 내려다 볼수 있습니다.  <br />
[1] index의 <code class="language-plaintext highlighter-rouge">150</code> 은 [2]<code class="language-plaintext highlighter-rouge">180</code> 이 더 높으므로 내려다 볼수 없음.  <br />
[2] index의 <code class="language-plaintext highlighter-rouge">180</code> 은 [3]<code class="language-plaintext highlighter-rouge">170</code>, [4]<code class="language-plaintext highlighter-rouge">160</code> 은 내려다 볼수 있어서 2명을 내려다 볼수 있습니다.   <br />
[3] index의 <code class="language-plaintext highlighter-rouge">170</code> 은 [4]<code class="language-plaintext highlighter-rouge">160</code> 은 내려다 볼수 있어서 1명을 내려다 볼수 있습니다.    <br />
[4] index의 <code class="language-plaintext highlighter-rouge">160</code> 은 [5]<code class="language-plaintext highlighter-rouge">190</code> 이 더 높으므로 내려다 볼수 없음.  <br />
[5] index의 <code class="language-plaintext highlighter-rouge">190</code> 은 마지막으로 내려다 볼 대상이 없음.  <br />
각 단계가 볼수 있는 총합은 4 입니다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="o">[</span> <span class="mi">170</span><span class="o">,</span> <span class="mi">150</span> <span class="o">,</span> <span class="mi">180</span><span class="o">,</span> <span class="mi">170</span><span class="o">,</span> <span class="mi">160</span><span class="o">,</span> <span class="mi">190</span><span class="o">]</span>

<span class="o">[</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">4</span>
</code></pre></div></div>
<p>그림으로 그리면 높이 순서는 다음과 같다. (참고용)</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>170 ■■■■■■■     (1 개 앞이 보임)
150 ■■■■■       (0 개)
180 ■■■■■■■■    (2 개)
170 ■■■■■■■     (1 개)
160 ■■■■■■      (0 개)
190 ■■■■■■■■■   (0 개)

</code></pre></div></div>

<p>위 문제는 2중 for으로 풀면 로직은 간단히 해결 할 수 있습니다.  <br />
그러나, 시간 복잡도가 O(N^2)으로 N의 행렬이 높아질때 성능이 저하되는 문제를 가지고 있습니다. <br />
O(N) 의 시간 복잡도로 해결하는 방법을 찾는 것을 묻는 문제 입니다.</p>

<p>stack 자료형을 이용 합니다. (입력 값보다 높은 항목만 유지하는 정책)</p>

<h1 id="접근-방법">접근 방법</h1>
<ol>
  <li>[0] index의 <code class="language-plaintext highlighter-rouge">170</code> stack에 입력
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|       |
|       |
|       |
|       |
|  170  |
---------
</code></pre></div>    </div>
  </li>
  <li>[1] index의 <code class="language-plaintext highlighter-rouge">150</code> stack에 입력 시 stack에 마지막 값(peek) <code class="language-plaintext highlighter-rouge">170</code> 값이 큰값으로, stack의 item을 모두 count ( 1개 <code class="language-plaintext highlighter-rouge">170</code>)
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|       |
|       |
|       |
|  150  |
|  170  |
---------
</code></pre></div>    </div>
  </li>
  <li>[2] index의 <code class="language-plaintext highlighter-rouge">180</code> stack에 입력 시 stack에 마지막 값(peek) <code class="language-plaintext highlighter-rouge">150</code> 값이 작은 값은 모두 pop하고 큰값 존재할 경우에는  stack의 item을 모두 count ( 0개)
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|       |
|       |
|       |
|       |
|  180  |
---------
</code></pre></div>    </div>
  </li>
  <li>[3] index의 <code class="language-plaintext highlighter-rouge">170</code> stack에 입력 시 stack에 마지막 값(peek) <code class="language-plaintext highlighter-rouge">180</code> 값이 큰값으로, stack의 item을 모두 count ( 1개 <code class="language-plaintext highlighter-rouge">180</code>)
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|       |
|       |
|       |
|  170  |
|  180  |
---------
</code></pre></div>    </div>
  </li>
  <li>[4] index의 <code class="language-plaintext highlighter-rouge">160</code> stack에 입력 시 stack에 마지막 값(peek) <code class="language-plaintext highlighter-rouge">170</code> 값이 큰값으로, stack의 item을 모두 count ( 2개 <code class="language-plaintext highlighter-rouge">170, 180</code>)
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|       |
|       |
|  160  |
|  170  |
|  180  |
---------
</code></pre></div>    </div>
  </li>
  <li>[5] index의 <code class="language-plaintext highlighter-rouge">190</code> stack에 입력 시 stack에 마지막 값(peek) <code class="language-plaintext highlighter-rouge">160</code> 값이 작은 값으로 모두 pop시킴, stack의 item을 모두 count ( 0개 )
    <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|       |
|       |
|       |
|       |
|  190  |
---------
</code></pre></div>    </div>
  </li>
</ol>

<p>약간의 아이디어가 필요한 문제 입니다.  <br />
특히, 본 문제의 변형 형태로 나오는 문제가 많으며 <code class="language-plaintext highlighter-rouge">stack</code> 자료형의 <code class="language-plaintext highlighter-rouge">FILO</code> 특성을 생각하면 될 것 같습니다.</p>]]></content><author><name>devjaedol</name></author><category term="codingtest" /><category term="문자열 구문 분석" /><category term="stack" /><category term="FILO" /><summary type="html"><![CDATA[문제 조건 N 명의 사람이 다른 키를 가지로 일렬로 배치 합니다. 키가 높은 사람은 앞사람이 본인 보다 작은 경우 내려 볼수 있습니다. 랜덤으로 배치된 사람이 내려다 볼수 있는 사람의 총합을 구하시요. 조건 : 내려다 보는 방향은 순서대로 (오른쪽-&gt; 왼쪽) 한방향만 가능합니다.]]></summary></entry><entry><title type="html">[Python][Numpy] file Input and output</title><link href="https://kimjaehyun.co.kr/python/python_study_numpy_04_file/" rel="alternate" type="text/html" title="[Python][Numpy] file Input and output" /><published>2022-06-26T00:00:00-05:00</published><updated>2022-06-26T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/python/python_study_numpy_04_file</id><content type="html" xml:base="https://kimjaehyun.co.kr/python/python_study_numpy_04_file/"><![CDATA[<p>numpy를 통해서 파일에 데이터를 읽고/쓰기를 진행 합니다. <br />
<a href="https://numpy.org/doc/stable/reference/routines.io.html" target="_blank">Input and output API 참조</a></p>

<h1 id="텍스트-파일-txt-csv">텍스트 파일 (txt, csv)</h1>
<h2 id="numpysavetxt">numpy.savetxt</h2>
<p>텍스트 파일을 저장 합니다. <br />
<code class="language-plaintext highlighter-rouge">numpy.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# ', encoding=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="c1"># [[6 5 4 1 1]
#  [9 8 3 9 8]
#  [9 7 7 4 9]
#  [6 4 9 5 7]
#  [5 7 4 9 9]]
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">savetxt</span><span class="p">(</span><span class="s">"t1.csv"</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="nf">savetxt</span><span class="p">(</span><span class="s">"t2.csv"</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">','</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="nf">savetxt</span><span class="p">(</span><span class="s">"t3.csv"</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">','</span><span class="p">,</span> <span class="n">fmt</span><span class="o">=</span><span class="s">'%.2e'</span><span class="p">,</span> <span class="n">header</span><span class="o">=</span><span class="s">'c1,c2,c3,c4,c5'</span><span class="p">)</span>  <span class="c1">#소수점 포멧
</span></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">[t1.csv File]</code></p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6.000000000000000000e+00 5.000000000000000000e+00 4.000000000000000000e+00 1.000000000000000000e+00 1.000000000000000000e+00
9.000000000000000000e+00 8.000000000000000000e+00 3.000000000000000000e+00 9.000000000000000000e+00 8.000000000000000000e+00
9.000000000000000000e+00 7.000000000000000000e+00 7.000000000000000000e+00 4.000000000000000000e+00 9.000000000000000000e+00
6.000000000000000000e+00 4.000000000000000000e+00 9.000000000000000000e+00 5.000000000000000000e+00 7.000000000000000000e+00
5.000000000000000000e+00 7.000000000000000000e+00 4.000000000000000000e+00 9.000000000000000000e+00 9.000000000000000000e+00
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">[t2.csv File]</code></p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6.000000000000000000e+00,5.000000000000000000e+00,4.000000000000000000e+00,1.000000000000000000e+00,1.000000000000000000e+00
9.000000000000000000e+00,8.000000000000000000e+00,3.000000000000000000e+00,9.000000000000000000e+00,8.000000000000000000e+00
9.000000000000000000e+00,7.000000000000000000e+00,7.000000000000000000e+00,4.000000000000000000e+00,9.000000000000000000e+00
6.000000000000000000e+00,4.000000000000000000e+00,9.000000000000000000e+00,5.000000000000000000e+00,7.000000000000000000e+00
5.000000000000000000e+00,7.000000000000000000e+00,4.000000000000000000e+00,9.000000000000000000e+00,9.000000000000000000e+00
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">[t3.csv File]</code></p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># c1,c2,c3,c4,c5
6.00e+00,5.00e+00,4.00e+00,1.00e+00,1.00e+00
9.00e+00,8.00e+00,3.00e+00,9.00e+00,8.00e+00
9.00e+00,7.00e+00,7.00e+00,4.00e+00,9.00e+00
6.00e+00,4.00e+00,9.00e+00,5.00e+00,7.00e+00
5.00e+00,7.00e+00,4.00e+00,9.00e+00,9.00e+00
</code></pre></div></div>

<h2 id="numpyloadtxt">numpy.loadtxt</h2>
<p>텍스트 파일을 조회 합니다.  <br />
<code class="language-plaintext highlighter-rouge">numpy.loadtxt(fname, dtype=&lt;class 'float'&gt;, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes', max_rows=None, *, quotechar=None, like=None)[source]</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.loadtxt.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">csv1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">loadtxt</span><span class="p">(</span><span class="s">"t1.csv"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">csv1</span><span class="p">)</span>

<span class="n">csv2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">loadtxt</span><span class="p">(</span><span class="s">"t2.csv"</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">','</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">csv2</span><span class="p">)</span>

<span class="n">csv3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">loadtxt</span><span class="p">(</span><span class="s">"t3.csv"</span><span class="p">,</span> <span class="n">delimiter</span><span class="o">=</span><span class="s">','</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">csv3</span><span class="p">)</span>

<span class="c1"># 조회 결과
# [[6. 5. 4. 1. 1.]
#  [9. 8. 3. 9. 8.]
#  [9. 7. 7. 4. 9.]
#  [6. 4. 9. 5. 7.]
#  [5. 7. 4. 9. 9.]]
</span>
</code></pre></div></div>

<h1 id="numpy-이진-파일-npy-npz">NumPy 이진 파일 (NPY, NPZ)</h1>
<p><code class="language-plaintext highlighter-rouge">NPY</code>, <code class="language-plaintext highlighter-rouge">NPZ</code> 는 NumPy의 데이터를 저장하는 Binary 형태의 데이터 입니다.  <br />
 1개의 ndarray를, . npz 는 여러개의 ndarray를 저장하는 데 사용 됩니다.</p>

<h2 id="numpysave-npy">numpy.save (npy)</h2>
<p>한개의 데이터를 Binary 파일로 저장 합니다. <br />
<code class="language-plaintext highlighter-rouge">numpy.save(file, arr, allow_pickle=True, fix_imports=True)[source]</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.save.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
<span class="c1"># [[4 1 8 3 5]
#  [2 7 2 8 6]
#  [9 9 1 8 7]
#  [8 2 4 5 1]
#  [4 9 7 1 2]]
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="s">"sample"</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>    <span class="c1"># sample.npy 이 생성됨. binary 형태
</span></code></pre></div></div>

<h2 id="numpysavez-npz">numpy.savez (npz)</h2>
<p>여러 데이터를 Binary 파일로 저장 합니다. <br />
<code class="language-plaintext highlighter-rouge">numpy.savez(file, *args, **kwds)[source]</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.savez.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">t1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="n">t2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="n">np</span><span class="p">.</span><span class="nf">savez</span><span class="p">(</span><span class="s">"sample2"</span><span class="p">,</span> <span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">)</span>  <span class="c1"># sample2.npz 이 생성됨. binary 형태
</span>
<span class="c1"># 데이터의 이름을 부여하고 저장하기
</span><span class="n">t1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="n">t2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="n">np</span><span class="p">.</span><span class="nf">savez</span><span class="p">(</span><span class="s">"sample2"</span><span class="p">,</span> <span class="n">c1</span><span class="o">=</span><span class="n">t1</span><span class="p">,</span> <span class="n">c2</span><span class="o">=</span><span class="n">t2</span><span class="p">)</span>    <span class="c1">#c1, c2로 이름을 부여함
</span>
</code></pre></div></div>

<h2 id="numpyload">numpy.load</h2>
<p>저장된 데이터를 조회 합니다.   <br />
<code class="language-plaintext highlighter-rouge">numpy.load(file, mmap_mode=None, allow_pickle=False, fix_imports=True, encoding='ASCII')</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.load.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># npy 조회
</span><span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="s">"sample.npy"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>

<span class="c1"># npz 조회
</span><span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="s">"sample2.npz"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">files</span><span class="p">)</span>
<span class="c1"># ['arr_0', 'arr_1']
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'arr_0'</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="s">'arr_1'</span><span class="p">])</span>

<span class="k">with</span> <span class="nf">load</span><span class="p">(</span><span class="s">'sample2.npz'</span><span class="p">)</span> <span class="k">as</span> <span class="n">data</span><span class="p">:</span>
    <span class="n">t1</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'arr_0'</span><span class="p">]</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="s">'arr_1'</span><span class="p">]</span>

<span class="c1"># np.savez("sample2", c1=t1, c2=t2) 와 같이 이름을 부여하면, arr_0..N  이 이름으로 조회 가능합니다. 
</span></code></pre></div></div>

<p><a href="https://www.youtube.com/watch?v=mirZPrWwvao" target="_blank">학습 내용 참고처</a></p>

<p><span class="nav__sub-title">관련된 글 (python &gt; lecture-python-basic)</span></p>
<ul>

    

    

    

    

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_10_package/">[Python Basic] 모듈 만들기, 패키지 만들기</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_09_exception/">[Python Basic] 예외처리</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_08_class/">[Python Basic] Class</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_07_function/">[Python Basic] 함수</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_06_set/">[Python Basic] 자료형 set 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_05_dictionary/">[Python Basic] 자료형 dictionary 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_04_tuple/">[Python Basic] 자료형 tuple 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_03_list/">[Python Basic] 자료형 list 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_02_init/">[Python Basic] 기본 자료 및 조건문</a></li>
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_01_install/">[Python Basic] 설치</a></li>
             
        
      

    

    

    

    

</ul>]]></content><author><name>devjaedol</name></author><category term="python" /><category term="python" /><category term="python강좌" /><category term="lecture-python-numpy" /><category term="numpy" /><summary type="html"><![CDATA[numpy를 통해서 파일에 데이터를 읽고/쓰기를 진행 합니다. Input and output API 참조]]></summary></entry><entry><title type="html">[Python][Numpy] 배열 연산(Array operations)</title><link href="https://kimjaehyun.co.kr/python/python_study_numpy_03_operations/" rel="alternate" type="text/html" title="[Python][Numpy] 배열 연산(Array operations)" /><published>2022-06-25T00:00:00-05:00</published><updated>2022-06-25T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/python/python_study_numpy_03_operations</id><content type="html" xml:base="https://kimjaehyun.co.kr/python/python_study_numpy_03_operations/"><![CDATA[<p>nparray의 연산에 대해서 알아보겠습니다. <br />
mathematical function 메뉴에는 다양한 수학 관련 numpy 함수가 제공 되고 있으니 참고 바랍니다. <br />
<a href="https://numpy.org/doc/stable/reference/routines.math.html" target="_blank">API 참조</a></p>

<h1 id="numpy-operations">numpy operations</h1>
<h2 id="브로드캐스팅">브로드캐스팅</h2>
<p>nparray를 연산 하는 과정에서 부족한 배열 부분을 이전 배열의 패턴으로 채워서 연산되는 형태를 말합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>       <span class="c1"># [1 2 3]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="o">+</span><span class="mi">5</span><span class="p">)</span>     <span class="c1"># [6 7 8]
</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>

<span class="c1"># 빈값은 브로드캐스팅 되어 채워진 채로 더해짐
</span><span class="nf">print</span><span class="p">(</span> <span class="n">a2</span> <span class="o">+</span> <span class="n">a1</span> <span class="p">)</span> 
<span class="c1"># [[ 2  4  6]
#  [ 5  7  9]
#  [ 8 10 12]]
</span>
<span class="n">b2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="c1"># [1 2 3]
</span><span class="nf">print</span><span class="p">(</span><span class="n">b2</span><span class="p">)</span>
<span class="c1"># [[1]
#  [2]
#  [3]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="o">+</span><span class="n">b2</span><span class="p">)</span>
<span class="c1"># [[2 3 4]
#  [3 4 5]
#  [4 5 6]]
</span>
</code></pre></div></div>

<h2 id="사칙연산">사칙연산</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>   
<span class="n">b1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b1</span><span class="p">)</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]  al
# [3 9 6 5 6 9 2 9 6]  b1 램덤값
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">+</span> <span class="n">b1</span><span class="p">)</span>  <span class="c1"># [ 4 11  9  9 11 15  9 17 15]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">-</span> <span class="n">b1</span><span class="p">)</span>  <span class="c1"># [-2 -7 -3 -1 -1 -3  5 -1  3]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">*</span> <span class="n">b1</span><span class="p">)</span>  <span class="c1"># [ 3 18 18 20 30 54 14 72 54]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">/</span> <span class="n">b1</span><span class="p">)</span>  <span class="c1"># [0.33333333 0.22222222 0.5        0.8        0.83333333 0.66666667  3.5        0.88888889 1.5       ]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">//</span> <span class="n">b1</span><span class="p">)</span> <span class="c1"># [0 0 0 0 0 0 3 0 1]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">**</span> <span class="n">b1</span><span class="p">)</span> <span class="c1"># [        1       512       729      1024     15625  10077696        49   134217728    531441]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">%</span> <span class="n">b1</span><span class="p">)</span>  <span class="c1"># [1 2 3 4 5 6 1 8 3]
</span>

</code></pre></div></div>

<h2 id="numpyadd">numpy.add</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.add(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 더하는 기능을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.add.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="o">+</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [11 12 13 14 15 16 17 18 19]
# [11 12 13 14 15 16 17 18 19]
</span>
</code></pre></div></div>

<h2 id="numpysubtract">numpy.subtract</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.subtract(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 빼는 기능을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.subtract.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">subtract</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [-1  0  1  2  3  4  5  6  7]
# [-1  0  1  2  3  4  5  6  7]
</span></code></pre></div></div>

<h2 id="numpynegative">numpy.negative</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.negative(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 부호를 반전 기능을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.negative.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="o">-</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">negative</span><span class="p">(</span><span class="n">a1</span><span class="p">))</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [-1 -2 -3 -4 -5 -6 -7 -8 -9]
# [-1 -2 -3 -4 -5 -6 -7 -8 -9]
</span></code></pre></div></div>

<h2 id="numpymultiply">numpy.multiply</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.multiply(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 곱하는 기능을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.multiply.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="o">*</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">multiply</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [ 2  4  6  8 10 12 14 16 18]
# [ 2  4  6  8 10 12 14 16 18]
</span>
</code></pre></div></div>

<h2 id="numpydivide">numpy.divide</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 나누는 기능을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.divide.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">divide</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [0.5 1.  1.5 2.  2.5 3.  3.5 4.  4.5]
# [0.5 1.  1.5 2.  2.5 3.  3.5 4.  4.5]
</span></code></pre></div></div>

<h2 id="numpyfloor_divide">numpy.floor_divide</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.floor_divide(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 나누기 값의 소수부만 제공하는 기능을 제공합니다.(버림)  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.floor_divide.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">floor_divide</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>

<span class="c1"># [0 1 1 2 2 3 3 4 4]
# [0 1 1 2 2 3 3 4 4]
</span></code></pre></div></div>

<h2 id="numpymod">numpy.mod</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.mod(x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 나머지 값을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.mod.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">mod</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [1 0 1 0 1 0 1 0 1]
# [1 0 1 0 1 0 1 0 1]
</span></code></pre></div></div>

<h2 id="numpyabsolute-npabs">numpy.absolute, np.abs</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.absolute(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
np.abs is a shorthand for this function.
nparray를 절대값을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.absolute.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="o">-</span><span class="mf">1.2</span><span class="p">,</span> <span class="mf">1.2</span><span class="p">])</span>
<span class="n">np</span><span class="p">.</span><span class="nf">absolute</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="c1"># array([ 1.2,  1.2])
</span></code></pre></div></div>

<h2 id="numpysquare">numpy.square</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.square(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code>  <br />
nparray를 제곱값을 제공합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.square.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">square</span><span class="p">(</span><span class="n">a1</span><span class="p">))</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [ 1  4  9 16 25 36 49 64 81]
</span></code></pre></div></div>

<h2 id="numpysqrt">numpy.sqrt</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.sqrt(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code> <br />
루트 값을 제공 합니다.
<a href="https://numpy.org/doc/stable/reference/generated/numpy.sqrt.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">25</span><span class="p">,</span><span class="mi">36</span><span class="p">,</span><span class="mi">10</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">a2</span><span class="p">))</span>

<span class="c1"># [ 4  9 25 36 10]
# [2.         3.         5.         6.         3.16227766]
</span></code></pre></div></div>

<h2 id="numpyexp">numpy.exp</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.exp(x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])</code> <br />
밑이 자연상수 e인 지수함수(e^x)의 그래프 값을 제공 합니다.
<a href="https://numpy.org/doc/stable/reference/generated/numpy.exp.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>    <span class="c1"># e^0 와 동일
# 1.0
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>    <span class="c1"># e^1 와 동일
# 2.718281828459045
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>   <span class="c1"># e^10 와 동일
# 22026.465794806718
</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="p">,</span> <span class="mf">1.5</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="c1">#[3.67879441e-01 6.06530660e-01 1.00000000e+00 2.71828183e+00 4.48168907e+00 1.48413159e+02 2.20264658e+04]
</span>
</code></pre></div></div>

<h2 id="numpysum">numpy.sum</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.sum(a, axis=None, dtype=None, out=None, keepdims=&lt;no value&gt;, initial=&lt;no value&gt;, where=&lt;no value&gt;)</code> <br />
nparray의 합산된 값을 제공 합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.sum.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[7 9 7]
#  [5 6 2]
#  [3 3 8]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="nf">sum</span><span class="p">(),</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">a2</span><span class="p">))</span> <span class="c1">#전체 item을 합
# 50 50
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
<span class="c1">#[15 18 17] [15 18 17]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="c1">#[23 13 14] [23 13 14]
</span>
</code></pre></div></div>

<h2 id="numpycumsum">numpy.cumsum</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.cumsum(a, axis=None, dtype=None, out=None)</code> <br />
nparray의 <code class="language-plaintext highlighter-rouge">누적</code> 합산된 값을 제공 합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.cumsum.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[7 9 7]
#  [5 6 2]
#  [3 3 8]]
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">cumsum</span><span class="p">(</span><span class="n">a2</span><span class="p">))</span> <span class="c1">#누적합을 제공함
# [ 7 16 23 28 34 36 39 42 50]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">cumsum</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>  <span class="c1"># 행방향의 누적된 합으로 naddray변경됨
# [[ 7  9  7]
#  [12 15  9]
#  [15 18 17]]
</span> 
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">cumsum</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span> <span class="c1"># 열 방향의 누적된 합으로 naddray변경됨
# [[ 7 16 23]
#  [ 5 11 13]
#  [ 3  6 14]]
</span>
</code></pre></div></div>

<h2 id="numpydiff">numpy.diff</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.diff(a, n=1, axis=-1, prepend=&lt;no value&gt;, append=&lt;no value&gt;)</code> <br />
naddray의 정해진 축의 방향으로 이전 값과의 차이 값을 제공 합니다.
<a href="https://numpy.org/doc/stable/reference/generated/numpy.diff.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[7 9 7]
#  [5 6 2]
#  [3 3 8]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">(</span><span class="n">a2</span><span class="p">))</span>  <span class="c1"># 기본 axis=1 값과 동일
# [[ 2 -2]
#  [ 1 -4]
#  [ 0  5]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># [[-2 -3 -5]
#  [-2 -3  6]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">diff</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="c1"># [[ 2 -2]
#  [ 1 -4]
#  [ 0  5]]
</span>
</code></pre></div></div>

<h2 id="numpyany">numpy.any</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.any(a, axis=None, out=None, keepdims=&lt;no value&gt;, *, where=&lt;no value&gt;)</code> <br />
ndarray 항목중 <code class="language-plaintext highlighter-rouge">True</code> 값이 1개 이상 존재한다면 <code class="language-plaintext highlighter-rouge">True</code> (or조건) 제공 합니다.
<a href="https://numpy.org/doc/stable/reference/generated/numpy.any.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span>
    <span class="p">[</span><span class="bp">False</span><span class="p">,</span><span class="bp">False</span><span class="p">,</span><span class="bp">False</span><span class="p">],</span>
    <span class="p">[</span><span class="bp">False</span><span class="p">,</span><span class="bp">True</span><span class="p">,</span><span class="bp">True</span><span class="p">],</span>
    <span class="p">[</span><span class="bp">False</span><span class="p">,</span><span class="bp">False</span><span class="p">,</span><span class="bp">False</span><span class="p">]</span>
<span class="p">])</span>

<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[False False False]
#  [False  True  True]
#  [False False False]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">any</span><span class="p">(</span><span class="n">a2</span><span class="p">))</span> <span class="c1"># 항목중에 하나라도 True 면 True 임 OR
# True   (전체중에 True가 한개 이상 있으므로 True반환)
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">any</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span> <span class="c1">#열단위
# [False  True  True]   
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">any</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span> <span class="c1">#행단위
# [False  True False]
</span></code></pre></div></div>

<h2 id="numpyall">numpy.all</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.all(a, axis=None, out=None, keepdims=&lt;no value&gt;, *, where=&lt;no value&gt;)</code> <br />
ndarray 항목 모두 <code class="language-plaintext highlighter-rouge">True</code> 값이이라면 <code class="language-plaintext highlighter-rouge">True</code> (and조건) 제공 합니다.
<a href="https://numpy.org/doc/stable/reference/generated/numpy.all.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[False False False]
#  [False  True  True]
#  [False False False]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="n">a2</span><span class="p">))</span> <span class="c1"># 전체가 True여야 True임 AND
# False
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span>
<span class="c1"># [False False False]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span>
<span class="c1"># [False False False]
</span></code></pre></div></div>

<h2 id="numpysort">numpy.sort</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.sort(a, axis=- 1, kind=None, order=None)</code>  <br />
ndarray의 정렬을 제공 합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.sort.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="c1"># [2 2 2 9 2 6 5 7 5 9]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">a1</span><span class="p">))</span>
<span class="c1"># [2 2 2 2 5 5 6 7 9 9]
</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]])</span>
<span class="n">np</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>                <span class="c1"># sort along the last axis
# array([[1, 4],
#        [1, 3]])
</span><span class="n">np</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>     <span class="c1"># sort the flattened array
# array([1, 1, 3, 4])
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>        <span class="c1"># sort along the first axis
# array([[1, 1],
#        [3, 4]])
</span>
</code></pre></div></div>

<h2 id="numpyargosrt">numpy.argosrt</h2>
<p><code class="language-plaintext highlighter-rouge">numpy.argsort(a, axis=- 1, kind=None, order=None)</code>  <br />
ndarray의 정렬 <code class="language-plaintext highlighter-rouge">index</code> 값을 제공 합니다.  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.argsort.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="c1"># [2 2 2 9 2 6 5 7 5 9]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">a1</span><span class="p">))</span><span class="c1">#정렬의 index순서
# [0 1 2 4 6 8 5 7 3 9]
</span></code></pre></div></div>

<h2 id="그밖에-배열-연산-팁">그밖에 배열 연산 팁</h2>
<p>조건을 통한 배열의 필터링하여 재생성할 수도 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">==</span> <span class="mi">5</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">!=</span> <span class="mi">5</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span>

<span class="c1"># [1 2 3 4 5 6 7 8 9]
# [False False False False  True False False False False]
# [ True  True  True  True False  True  True  True  True]
# [False False False False False  True  True  True  True]
# [ True  True  True  True  True False False False False]
</span>

<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">a2</span><span class="p">))</span>
<span class="c1"># 45
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">count_nonzero</span><span class="p">(</span><span class="n">a2</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">))</span> <span class="c1"># 5초과 인 수량을 카운트함
# 4
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">a2</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">))</span>
<span class="c1"># 4
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">a2</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span> <span class="c1"># 축에 해당하는 5초과 카운트가 출력됨
# [1 1 2]
</span><span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">a2</span><span class="o">&gt;</span><span class="mi">5</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">))</span> <span class="c1"># 축에 해당하는 5초과 카운트가 출력됨
# [0 1 3]
</span>
</code></pre></div></div>

<p>그 밖에 표준편차 <code class="language-plaintext highlighter-rouge">numpy.std</code>, 분산 <code class="language-plaintext highlighter-rouge">numpy.var</code>, 로그 <code class="language-plaintext highlighter-rouge">numpy.log</code> 등 다양한 함수가 있습니다.  <br />
세부 내용은 공식 API를 참고 바랍니다.  <br />
필요할 때 찾아쓸 정도만 알고 있으면 될 것 같네요.</p>

<p><a href="https://www.youtube.com/watch?v=mirZPrWwvao" target="_blank">학습 내용 참고처</a></p>

<p><span class="nav__sub-title">관련된 글 (python &gt; lecture-python-basic)</span></p>
<ul>

    

    

    

    

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_10_package/">[Python Basic] 모듈 만들기, 패키지 만들기</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_09_exception/">[Python Basic] 예외처리</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_08_class/">[Python Basic] Class</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_07_function/">[Python Basic] 함수</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_06_set/">[Python Basic] 자료형 set 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_05_dictionary/">[Python Basic] 자료형 dictionary 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_04_tuple/">[Python Basic] 자료형 tuple 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_03_list/">[Python Basic] 자료형 list 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_02_init/">[Python Basic] 기본 자료 및 조건문</a></li>
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_01_install/">[Python Basic] 설치</a></li>
             
        
      

    

    

    

    

</ul>]]></content><author><name>devjaedol</name></author><category term="python" /><category term="python" /><category term="python강좌" /><category term="lecture-python-numpy" /><category term="numpy" /><summary type="html"><![CDATA[nparray의 연산에 대해서 알아보겠습니다. mathematical function 메뉴에는 다양한 수학 관련 numpy 함수가 제공 되고 있으니 참고 바랍니다. API 참조]]></summary></entry><entry><title type="html">[Python][Numpy] 배열 생성(Array creation)</title><link href="https://kimjaehyun.co.kr/python/python_study_numpy_01_ndarray/" rel="alternate" type="text/html" title="[Python][Numpy] 배열 생성(Array creation)" /><published>2022-06-24T00:00:00-05:00</published><updated>2022-06-24T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/python/python_study_numpy_01_ndarray</id><content type="html" xml:base="https://kimjaehyun.co.kr/python/python_study_numpy_01_ndarray/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Numpy(Numerical Python)</code> 는 python으로 행열 연산 등 대규모 다타원 배열과 행열 연산 등에 사용할 수 있는 라이브러 입니다. <br />
python이 데이터 분석 머신너링에 이용되기 위해서 데이터 전처리 등의 과정을 거치는데 numpy는 이런 전처리 과정에 사용됩니다. <br />
기본적은 사용법을 배워보겠습니다.<br />
Array creation routines :  <a href="https://numpy.org/doc/stable/reference/routines.array-creation.html" target="_blank">API 참조</a></p>

<p>Numpy 홈페이지 : <a href="https://numpy.org/doc" target="_blank">numpy.org</a></p>

<p>Numpy를 사용하려면 설치를 진행 해야됩니다.</p>
<h1 id="설치하기">설치하기</h1>
<p><code class="language-plaintext highlighter-rouge">pip install numpy</code> 로 설치를 진행 합니다. <br />
설치 후 <code class="language-plaintext highlighter-rouge">import numpy as np</code> 를 통해서 사용 합니다.</p>

<h1 id="numpy-배열">numpy 배열</h1>

<h2 id="배열-생성">배열 생성</h2>
<p>기본적인 배열을 만들어 봅니다.<br />
다양한 생성 방법이 있는데, 공식 문서에서 확인 바랍니다.  <br />
<a href="https://numpy.org/doc/stable/reference/routines.array-creation.html" target="_blank">Array creation routines</a>  <br />
type을 확인해보면, <code class="language-plaintext highlighter-rouge">list</code> 타입과 다른 <code class="language-plaintext highlighter-rouge">ndarray</code> 가 출력 됩니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="c1"># 1차원 생성
</span><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]);</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>   <span class="c1"># [1 2 3 4 5]
</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]))</span>    <span class="c1">#&lt;class 'list'&gt;
</span><span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">a1</span><span class="p">))</span>             <span class="c1">#&lt;class 'numpy.ndarray'&gt;
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>             <span class="c1">#(5,)     
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">.</span><span class="n">ndim</span><span class="p">)</span>              <span class="c1">#1     
</span>
<span class="c1"># 2차원 생성
</span><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>             <span class="c1">#(3,3)
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="n">ndim</span><span class="p">)</span>              <span class="c1">#2     
</span>
<span class="c1"># 3차원 생성
</span><span class="n">a3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span> <span class="p">[</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]],</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]],</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]]</span>
<span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>             <span class="c1">#(3, 3, 3)
</span><span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">.</span><span class="n">ndim</span><span class="p">)</span>              <span class="c1">#3     
</span>
<span class="c1"># 배열의 타입 선택
</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">2.2</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="mf">4.4</span><span class="p">,</span> <span class="mf">5.5</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span>
<span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span> <span class="c1"># array([ True,  True, False,  True,  True])  0만 False
</span></code></pre></div></div>
<p>생성한 배열의 크기와 형태를 확인하는 방법은 <code class="language-plaintext highlighter-rouge">shape</code>은 tuple형태로 반환하고, 
<code class="language-plaintext highlighter-rouge">ndim</code>은 차원수를 반환한다.</p>

<h2 id="date-배열-생성">Date 배열 생성</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 데이터 타입 생성
</span><span class="n">date</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="s">'2022-07-01'</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">datetime64</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">date</span><span class="p">)</span> <span class="c1"># 2022-07-01
</span>
<span class="n">date</span>        <span class="c1"># array('2022-07-01', dtype='datetime64[D]')
</span><span class="n">date</span> <span class="o">+</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">40</span><span class="p">)</span>

<span class="c1"># array(['2022-07-01', '2022-07-02', '2022-07-03', '2022-07-04',
#        '2022-07-05', '2022-07-06', '2022-07-07', '2022-07-08',
#        '2022-07-09', '2022-07-10', '2022-07-11', '2022-07-12',
#        '2022-07-13', '2022-07-14', '2022-07-15', '2022-07-16',
#        '2022-07-17', '2022-07-18', '2022-07-19', '2022-07-20',
#        '2022-07-21', '2022-07-22', '2022-07-23', '2022-07-24',
#        '2022-07-25', '2022-07-26', '2022-07-27', '2022-07-28',
#        '2022-07-29', '2022-07-30', '2022-07-31', '2022-08-01',
#        '2022-08-02', '2022-08-03', '2022-08-04', '2022-08-05',
#        '2022-08-06', '2022-08-07', '2022-08-08', '2022-08-09'],
#       dtype='datetime64[D]')
</span>
<span class="n">datetime</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">datetime64</span><span class="p">(</span><span class="s">'2022-07-01 13:20'</span><span class="p">)</span>
<span class="n">datetime</span>
<span class="c1"># numpy.datetime64('2022-07-01T13:20')
</span>
</code></pre></div></div>
<p>생성한 배열의 크기와 형태를 확인하는 방법은 <code class="language-plaintext highlighter-rouge">shape</code>은 tuple형태로 반환하고, 
<code class="language-plaintext highlighter-rouge">ndim</code>은 차원수를 반환한다.</p>

<h2 id="배열-복사">배열 복사</h2>
<p>기존 생성된 ndarray를  복사하여 생성 할수 있습니다. <br />
아래 <code class="language-plaintext highlighter-rouge">new_1 = a1</code> 로 인해서 두 변수는 같이 변경되는 것을 알 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]);</span>
<span class="n">new_1</span> <span class="o">=</span> <span class="n">a1</span>
<span class="n">new_2</span> <span class="o">=</span> <span class="n">a1</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>

<span class="n">new_1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">200</span>

<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">new_1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">new_2</span><span class="p">)</span>

<span class="c1"># 결과
# [200   2   3   4   5]
# [200   2   3   4   5]
# [1 2 3 4 5]
</span>
</code></pre></div></div>

<h2 id="배열-정보-확인">배열 정보 확인</h2>
<p>다음 함수를 통해서 배열의 정보를 확인할 수 있습니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">항목</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">ndim</td>
      <td style="text-align: center">배열 차원</td>
    </tr>
    <tr>
      <td style="text-align: center">shape</td>
      <td style="text-align: center">배열 shape</td>
    </tr>
    <tr>
      <td style="text-align: center">dtype</td>
      <td style="text-align: center">배열 데이터 타입</td>
    </tr>
    <tr>
      <td style="text-align: center">size</td>
      <td style="text-align: center">배열 요소 수</td>
    </tr>
    <tr>
      <td style="text-align: center">itemsize</td>
      <td style="text-align: center">배열 각 맴버의 바이트 크기</td>
    </tr>
    <tr>
      <td style="text-align: center">nbytes</td>
      <td style="text-align: center">배열의 요소가 소비 한 총 바이트</td>
    </tr>
    <tr>
      <td style="text-align: center">strides</td>
      <td style="text-align: center">배열을 탐색 할 때 각 차원에서 단계별로 이동할 바이트 수</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ainfo</span><span class="p">(</span><span class="n">array</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"ndim : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">ndim</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"shape : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"dytpe : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">dtype</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"size : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"itemsize : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">itemsize</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"nbytes : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">nbytes</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"strides : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">strides</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="배열-접근">배열 접근</h2>
<p><code class="language-plaintext highlighter-rouge">list</code> 배열과 같이 접근 할 수 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1차원 접근
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">a1</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">a1</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="c1"># 1 2 3
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># 5
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[:</span><span class="mi">2</span><span class="p">])</span> <span class="c1"># [1 2]
</span>
<span class="c1"># 2차원 접근
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="n">a2</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">a2</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="c1"># 1 5 9
</span>
<span class="c1"># 3차원 접근
</span><span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="n">a3</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span><span class="n">a3</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span> <span class="c1"># 1 5 9 
</span>
<span class="c1">#값 변경
</span><span class="n">a1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">15</span>


</code></pre></div></div>

<h2 id="numpyzeros">numpy.zeros</h2>
<p><code class="language-plaintext highlighter-rouge">0</code> 값으로 채우기 위해서 사용합니다.  <br />
<code class="language-plaintext highlighter-rouge">numpy.zeros(shape, dtype=float, order='C', *, like=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.zeros.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1차원
</span><span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">z</span><span class="p">))</span>      <span class="c1"># &lt;class 'numpy.ndarray'&gt;
</span><span class="nf">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>            <span class="c1"># [0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>        <span class="c1"># array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])
</span>

<span class="c1"># 2차원
</span><span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>

<span class="c1"># 형태
# array([[0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
#        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]])
</span>
</code></pre></div></div>

<h2 id="numpyones">numpy.ones</h2>
<p><code class="language-plaintext highlighter-rouge">1</code> 값으로 채우기 위해서 사용합니다.  <br />
<code class="language-plaintext highlighter-rouge">numpy.ones(shape, dtype=None, order='C', *, like=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.ones.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1차원
</span><span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="c1"># array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])
</span>
<span class="c1"># 2차원
</span><span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="c1"># 형태
# array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],
#        [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])
</span>
<span class="c1"># bool 타입 선언
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
<span class="c1"># 형태
# array([[ True,  True,  True],
</span>    <span class="c1">#    [ True,  True,  True],
</span>    <span class="c1">#    [ True,  True,  True]])
</span></code></pre></div></div>

<h2 id="numpyfull">numpy.full</h2>
<p><code class="language-plaintext highlighter-rouge">특정</code> 값으로 채우기 위해서 사용합니다.  <br />
<code class="language-plaintext highlighter-rouge">numpy.full(shape, fill_value, dtype=None, order='C', *, like=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.full.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">full</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="mf">3.14</span> <span class="p">)</span>

<span class="c1"># 형태
# array([[3.14, 3.14, 3.14],
#        [3.14, 3.14, 3.14],
#        [3.14, 3.14, 3.14]])
</span></code></pre></div></div>

<h2 id="numpyeye">numpy.eye</h2>
<p>단위행렬 형태로 대각선의 <code class="language-plaintext highlighter-rouge">1</code>로 만들어진 정사각형 행열을 반환 합니다.  <br />
<code class="language-plaintext highlighter-rouge">numpy.eye(N, M=None, k=0, dtype=&lt;class 'float'&gt;, order='C', *, like=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.eye.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">eye</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="c1"># 형태
# array([[1., 0., 0., 0., 0.],
#        [0., 1., 0., 0., 0.],
#        [0., 0., 1., 0., 0.],
#        [0., 0., 0., 1., 0.],
#        [0., 0., 0., 0., 1.]])
</span></code></pre></div></div>

<h2 id="numpytri">numpy.tri</h2>
<p>정사각형 행렬에서 3각 행렬 형태의 값을 <code class="language-plaintext highlighter-rouge">1</code>로 채운 행열을 반환 합니다. <br />
<code class="language-plaintext highlighter-rouge">numpy.tri(N, M=None, k=0, dtype=&lt;class 'float'&gt;, *, like=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.tri.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">tri</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>

<span class="c1"># 형태
# array([[1., 0., 0., 0., 0.],
#        [1., 1., 0., 0., 0.],
#        [1., 1., 1., 0., 0.],
#        [1., 1., 1., 1., 0.],
#        [1., 1., 1., 1., 1.]])
</span></code></pre></div></div>

<h2 id="numpyempty">numpy.empty</h2>
<p>초기화 하지 않은 배열을 반환하는데, 값은 기존 메모리에 값들이 출력되는 현상이 발생한다.   <br />
<code class="language-plaintext highlighter-rouge">numpy.empty(shape, dtype=float, order='C', *, like=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.empty.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">empty</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="c1"># 형태 (임의의 값)
# array([1., 1., 1., 1., 1.])
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">empty</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="c1"># 형태 (임의의 값)
# array([[3.14, 3.14, 3.14],
#        [3.14, 3.14, 3.14],
#        [3.14, 3.14, 3.14]])
</span>       
</code></pre></div></div>

<h2 id="_like-ones_like--zeros_like-full_like-empty_like">*_like, ones_like,  zeros_like, full_like, empty_like</h2>
<p><code class="language-plaintext highlighter-rouge">*_like</code>는 인자로 제공된 데이터 형태와 같은 <code class="language-plaintext highlighter-rouge">shape</code>을 가지고 있는 배열을 반환합니다.  <br />
예 를 들어 <code class="language-plaintext highlighter-rouge">sample1</code>은 <code class="language-plaintext highlighter-rouge">(5,5)</code>의 sahpe을 가진 ndarray이고 <code class="language-plaintext highlighter-rouge">sample2</code>는 <code class="language-plaintext highlighter-rouge">sample1</code>의 형태(shape)을 동일하게 만들고 값은 <code class="language-plaintext highlighter-rouge">full_like</code>로 특정값을 선택하는 의미 입니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sample1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">ones</span><span class="p">((</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sample1</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>        <span class="c1"># (5, 5) 
# print(sample1)
# [[1. 1. 1. 1. 1.]
#  [1. 1. 1. 1. 1.]
#  [1. 1. 1. 1. 1.]
#  [1. 1. 1. 1. 1.]
#  [1. 1. 1. 1. 1.]]
</span>
<span class="n">sample2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">full_like</span><span class="p">(</span><span class="n">sample1</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sample2</span><span class="p">)</span>              <span class="c1"># (5, 5)
# print(sample2.shape)
# [[7. 7. 7. 7. 7.]
#  [7. 7. 7. 7. 7.]
#  [7. 7. 7. 7. 7.]
#  [7. 7. 7. 7. 7.]
#  [7. 7. 7. 7. 7.]]
</span></code></pre></div></div>

<h2 id="numpyarange">numpy.arange</h2>
<p><code class="language-plaintext highlighter-rouge">range</code> 함수와 동일한 형태로 ndarray를 생성하는 방법 입니다.
<code class="language-plaintext highlighter-rouge">numpy.arange([start, ]stop, [step, ]dtype=None, *, like=None)</code>  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.arange.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="c1"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="c1"># array([0, 2, 4, 6, 8])
</span>
</code></pre></div></div>

<p><a href="https://www.youtube.com/watch?v=mirZPrWwvao" target="_blank">학습 내용 참고처</a></p>

<p><span class="nav__sub-title">관련된 글 (python &gt; lecture-python-basic)</span></p>
<ul>

    

    

    

    

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_10_package/">[Python Basic] 모듈 만들기, 패키지 만들기</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_09_exception/">[Python Basic] 예외처리</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_08_class/">[Python Basic] Class</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_07_function/">[Python Basic] 함수</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_06_set/">[Python Basic] 자료형 set 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_05_dictionary/">[Python Basic] 자료형 dictionary 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_04_tuple/">[Python Basic] 자료형 tuple 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_03_list/">[Python Basic] 자료형 list 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_02_init/">[Python Basic] 기본 자료 및 조건문</a></li>
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_01_install/">[Python Basic] 설치</a></li>
             
        
      

    

    

    

    

</ul>]]></content><author><name>devjaedol</name></author><category term="python" /><category term="python" /><category term="python강좌" /><category term="lecture-python-numpy" /><category term="numpy" /><summary type="html"><![CDATA[Numpy(Numerical Python) 는 python으로 행열 연산 등 대규모 다타원 배열과 행열 연산 등에 사용할 수 있는 라이브러 입니다. python이 데이터 분석 머신너링에 이용되기 위해서 데이터 전처리 등의 과정을 거치는데 numpy는 이런 전처리 과정에 사용됩니다. 기본적은 사용법을 배워보겠습니다. Array creation routines : API 참조]]></summary></entry><entry><title type="html">[Python][Numpy] 배열 사용(Array manipulation)</title><link href="https://kimjaehyun.co.kr/python/python_study_numpy_02_manage/" rel="alternate" type="text/html" title="[Python][Numpy] 배열 사용(Array manipulation)" /><published>2022-06-24T00:00:00-05:00</published><updated>2022-06-24T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/python/python_study_numpy_02_manage</id><content type="html" xml:base="https://kimjaehyun.co.kr/python/python_study_numpy_02_manage/"><![CDATA[<p>이번에는 <code class="language-plaintext highlighter-rouge">Numpy(Numerical Python)</code> 배열을 조작하는 내용을 주로 공부해 보겠습니다.</p>

<p>Numpy 홈페이지 : <a href="https://numpy.org/doc" target="_blank">numpy.org</a>     <br />
Array manipulation routines :  <a href="https://numpy.org/doc/stable/reference/routines.array-manipulation.html" target="_blank">API 참조</a></p>

<h1 id="numpy-조작">numpy 조작</h1>

<h2 id="배열-정보">배열 정보</h2>
<p>배열 정보 확인을 위해서 아래 배열 함수를 작성하겠습니다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">항목</th>
      <th style="text-align: center">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">ndim</td>
      <td style="text-align: center">배열 차원</td>
    </tr>
    <tr>
      <td style="text-align: center">shape</td>
      <td style="text-align: center">배열 shape</td>
    </tr>
    <tr>
      <td style="text-align: center">dtype</td>
      <td style="text-align: center">배열 데이터 타입</td>
    </tr>
    <tr>
      <td style="text-align: center">size</td>
      <td style="text-align: center">배열 요소 수</td>
    </tr>
    <tr>
      <td style="text-align: center">itemsize</td>
      <td style="text-align: center">배열 각 맴버의 바이트 크기</td>
    </tr>
    <tr>
      <td style="text-align: center">nbytes</td>
      <td style="text-align: center">배열의 요소가 소비 한 총 바이트</td>
    </tr>
    <tr>
      <td style="text-align: center">strides</td>
      <td style="text-align: center">배열을 탐색 할 때 각 차원에서 단계별로 이동할 바이트 수</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ainfo</span><span class="p">(</span><span class="n">array</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"ndim : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">ndim</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"shape : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"dytpe : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">dtype</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"size : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"itemsize : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">itemsize</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"nbytes : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">nbytes</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"strides : "</span><span class="p">,</span> <span class="n">array</span><span class="p">.</span><span class="n">strides</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>

<span class="nf">ainfo</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]))</span>
<span class="c1"># ndim :  1
# shape :  (5,)
# dytpe :  int32
# size :  5
# itemsize :  4
# nbytes :  20
# strides :  (4,)
# [1 2 3 4 5]
</span>

</code></pre></div></div>

<h2 id="기본-인덱싱">기본 인덱싱</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]);</span>
<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]])</span>
<span class="n">a3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span> <span class="p">[</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]],</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]],</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]]</span>
<span class="p">])</span>

<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>           <span class="c1"># [1 2 3 4 5]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>        <span class="c1"># 1
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>        <span class="c1"># 2
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>        <span class="c1"># 3
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>       <span class="c1"># 4
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>       <span class="c1"># 5
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>      <span class="c1"># 1
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>      <span class="c1"># 3
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>      <span class="c1"># 5
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>     <span class="c1"># 9
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>    <span class="c1"># 1
</span><span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>    <span class="c1"># 5
</span><span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 9
</span>
</code></pre></div></div>

<h2 id="boolean-indexing">Boolean Indexing</h2>
<p><code class="language-plaintext highlighter-rouge">True</code> 값인 인덱스의 배열을 생성 합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>
<span class="n">bi</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">bi</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="n">bi</span><span class="p">])</span>

<span class="c1">#[1 2 3 4 5]
#[False, True, True, False, True]
#[2 3 5]
</span>

<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="n">bi</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">bi</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="n">bi</span><span class="p">])</span>

<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="c1"># [[ True  True False]
#  [ True False  True]
#  [False False  True]]
</span> 
<span class="c1">#  [1 2 4 6 9] or random으로 선택된 배열이 출력됨
</span></code></pre></div></div>

<h2 id="fancy-indedxing">Fancy Indedxing</h2>
<p><code class="language-plaintext highlighter-rouge">index 번호</code>에 해당하는 데이터로 배열을 생성 합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>                   <span class="c1"># [1 2 3 4 5]
</span><span class="nf">print</span><span class="p">([</span><span class="n">a1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">a1</span><span class="p">[</span><span class="mi">2</span><span class="p">]])</span>        <span class="c1"># [1, 3]
</span><span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>            <span class="c1"># [1 3]  
</span>


<span class="c1">#2차원으로 전달할 경우, 출력도 2차원으로 반환됨
</span><span class="n">index</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">0</span><span class="p">]])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
<span class="c1"># [[0 1]
#  [2 0]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>  
<span class="c1"># [[1 2]
#  [3 1]]
</span>
<span class="c1"># 복합으로 인덱스를 만들어서 제공할 경우에도 출력됨
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span><span class="n">row</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="n">col</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">])</span>         <span class="c1"># [2 9]
#위 (0,1) (2,2) 에 해당하는 값이 [2 9] 출력됨
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="p">:])</span>  
<span class="c1"># [[1 2 3]
#  [7 8 9]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[:,</span> <span class="n">col</span><span class="p">])</span> 
<span class="c1"># [[2 3]
#  [5 6]
#  [8 9]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="mi">1</span><span class="p">])</span>
<span class="c1"># [2 8]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">col</span><span class="p">])</span>
<span class="c1"># [8 9]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="mi">1</span><span class="p">:])</span>
<span class="c1"># [[2 3]
#  [8 9]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">1</span><span class="p">:,</span> <span class="n">col</span><span class="p">])</span>  
<span class="c1"># [[5 6]
#  [8 9]]
</span>
</code></pre></div></div>
<p>Fancy Indedxing 은 배열의 재정의 뿐 아니라, 배열의 연산에도 사용될 수 있습니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
<span class="n">i</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>   <span class="c1"># [1 0 3 0 0]   i의 index 번호의 값이 0으로 초기화됨 
</span>
<span class="n">a1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span><span class="mi">4</span> <span class="c1"># i가 있는 index에 +4 가 된것을 확인함.
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>   <span class="c1"># [1 4 3 4 4]
</span></code></pre></div></div>

<h2 id="슬라이싱">슬라이싱</h2>
<p><code class="language-plaintext highlighter-rouge">list</code> 형의 슬라이싱과 동일한 비슷한 형태로 제공합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>       <span class="c1">#[1 2 3 4 5]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span>  <span class="c1">#[1 2]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[</span><span class="mi">0</span><span class="p">:])</span>   <span class="c1">#[1 2 3 4 5]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[:</span><span class="mi">1</span><span class="p">])</span>   <span class="c1">#[1]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[::</span><span class="mi">2</span><span class="p">])</span>  <span class="c1">#[1 3 5]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1">#[5 4 3 2 1]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">[:])</span>    <span class="c1">#[1 2 3 4 5]
</span>

<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>            <span class="c1"># [4 5 6]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="p">:])</span>         <span class="c1"># [4 5 6]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[:</span><span class="mi">2</span><span class="p">,:</span><span class="mi">2</span><span class="p">])</span>
<span class="c1"># [[1 2]
#  [4 5]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[</span><span class="mi">1</span><span class="p">:,::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
<span class="c1"># [[6 5 4]
#  [9 8 7]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">,::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
<span class="c1"># [[9 8 7]
#  [6 5 4]
#  [3 2 1]]
</span>

<span class="n">a2_sub</span> <span class="o">=</span> <span class="n">a2</span><span class="p">[:</span><span class="mi">2</span><span class="p">,:</span><span class="mi">2</span><span class="p">];</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2_sub</span><span class="p">)</span>
<span class="c1"># [[1 2]
#  [4 5]]
</span>
<span class="n">a2_sub</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>     <span class="c1"># 값을 변경함.
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2_sub</span><span class="p">)</span>
<span class="c1"># [[1 0]
#  [4 0]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span> <span class="c1">#numpy의 slicing 했을떄 원본도 값이 변경됨
# [[1 0 3]
#  [4 0 6]
#  [7 8 9]]
</span>
<span class="c1"># a2_sub = a2[:2,:2].copy() 로 복사본 사용시 원본과 분리됨.
</span></code></pre></div></div>

<h2 id="numpyinsert">numpy.insert</h2>
<p>배열에 데이터를 삽입을 학습하겠습니다.   <br />
<code class="language-plaintext highlighter-rouge">numpy.insert(arr, obj, values, axis=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.insert.html" target="_blank">API 참조</a>   <br />
데이터를 추가할때 <code class="language-plaintext highlighter-rouge">axis</code>을 추가할 수 있는데, <code class="language-plaintext highlighter-rouge">axis=0</code>는 <code class="language-plaintext highlighter-rouge">행</code>, <code class="language-plaintext highlighter-rouge">axis=1</code>은 <code class="language-plaintext highlighter-rouge">열</code>으로 인식합니다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>   <span class="c1"># [1 2 3 4 5]
</span><span class="n">b1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">#0번째 10값을 추가해서 b1 새로운 array를 반환함
</span><span class="nf">print</span><span class="p">(</span><span class="n">b1</span><span class="p">)</span>   <span class="c1"># [10  1  2  3  4  5]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>   <span class="c1"># [1 2 3 4 5]
</span>

<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="n">b2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b2</span><span class="p">)</span>

<span class="c1"># [[ 1  2  3]
#  [10 10 10]           &lt;- 1번 째 10 값을 axis=0(행) 단위로 추가함
#  [ 4  5  6]
#  [ 7  8  9]]
</span> 
<span class="n">b2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b2</span><span class="p">)</span>

<span class="c1"># &lt;- 1번 째 10 값을 axis=1(열) 단위로 추가함
# [[ 1 10  2  3]    
#  [ 4 10  5  6]
#  [ 7 10  8  9]]
</span></code></pre></div></div>

<h2 id="numpydelete">numpy.delete</h2>
<p>배열에 데이터를 삽입을 학습하겠습니다.   <br />
<code class="language-plaintext highlighter-rouge">numpy.delete(arr, obj, axis=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.delete.html" target="_blank">API 참조</a>   <br />
데이터를 삭제할때 <code class="language-plaintext highlighter-rouge">axis</code>을 추가할 수 있는데, <code class="language-plaintext highlighter-rouge">axis=0</code>는 <code class="language-plaintext highlighter-rouge">행</code>, <code class="language-plaintext highlighter-rouge">axis=1</code>은 <code class="language-plaintext highlighter-rouge">열</code>으로 인식합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># 1차원에서 배열 삭제
</span><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>               <span class="c1"># [1 2 3 4 5]
</span><span class="n">b1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">a1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>   
<span class="nf">print</span><span class="p">(</span><span class="n">b1</span><span class="p">)</span>               <span class="c1"># [1 3 4 5]
</span><span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">)</span>               <span class="c1"># [1 2 3 4 5] 원본 배열은 값을 유지함
</span>
<span class="c1"># 2 차원에서 배열 삭제
</span><span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="n">b3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># axis = 0
</span><span class="nf">print</span><span class="p">(</span><span class="n">b3</span><span class="p">)</span>
<span class="c1"># 1번 행이 없어짐
# [[1 2 3]
#  [7 8 9]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="n">b4</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># axis = 1
# [[1 3]
#  [4 6]
#  [7 9]]
</span></code></pre></div></div>

<h2 id="numpyndarrayt">numpy.ndarray.T</h2>
<p><code class="language-plaintext highlighter-rouge">ndarray.T</code>로 데이터 형태를 피벗을 합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1"># 1차원은 변화 없음
</span><span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a1</span><span class="p">.</span><span class="n">T</span><span class="p">)</span>
<span class="c1"># [1 2 3 4 5]  
</span>

<span class="c1"># 2차원
</span><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">.</span><span class="n">T</span><span class="p">)</span> <span class="c1">#행열이 전환,
#  [[1 4 7]
#  [2 5 8]
#  [3 6 9]]
</span>
<span class="c1"># 3차원
</span><span class="n">a3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span> <span class="p">[</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]],</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]],</span>
    <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]]</span>
<span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a3</span><span class="p">.</span><span class="n">T</span><span class="p">)</span> 
<span class="c1"># [[[1 1 1]
#   [4 4 4]
#   [7 7 7]]
#  [[2 2 2]
#   [5 5 5]
#   [8 8 8]]
#  [[3 3 3]
#   [6 6 6]
#   [9 9 9]]]
</span>
<span class="c1"># [[[1 1 1][4 4 4][7 7 7]]
#  [[2 2 2][5 5 5][8 8 8]]
#  [[3 3 3][6 6 6][9 9 9]]]
</span>
<span class="n">a4</span> <span class="o">=</span> <span class="n">a3</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a4</span><span class="p">.</span><span class="n">T</span><span class="p">)</span> 
<span class="c1"># [[[1 2 3]
#   [4 5 6]
#   [7 8 9]]
</span>
<span class="c1">#  [[1 2 3]
#   [4 5 6]
#   [7 8 9]]
</span>
<span class="c1">#  [[1 2 3]
#   [4 5 6]
#   [7 8 9]]]
</span></code></pre></div></div>

<h2 id="numpyreshape">numpy.reshape</h2>
<p>배열의 shape 을 재 구조화 합니다. <br />
<code class="language-plaintext highlighter-rouge">numpy.reshape(a, newshape, order='C')[source]</code>  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.reshape.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">n1</span><span class="p">)</span>  <span class="c1"># [1 2 3 4 5 6 7 8 9]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">n1</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="c1"># 사이즈가 맞지 않는 경우, 다음 에러를 발생 시킵니다.
</span><span class="n">n2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">n2</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>

<span class="o">------------------------------------------------</span>
<span class="nb">ValueError</span>     <span class="nc">Traceback </span><span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">)</span>
<span class="n">Input</span> <span class="n">In</span> <span class="p">[</span><span class="mi">119</span><span class="p">],</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">cell</span> <span class="n">line</span><span class="p">:</span> <span class="mi">2</span><span class="o">&gt;</span><span class="p">()</span>
      <span class="mi">1</span> <span class="n">n2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="o">----&gt;</span> <span class="mi">2</span> <span class="nf">print</span><span class="p">(</span><span class="n">n2</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>

<span class="nb">ValueError</span><span class="p">:</span> <span class="n">cannot</span> <span class="n">reshape</span> <span class="n">array</span> <span class="n">of</span> <span class="n">size</span> <span class="mi">9</span> <span class="n">into</span> <span class="nf">shape </span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="numpyappend">numpy.append</h2>
<p>배열의 병합하는 역할을 진행 합니다.  <br />
<code class="language-plaintext highlighter-rouge">numpy.append(arr, values, axis=None)</code> <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.append.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="c1"># print(a2)
# [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="n">b2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">19</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b2</span><span class="p">)</span>
<span class="c1"># [[10 11 12]
#  [13 14 15]
#  [16 17 18]]
</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">b2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span> <span class="c1">#1차원으로 결과 반환
#[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18]
</span>
<span class="c1"># 축을 지정하여 추가함.
</span><span class="n">c2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">b2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># 행단위
</span><span class="nf">print</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span>

<span class="c1"># [[ 1  2  3]
#  [ 4  5  6]
#  [ 7  8  9]
#  [10 11 12]
#  [13 14 15]
#  [16 17 18]]
</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="n">b2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">c2</span><span class="p">)</span>

<span class="c1"># [[ 1  2  3 10 11 12]
#  [ 4  5  6 13 14 15]
#  [ 7  8  9 16 17 18]]
</span></code></pre></div></div>
<h2 id="numpystack">numpy.stack</h2>
<p>nparray의 축을 선택 하여 누적 시킵니다. 
<code class="language-plaintext highlighter-rouge">numpy.stack(arrays, axis=0, out=None)</code>   <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.stack.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
<span class="n">np</span><span class="p">.</span><span class="nf">stack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>       <span class="c1"># np.stack((a, b), axis=0) 과 동일
# array([[1, 2, 3],
#        [4, 5, 6]])
</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">])</span>
<span class="n">np</span><span class="p">.</span><span class="nf">stack</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># array([[1, 4],
#        [2, 5],
#        [3, 6]])
</span></code></pre></div></div>

<h2 id="numpyvstack">numpy.vstack</h2>
<p>nparray의 vertical 축의 병합 입니다. 
<code class="language-plaintext highlighter-rouge">np.append(a2, b2, axis=0)</code> 동일 결과를 나타납니다. 
<a href="https://numpy.org/doc/stable/reference/generated/numpy.vstack.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">((</span><span class="n">a2</span><span class="p">,</span><span class="n">b2</span><span class="p">))</span>
<span class="c1"># array([[ 1,  2,  3],
#        [ 4,  5,  6],
#        [ 7,  8,  9],
#        [10, 11, 12],
#        [13, 14, 15],
#        [16, 17, 18]])
</span></code></pre></div></div>

<h2 id="numpyhstack">numpy.hstack</h2>
<p>nparray의 horizontal 축의 병합 입니다. 
<code class="language-plaintext highlighter-rouge">np.append(a2, b2, axis=1)</code> 동일 결과를 나타납니다. 
<a href="https://numpy.org/doc/stable/reference/generated/numpy.hstack.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="nf">hstack</span><span class="p">((</span><span class="n">a2</span><span class="p">,</span><span class="n">b2</span><span class="p">))</span>
<span class="c1"># array([[ 1,  2,  3, 10, 11, 12],
#        [ 4,  5,  6, 13, 14, 15],
#        [ 7,  8,  9, 16, 17, 18]])
</span></code></pre></div></div>

<h2 id="numpyconcatenate">numpy.concatenate</h2>
<p>nparray를 연결 합니다. 
<code class="language-plaintext highlighter-rouge">numpy.concatenate((a1, a2, ...), axis=0, out=None, dtype=None, casting="same_kind")</code>
<a href="https://numpy.org/doc/stable/reference/generated/numpy.concatenate.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]])</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]])</span>
<span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="c1"># array([[1, 2],
#        [3, 4],
#        [5, 6]])
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="c1"># array([1, 2, 3, 4, 5, 6])
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">T</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># array([[1, 2, 5],
#        [3, 4, 6]])
</span>
<span class="c1"># a        +    b.T
# [[1, 2],    [[5],
# [3, 4]]     [6]]
</span>

<span class="n">a1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
<span class="n">b1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">])</span>
<span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">([</span><span class="n">a1</span><span class="p">,</span><span class="n">b1</span><span class="p">,</span><span class="n">c1</span><span class="p">])</span>
<span class="c1"># array([1, 3, 5, 2, 4, 6, 7, 8, 9])
</span>

<span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">([</span><span class="n">a2</span><span class="p">,</span><span class="n">a2</span><span class="p">])</span>
<span class="c1"># array([[1, 2, 3],
#        [4, 5, 6],
#        [1, 2, 3],
#        [4, 5, 6]])
</span>

<span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">([</span><span class="n">a2</span><span class="p">,</span><span class="n">a2</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># array([[1, 2, 3, 1, 2, 3],
#        [4, 5, 6, 4, 5, 6]])
</span>
<span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">([</span><span class="n">a2</span><span class="p">,</span><span class="n">a2</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="c1"># array([[1, 2, 3],
#        [4, 5, 6],
#        [1, 2, 3],
#        [4, 5, 6]])
</span>
</code></pre></div></div>

<h2 id="numpyvsplit">numpy.vsplit</h2>
<p>veritcal 기준으로 ndarrray를 분할 합니다.
<code class="language-plaintext highlighter-rouge">numpy.vsplit(ary, indices_or_sections)</code>  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.vsplit.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="n">b2</span><span class="p">,</span> <span class="n">b3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">vsplit</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b3</span><span class="p">)</span>
<span class="c1"># [[7 8 9]]
</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mf">16.0</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="c1"># array([[ 0.,   1.,   2.,   3.],
#        [ 4.,   5.,   6.,   7.],
#        [ 8.,   9.,  10.,  11.],
#        [12.,  13.,  14.,  15.]])
</span><span class="n">np</span><span class="p">.</span><span class="nf">vsplit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="c1"># [array([[0., 1., 2., 3.],
#        [4., 5., 6., 7.]]), 
#  array([[ 8.,  9., 10., 11.],
#        [12., 13., 14., 15.]])]
</span>
</code></pre></div></div>

<h2 id="numpyhsplit">numpy.hsplit</h2>
<p>Horizontal 기준으로 ndarrray를 분할 합니다.
<code class="language-plaintext highlighter-rouge">numpy.hsplit(ary, indices_or_sections)</code>  <br />
<a href="https://numpy.org/doc/stable/reference/generated/numpy.hsplit.html" target="_blank">API 참조</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a2</span><span class="p">)</span>
<span class="c1"># [[1 2 3]
#  [4 5 6]
#  [7 8 9]]
</span>
<span class="n">b2</span><span class="p">,</span> <span class="n">b3</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">hvsplit</span><span class="p">(</span><span class="n">a2</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b2</span><span class="p">)</span>
<span class="c1"># [[1 2]
#  [4 5]
#  [7 8]]
</span>
<span class="nf">print</span><span class="p">(</span><span class="n">b3</span><span class="p">)</span>
<span class="c1"># [[3]
#  [6]
#  [9]]
</span>
</code></pre></div></div>

<h1 id="numpyrandom">numpy.random</h1>
<p>자료를 임의로 만들어야 할때 자주 사용되는 라이브러리 입니다.</p>

<h2 id="numpyrandomrand">numpy.random.rand</h2>
<p>0~1의 균일분포 표준정규분포 난수를 생성하여 반환합니다.  <br />
<code class="language-plaintext highlighter-rouge">random.rand(d0, d1, ..., dn)</code>  <br />
<a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.rand.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="c1"># array([0.42734205, 0.95354301, 0.80731892, 0.6908605 , 0.64658099])
</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="c1"># array([[0.85155709, 0.25876853],
#        [0.63304735, 0.12171615],
#        [0.11996824, 0.71999629],
#        [0.45233059, 0.77861135],
#        [0.43984419, 0.69105062]])
</span>
</code></pre></div></div>

<h2 id="numpyrandomrandn">numpy.random.randn</h2>
<p>평균<code class="language-plaintext highlighter-rouge">0</code>, 표준편차 <code class="language-plaintext highlighter-rouge">1</code>인 가우시안 표준 정규분포의 난수를 생성하여 반환합니다.  <br />
<code class="language-plaintext highlighter-rouge">random.randn(d0, d1, ..., dn)</code>  <br />
<a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.randn.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="c1"># array([ 0.74225719, -0.39754649,  0.8966088 ,  0.30346421,  0.71134092])
</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randn</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
<span class="c1"># array([[-0.76182035, -0.51200261],
#        [ 0.51620442,  0.77368734],
#        [-0.23963806,  0.53549214],
#        [ 1.37556231, -0.87648979],
#        [ 0.51587644, -0.93696996]])
</span>
</code></pre></div></div>

<h2 id="numpyrandomrandint">numpy.random.randint</h2>
<p>범위내 int 타입의 난수를 생성하여 반환합니다.  <br />
<code class="language-plaintext highlighter-rouge">random.randint(low, high=None, size=None, dtype=int)</code>  <br />
<a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.randint.html" target="_blank">API 참조</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c1"># 0~9 까지의 임의의 수 반환
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1"># 5이상 ~ 10미만의 임의의 숫자 
</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="c1"># array([5, 3, 9, 1, 0])
</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="c1"># array([[2, 2, 3, 4],
#        [2, 4, 2, 4]])
</span>
</code></pre></div></div>

<p><a href="https://www.youtube.com/watch?v=mirZPrWwvao" target="_blank">학습 내용 참고처</a></p>

<p><span class="nav__sub-title">관련된 글 (python &gt; lecture-python-basic)</span></p>
<ul>

    

    

    

    

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_10_package/">[Python Basic] 모듈 만들기, 패키지 만들기</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_09_exception/">[Python Basic] 예외처리</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_08_class/">[Python Basic] Class</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_07_function/">[Python Basic] 함수</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_06_set/">[Python Basic] 자료형 set 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_05_dictionary/">[Python Basic] 자료형 dictionary 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_04_tuple/">[Python Basic] 자료형 tuple 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_03_list/">[Python Basic] 자료형 list 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_02_init/">[Python Basic] 기본 자료 및 조건문</a></li>
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_01_install/">[Python Basic] 설치</a></li>
             
        
      

    

    

    

    

</ul>]]></content><author><name>devjaedol</name></author><category term="python" /><category term="python" /><category term="python강좌" /><category term="lecture-python-numpy" /><category term="numpy" /><category term="manipulation" /><summary type="html"><![CDATA[이번에는 Numpy(Numerical Python) 배열을 조작하는 내용을 주로 공부해 보겠습니다.]]></summary></entry><entry><title type="html">[Python Basic] 모듈 만들기, 패키지 만들기</title><link href="https://kimjaehyun.co.kr/python/python_study_10_package/" rel="alternate" type="text/html" title="[Python Basic] 모듈 만들기, 패키지 만들기" /><published>2022-06-22T00:00:00-05:00</published><updated>2022-06-22T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/python/python_study_10_package</id><content type="html" xml:base="https://kimjaehyun.co.kr/python/python_study_10_package/"><![CDATA[<p>Python 만든 함수를 모듈화 또는 패키지화를 만들어 봅시다.  <br />
자주 사용하는 함수, 변수 또는 클래스 등을 재사용성을 높이기 위해서 모듈화를 진행할 수 있습니다.</p>

<h1 id="모듈-만들기">모듈 만들기</h1>
<p>함수에서 작성한 아래 함수를 <code class="language-plaintext highlighter-rouge">module.py</code> 로 작성합니다.</p>
<h2 id="modulepy">module.py</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">s</span>

</code></pre></div></div>

<p>모듈을 사용할 <code class="language-plaintext highlighter-rouge">main.py</code> 를 만듭니다. <br />
<code class="language-plaintext highlighter-rouge">module.py</code> 와 <code class="language-plaintext highlighter-rouge">main.py</code>는 동일 경로에 위치 합니다.</p>

<h2 id="mainpy">main.py</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">module</span> <span class="k">as</span> <span class="n">m</span>

<span class="n">c</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c1"># 3
</span></code></pre></div></div>

<h1 id="패키지-만들기">패키지 만들기</h1>
<h2 id="구성-형태">구성 형태</h2>
<p>위 모듈 만들기에서 만들어지는 모듈파일이 여러개로 구성될때, 여러 모듈을 기능에 맞게 패키지로 만들수 있습니다.    <br />
예를 들어 다음 모듈을 만들었다고 할때, 하나의 특정 폴더 <code class="language-plaintext highlighter-rouge">custom</code> 밑에 위치 시킵니다.</p>
<ul>
  <li>\main.py</li>
  <li>\custom\module_sum.py</li>
  <li>\custom\module_min.py</li>
  <li>\custom\module_max.py</li>
  <li>\custom\module_avg.py</li>
</ul>

<p>위와 같은 경우 아래와 같이 사용할 수 있습니다.</p>
<h2 id="mainpy-1">main.py</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">custom.module_sum</span> <span class="k">as</span> <span class="n">p</span>

<span class="n">c</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c1"># 3
</span></code></pre></div></div>
<h2 id="main-실행-구성">main 실행 구성</h2>
<p>실행 메인이 되는 함수를 파악하기 위해서 <code class="language-plaintext highlighter-rouge">__name__</code> 속성을 통해서 실행 주체를 확인 할 수 있습니다. <br />
<code class="language-plaintext highlighter-rouge">main()</code> 함수를 <code class="language-plaintext highlighter-rouge">__name__ == "__main__"</code> 조건에 맞을 경우에만 실행하도록 할 수 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">custom.module_sum</span> <span class="k">as</span> <span class="n">p</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="c1"># 3
</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>  
    
</code></pre></div></div>

<p><span class="nav__sub-title">관련된 글 (python &gt; lecture-python-basic)</span></p>
<ul>

    

    

    

    

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_10_package/">[Python Basic] 모듈 만들기, 패키지 만들기</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_09_exception/">[Python Basic] 예외처리</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_08_class/">[Python Basic] Class</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_07_function/">[Python Basic] 함수</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_06_set/">[Python Basic] 자료형 set 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_05_dictionary/">[Python Basic] 자료형 dictionary 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_04_tuple/">[Python Basic] 자료형 tuple 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_03_list/">[Python Basic] 자료형 list 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_02_init/">[Python Basic] 기본 자료 및 조건문</a></li>
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_01_install/">[Python Basic] 설치</a></li>
             
        
      

    

    

    

    

</ul>]]></content><author><name>devjaedol</name></author><category term="python" /><category term="python" /><category term="python강좌" /><category term="초급" /><category term="lecture-python-basic" /><category term="package" /><summary type="html"><![CDATA[Python 만든 함수를 모듈화 또는 패키지화를 만들어 봅시다. 자주 사용하는 함수, 변수 또는 클래스 등을 재사용성을 높이기 위해서 모듈화를 진행할 수 있습니다.]]></summary></entry><entry><title type="html">[Python Basic] 함수</title><link href="https://kimjaehyun.co.kr/python/python_study_07_function/" rel="alternate" type="text/html" title="[Python Basic] 함수" /><published>2022-06-22T00:00:00-05:00</published><updated>2022-06-22T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/python/python_study_07_function</id><content type="html" xml:base="https://kimjaehyun.co.kr/python/python_study_07_function/"><![CDATA[<h1 id="함수">함수</h1>
<h2 id="선언">선언</h2>
<p>자주 사용하는 기능을 Function으로 정의할 수 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#반환값이 있는 경우
</span><span class="k">def</span> <span class="nf">함수명</span><span class="p">(</span><span class="n">인자정의</span><span class="p">)</span>
    <span class="n">함수</span> <span class="n">내용부</span>
    <span class="k">return</span> <span class="n">반환값</span>

<span class="c1">#반환값이 없는 경우
</span><span class="k">def</span> <span class="nf">함수명</span><span class="p">(</span><span class="n">인자정의</span><span class="p">)</span>
    <span class="n">함수</span> <span class="n">내용부</span>

<span class="k">def</span> <span class="nf">함수명</span><span class="p">(</span><span class="n">인자정의</span><span class="p">)</span>
    <span class="n">함수</span> <span class="n">내용부</span>
    <span class="k">return</span>      <span class="c1">#값이 없는 경우 `None`
</span>
<span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
    <span class="k">return</span> <span class="n">s</span>
 
<span class="n">total</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>

</code></pre></div></div>

<p>단일 값 또는 다중 값(튜플)을 반환 할수 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">v1</span><span class="o">+</span><span class="n">v2</span>

<span class="n">total</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">total</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="mi">30</span>


<span class="c1">#다중값 반환 함수
</span><span class="k">def</span> <span class="nf">multi</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">):</span>
    <span class="n">s1</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span>
    <span class="n">s2</span> <span class="o">=</span> <span class="n">v1</span> <span class="o">-</span> <span class="n">v2</span>
    <span class="k">return</span> <span class="n">s1</span><span class="p">,</span> <span class="n">s2</span>

<span class="n">t1</span><span class="p">,</span> <span class="n">t2</span> <span class="o">=</span> <span class="nf">multi</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">30</span> <span class="mi">10</span>

<span class="n">t</span> <span class="o">=</span> <span class="nf">multi</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<h2 id="파라메터-초기값-설정">파라메터 초기값 설정</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#빈값 입력시 기본값으로 설정 
</span><span class="k">def</span> <span class="nf">sum</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">v1</span><span class="o">+</span><span class="n">v2</span>

<span class="n">s</span> <span class="o">=</span> <span class="nf">sum</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">15</span>
</code></pre></div></div>

<h2 id="파라메터-이름-설정">파라메터 이름 설정</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#이름으로 설정할 수 있습니다.
</span><span class="k">def</span> <span class="nf">info</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>

<span class="nf">info</span><span class="p">(</span><span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Hong Gil Dong'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Hong</span> <span class="n">Gil</span> <span class="n">Dong</span> <span class="mi">30</span>

</code></pre></div></div>

<h2 id="가변-길이-파라메터">가변 길이 파라메터</h2>
<p>가변 파라메터의 제약사항</p>
<ul>
  <li>가변 매개변수 뒤에는 일반 매개변수 올수 없음.</li>
  <li>가변 매개변수는 한개만 사용가능함.</li>
  <li>가변 매개변수 압 일반 매개변수의 기본값은 무시된다.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#가변형 파라메터 입력 
</span><span class="k">def</span> <span class="nf">keyList</span><span class="p">(</span><span class="o">*</span><span class="n">keys</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="nf">keyList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span>

<span class="c1">#일반 파라메터 , 가변형 파라메터 입력 
</span><span class="k">def</span> <span class="nf">keyList</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="n">keys</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>

<span class="nf">keyList</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="s">'a'</span> <span class="s">'b'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span>

<span class="c1"># 가변형 파라메터 + 키워드 일반 파라메터
</span><span class="k">def</span> <span class="nf">keyList</span><span class="p">(</span><span class="o">*</span><span class="n">keys</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">'abc'</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">keys</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">end</span><span class="p">)</span>

<span class="nf">keyList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">abc</span>

</code></pre></div></div>

<h2 id="함수내-값의-유지immutable-mutable">함수내 값의 유지(immutable, mutable)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="nb">list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
 
<span class="n">k</span> <span class="o">=</span> <span class="mi">10</span>       <span class="c1"># k는 int (immutable)
</span><span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>  <span class="c1"># l은 리스트 (mutable)
</span> 
<span class="nf">f</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">l</span><span class="p">)</span>      <span class="c1"># 함수 호출
</span><span class="nf">print</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>  <span class="c1"># 호출자 값 체크
# 출력: 10 [1, 2, 3, 0]
</span>
</code></pre></div></div>

<h1 id="python-함수-호출">python 함수 호출</h1>
<p><code class="language-plaintext highlighter-rouge">math</code> 함수를 예로 들어서 설명 합니다.</p>

<h2 id="전체-import">전체 import</h2>
<p><code class="language-plaintext highlighter-rouge">math</code> 전체를 import 후 호출 시 <code class="language-plaintext highlighter-rouge">math.xxx()</code>의 형태로 사용함.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">math</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="nf">fabs</span><span class="p">(</span><span class="o">-</span><span class="mi">7</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="일부-함수-import">일부 함수 import</h2>
<p><code class="language-plaintext highlighter-rouge">math</code> 전체가 아닌 일부 함수 import</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">math</span> <span class="kn">import</span> <span class="p">(</span><span class="n">acos</span><span class="p">,</span><span class="n">fabs</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="nf">fabs</span><span class="p">(</span><span class="o">-</span><span class="mi">7</span><span class="p">)</span>    <span class="c1"># math. 을 사용하지 않음
</span><span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="일부한개-함수-import">일부(한개) 함수 import</h2>
<p><code class="language-plaintext highlighter-rouge">math</code> 전체가 아닌 일부 함수 import</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">math</span> <span class="kn">import</span> <span class="n">fabs</span>
<span class="n">a</span> <span class="o">=</span> <span class="nf">fabs</span><span class="p">(</span><span class="o">-</span><span class="mi">7</span><span class="p">)</span>    <span class="c1"># math. 을 사용하지 않음
</span><span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="import-alias">import alias</h2>
<p><code class="language-plaintext highlighter-rouge">math</code> 전체가 아닌 일부 함수 import</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">math</span> <span class="kn">import</span> <span class="n">fabs</span> <span class="k">as</span> <span class="n">f</span>
<span class="n">a</span> <span class="o">=</span> <span class="nf">f</span><span class="p">(</span><span class="o">-</span><span class="mi">7</span><span class="p">)</span>    <span class="c1"># f로 사용함
</span><span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="함수가-가진-목록">함수가 가진 목록</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">dir</span><span class="p">(</span><span class="n">math</span><span class="p">)</span>
</code></pre></div></div>

<h1 id="python-내장-함수">python 내장 함수</h1>
<p>다음은 별도의 import없이 사용이 가능한 자주 사용하는 내장 함수 입니다.</p>
<ul>
  <li>len()</li>
  <li>type()</li>
  <li>int()</li>
  <li>str()</li>
  <li>round()</li>
  <li>abs()</li>
  <li>max()</li>
  <li>min()</li>
  <li>sum()</li>
  <li>sorted() , sort()  -&gt;   list.sort(), sorted(list)</li>
  <li>range()</li>
  <li>chr()</li>
  <li>ord()</li>
  <li>isalpha() -&gt; ‘a’.isalpha() True</li>
  <li>isalnum() -&gt; ‘123’.isalnum() True</li>
  <li>eval()  -&gt; eval(‘1+2’) , eval(‘round(1.2)’)</li>
</ul>

<p><span class="nav__sub-title">관련된 글 (python &gt; lecture-python-basic)</span></p>
<ul>

    

    

    

    

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_10_package/">[Python Basic] 모듈 만들기, 패키지 만들기</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_09_exception/">[Python Basic] 예외처리</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_08_class/">[Python Basic] Class</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_07_function/">[Python Basic] 함수</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_06_set/">[Python Basic] 자료형 set 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_05_dictionary/">[Python Basic] 자료형 dictionary 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_04_tuple/">[Python Basic] 자료형 tuple 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_03_list/">[Python Basic] 자료형 list 타입</a></li>
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
             
        
             
        
      

    
        
             
        
             
        
      

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_02_init/">[Python Basic] 기본 자료 및 조건문</a></li>
             
        
      

    
        
             
        
             
        
             
        
              
                <li><a href="/python/python_study_01_install/">[Python Basic] 설치</a></li>
             
        
      

    

    

    

    

</ul>]]></content><author><name>devjaedol</name></author><category term="python" /><category term="python" /><category term="python강좌" /><category term="초급" /><category term="lecture-python-basic" /><category term="function" /><summary type="html"><![CDATA[함수 선언 자주 사용하는 기능을 Function으로 정의할 수 있습니다. ```python #반환값이 있는 경우 def 함수명(인자정의) 함수 내용부 return 반환값]]></summary></entry></feed>