<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://kimjaehyun.co.kr/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kimjaehyun.co.kr/" rel="alternate" type="text/html" /><updated>2022-05-27T09:51:43-05:00</updated><id>https://kimjaehyun.co.kr/feed.xml</id><title type="html">꿰보노트</title><subtitle>프로그래밍과 소프트웨어 정보 및 클라우드 개발에 대한 정보를 공유하는 블로그 입니다. 꿰보노트 / 꿰보Note / 꿰어야 보배</subtitle><author><name>devjaedol</name></author><entry><title type="html">Serverless Concept</title><link href="https://kimjaehyun.co.kr/cloud/AWS-S3_01/" rel="alternate" type="text/html" title="Serverless Concept" /><published>2022-05-27T00:00:00-05:00</published><updated>2022-05-27T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/cloud/AWS-S3_01</id><content type="html" xml:base="https://kimjaehyun.co.kr/cloud/AWS-S3_01/"><![CDATA[<p>라떼는 말이야…. <br />
웹서비스 개발을 배울때 서버를 설정하고, HW를 구축하는 것을 배우던 시대가 있었는데…  <br />
서버의 일부 공간을 빌려서 인스턴스를 사용하던 방식에서 진일보하여,
이제는 Serverless 방식의 서비스가 대세 이네요.
Serverless의 컨셉을 알아보고, 공부를 시작해 봅시다.  <br />
AWS 에서 정의된 클라우드 컴퓨팅 내용  <br />
<code class="language-plaintext highlighter-rouge">클라우드 컴퓨팅은 IT 리소스를 인터넷을 통해서 온디맨드(수요에 반응함)로 제공하고 사용한 만큼만 비용을 지불하는것을 말합니다.</code></p>

<h2 id="serverless-뭔지요">Serverless 뭔지요?</h2>
<p>운영하는 서버 없이, 호출될때 기능을 처리하고 응답하는 서비스 형태 입니다.</p>

<ul>
  <li>AWS : AWS Lambda</li>
  <li>MS Azure : Azure Functions</li>
  <li>Google Cloud Platform : Cloud Functions</li>
</ul>

<h3 id="고전-방식">고전 방식</h3>
<p>기존 웹서비스를 진행 할때의 방식은 Apache, Tomcat과 같이 웹서버를 HW웨어에 운영하고, 해당 서버에 맞는 Server Side 언어로 서비스를 개발 했었죠. <br />
서버 관리자, 운영자 등이 존재 했었고, 서버실도 있는 곳도 있고, 서버를 24시간 운영하기 위해서 IDC란 곳에 서버를 파킹(돈내고 서버를 주차) 했었습니다.</p>

<h3 id="cloud-서비스-출현aws-zure-google-등">Cloud 서비스 출현(AWS, Zure, Google 등)</h3>
<p>간단한 서비스를 개발하는데, 고전 방식은 너무 많은 범위의 지식이 필요하고, 때에 따라서는 사람도 많이 필요 했었죠.
Cafe24와 같은 호스팅 업체들은 돈에 따라서 서버를 함께 공유 사용하는 방식이지만,그래도 서버를 설정하고 개발하는데 약간은 전문지식이 필요했습니다. <br />
AWS, Zure, Google Cloud Platoform 을 사욯해보면, 버튼 몇번에 서버가 만들어지기도, 없어지기도 하며, 특히 서울에 만들수도 있고, 미국, 브라질 등 어디에 구축할지를 Selectbox로 간단히 선택하면 됩니다. <br />
단지 등록된 신용카드에 비용만 지불하면 되는 방식으로 간단히 운영이 가능합니다. <br />
이전 서버관리자의 역할을 AWS와 같은 서비스가 대신 해주는 것으로 보시면 됩니다. <br />
실시간으로 언제 어디서나 간단하게 서버를 만들고, 접속할 수있게 해주는 서비스로 보시면 됩니다.</p>

<h3 id="serverless-를-왜-쓰는지">Serverless 를 왜 쓰는지?</h3>
<p>직접 서버를 운영하는 것에 대비 Cloud 서비스는 편리하지만, 비용적 부담이 존재합니다. <br />
만약 제가 제공하는 서비스가 특정 시간에만 사용되는 시스템일 경우, 
특정 시간 서비스를 위해서 24시간 서버를 빌려서 대기하게 됩니다.
이런 경우 비용 낭비가 생길수 있습니다.
물론 Cloud는 미사용시간에 서버의 성능을 최소화(Scale Up/Down, Scale In/Out) 하는 기능이 있지만, 그래도 최소한의 서버가 고객을 대기해야되는 상황 입니다.</p>

<p>Serverless 이런 문제를 해결하고자 하는 방향을 가지고 있습니다.
내 서비스 기능의 code를 함수처럼 일정 룰에 맞게 작성하여, Cloud 서비스 업체한테 사전에 등록해 놓는 것입니다.
서비스 요청이 오면, Cloud업체에서 사전에 등록한 기능을 실행해 주는 것 입니다.  <br />
저는 더 이상 24시간 운영되는 서버가 없어도 되지요.</p>

<p>가격과 사용 참고를 AWS에서는 잘 설명이 되어 있습니다.</p>
<ul>
  <li><a href="https://aws.amazon.com/ko/lambda/pricing/" target="_blank">AWS Lambda 비용과 사용 참고 상황</a></li>
</ul>

<p>언제나 동전에 양면 처럼 장점만 있는 것은 아닙니다. <br />
단점으로는</p>

<ul>
  <li>플랫폼에 의존성이 일부 있습니다.  <br />
AWS를 사용하여 코드를 작성하면, Azure로 이사가려면, 코드를 100%재활용이 안됩니다. 물론 변환해주는 일부 플랫폼이 있긴하자만, 완벽하진 않습니다.)</li>
  <li>함수가 호출될때, 상황에 따라서는 약간의 기동시간이 필요합니다.
– 콜드 스타트(Clod Starts) : 함수가 기동하기 위해서 시간이 필요한 상황…
– 웜 스타트(Warm Start) : 한번 호출후 일정시간은 대기하는데, 대기중에 재호출되는 상황…</li>
  <li>상태 관리의 어려움 존재 <br />
Stateless Function으로 A함수, B함수가 동일 사용자가 호출하여도 A와 B는 동일 인인지 확인되지 않습니다. 매번 새로운 컨테이너를 통해 호출하는 컨셉으로 상태 관리를 하는 코드 형태로 작성이 되어야 합니다.</li>
</ul>

<h2 id="serverless-개발-프레임워크">Serverless 개발 프레임워크</h2>

<p>Serverless는 다양한 언어로 개발이 가능합니다. <br />
적절한 언어를 선택하셔서 개발하면 됩니다.</p>

<ul>
  <li>AWS Lambda : Java, Go, PowerShell, Node.js, C#, Python , Ruby 등
<a href="https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/lambda-runtimes.html" target="_blank">AWS Lambda 지원 언어</a></li>
  <li>Azure Functions : C#, Java, Javascript, PowerShell, Python, TypeScript, Go, Rust 등
<a href="https://docs.microsoft.com/ko-kr/azure/azure-functions/supported-languages" target="_blank">Azure Functions 지원 언어</a></li>
  <li>Google Cloud Functions : Node.js, Python, Go, Java, .Net, Ruby, PHP 등
<a href="https://cloud.google.com/functions/docs/concepts?hl=ko" target="_blank">Google Cloud Functions 지원 언어</a></li>
</ul>

<p>개발은 Cloud 서비스 제공가 제공 하는 방식에 따라서 다르지만, 
일반적으로 기존 방식과 유사하게 개발할 수 있도록 지원해주는 3rd Party Framwork library가 존재합니다.
예를들면 Node.js로 AWS를 개발할때, <code class="language-plaintext highlighter-rouge">serverless</code>는 매우 편리하고 빠르게 개발 할 수 있게 지원해주는 npm library 입니다.</p>

<pre><code class="language-txt"> _______                             __
|   _   .-----.----.--.--.-----.----|  .-----.-----.-----.
|   |___|  -__|   _|  |  |  -__|   _|  |  -__|__ --|__ --|
|____   |_____|__|  \___/|_____|__| |__|_____|_____|_____|
|   |   |             The Serverless Application Framework
|       |                           serverless.com, v2.52.1
 -------'
</code></pre>

<p><img src="https://camo.githubusercontent.com/108c301af486eeb9afde6ec9d6c98aaa5b1b2c14becaab3b781c22b851687e9c/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6173736574732e6769746875622e7365727665726c6573732f726561646d652d7365727665726c6573732d6672616d65776f726b2e676966" alt="Serverless" /></p>

<ul>
  <li><a href="https://www.serverless.com/" target="_blank">https://www.serverless.com/</a></li>
  <li><a href="https://www.npmjs.com/package/serverless" target="_blank">https://www.npmjs.com/package/serverless</a></li>
</ul>]]></content><author><name>devjaedol</name></author><category term="cloud" /><category term="AWS" /><category term="Lambda" /><category term="Azure" /><category term="Functinos" /><category term="Google" /><category term="Cloud Functions" /><summary type="html"><![CDATA[라떼는 말이야…. 웹서비스 개발을 배울때 서버를 설정하고, HW를 구축하는 것을 배우던 시대가 있었는데… 서버의 일부 공간을 빌려서 인스턴스를 사용하던 방식에서 진일보하여, 이제는 Serverless 방식의 서비스가 대세 이네요. Serverless의 컨셉을 알아보고, 공부를 시작해 봅시다. AWS 에서 정의된 클라우드 컴퓨팅 내용 클라우드 컴퓨팅은 IT 리소스를 인터넷을 통해서 온디맨드(수요에 반응함)로 제공하고 사용한 만큼만 비용을 지불하는것을 말합니다.]]></summary></entry><entry><title type="html">[AWS S3] Simple Storage Service 서비스 사용</title><link href="https://kimjaehyun.co.kr/cloud/cloud_what_is_serverless-copy/" rel="alternate" type="text/html" title="[AWS S3] Simple Storage Service 서비스 사용" /><published>2022-05-27T00:00:00-05:00</published><updated>2022-05-27T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/cloud/cloud_what_is_serverless%20copy</id><content type="html" xml:base="https://kimjaehyun.co.kr/cloud/cloud_what_is_serverless-copy/"><![CDATA[<h1 id="s3란-simple-storage-service">S3란 (Simple Storage Service)</h1>
<p>Cloud내 File를 저장하기 위해서 사용함.  <br />
특징</p>
<ul>
  <li>99.999999999% 내구성</li>
  <li>객체 스토리지 서비스
    <ul>
      <li>반대 서비스, Block Storage Serivce (EBS, EFS등)</li>
    </ul>
  </li>
  <li>무제한 확장 가능
    <ul>
      <li>객체 한개는 (0byte~5TB 이내 조건)</li>
    </ul>
  </li>
  <li>Static web 서비스 기능 제공
    <ul>
      <li>서비스 도메인과 Buket명과 같음</li>
    </ul>
  </li>
  <li>암호화 및 보안 적용 지원
    <ul>
      <li>SSE S3(S3서비스가 알아서 암호화)</li>
      <li>SSE KMS(KMS 서비스를 토해서 암호화)</li>
      <li>SSE C (클라이언트가 제공한 암호 방식 사용)</li>
    </ul>
  </li>
  <li>Bucket 단위로 사용
    <ul>
      <li>Buket이름은 Unique함</li>
    </ul>
  </li>
</ul>

<h1 id="s3-구성">S3 구성</h1>
<ul>
  <li>key : 파일이름</li>
  <li>Value : 파일데이터</li>
  <li>Version id : 파일 버전</li>
  <li>ACL :  : 접근 권한</li>
  <li>Metadata :  파일 메타 정보</li>
</ul>

<h1 id="s3의-정적-호스팅-주소-형태">S3의 정적 호스팅 주소 형태</h1>
<p>주소 구조</p>
<ul>
  <li>https://Bucket이름.s3.리전명.amazoneaws.com/키이름</li>
  <li>https://s3.리전명.amazoneaws.com/Bucket이름/키이름</li>
</ul>

<h1 id="s3---glacier">S3 - Glacier</h1>
<ul>
  <li>아카이브용 저장소</li>
  <li>가격이 저렴함</li>
  <li>데이터 가져오는데 시간이 소요됨.</li>
</ul>

<h1 id="s3-보안">S3 보안</h1>
<p>정책 적용 설정 <br />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_12.png" alt="bucket 생성" />
<a href="https://awspolicygen.s3.amazonaws.com/policygen.html" target="_blank">AWS Policy Generator</a>  <br />
<a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/example-bucket-policies.html" target="_blank">AWS Policy Sample</a></p>

<h2 id="bucket-policy">Bucket policy</h2>
<ul>
  <li>Bucket 단위로 정책이 적용됨</li>
  <li>Version 문법의 작성 버전 ( 2008-10-17 or 2012-10-17 )</li>
  <li>Id : 아이디</li>
  <li>Statement
    <ul>
      <li>Sid : 구별을 위한 아이디</li>
      <li>Effect : 허가 여부 Allow or Deny</li>
      <li>Principal : 권한의 이용을 위한 Target을 선택함</li>
      <li>Action : 사용할 권한에 대한 동작</li>
      <li>Resource : 동작에 대상이 되는 리소스</li>
      <li>Condition : 동작에 대한 조건을 설정</li>
    </ul>
  </li>
</ul>

<h2 id="aclaccess-control-list">ACL(Access Control List)</h2>
<ul>
  <li>파일 단위로 정책이 적용됨</li>
</ul>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&lt;Sample&gt;</span><span class="w">
</span><span class="p">{</span><span class="w">
  </span><span class="nl">"Id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PolicyXXXXXXX"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"StmtXXXXXXXXXX"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"s3:GetObject"</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::버킷이름/*"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h1 id="s3-static-hosting-실습">S3 Static Hosting 실습</h1>
<h2 id="버킷-생성">버킷 생성</h2>
<h3 id="s3--create-bucket-화면">S3 &gt; Create Bucket 화면</h3>
<ul>
  <li>버킷 이름을 입력합니다.</li>
  <li>퍼블릭 엑세스가 가능하도록 보안을 해제 합니다.</li>
  <li>생성을 실행합니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_1.png" alt="bucket 생성" /></li>
</ul>

<h2 id="버킷-권한-설정">버킷 권한 설정</h2>
<ul>
  <li>Amazon S3 &gt; 버킷 &gt; (버킷이름) 을 선택합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">권한</code> 탭에서 <code class="language-plaintext highlighter-rouge">버킷정책</code> 편집을 실행 후 위 정책을 적용 합니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_13.png" alt="bucket 생성" />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_4.png" alt="bucket 생성" />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_5.png" alt="bucket 생성" /></li>
  <li>정책 수정시 주의 사항
    <ul>
      <li>Actions를 GetObject로 선택합니다.</li>
      <li>ARN이름은 버킷 초기 화면 속성에서 확인합니다.</li>
      <li>Principal을 모두 접근이 가능하도록 <code class="language-plaintext highlighter-rouge">*</code> 로 입력합니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_11.png" alt="bucket 생성" />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_12.png" alt="bucket 생성" /></li>
    </ul>
  </li>
</ul>

<h2 id="정적-웹-사이트-호스팅">정적 웹 사이트 호스팅</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">속성</code> 탭으로 이동 후 정적 웹사이트 호스팅으로 진입 합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">정적 웹 사이트 호스팅</code>을 활성화를 선택합니다.</li>
  <li>인덱스 문서 항목에 진입시 페이지 <code class="language-plaintext highlighter-rouge">index.html</code>를 입력 합니다.</li>
  <li>저장 후 <code class="language-plaintext highlighter-rouge">엔드포인트 주소</code>를 선택하면 정적 웹 호스팅이 된 것을 알 수 있습니다.
<img src="/assets/images_post/cloud/aws_s3/aws_s3_16.png" alt="bucket 생성" /></li>
</ul>

<h2 id="엔드포인트-주소를-도메인으로-연결">엔드포인트 주소를 도메인으로 연결</h2>
<p><code class="language-plaintext highlighter-rouge">Roue53 &gt; 호스팅영역 &gt; yourdomain &gt; 레코드 생성</code> 위치에서 하기 입력으로 subdomain 연결함</p>
<ul>
  <li>트레픽 라우팅 대상에서 <code class="language-plaintext highlighter-rouge">별칭</code> 사용 선택</li>
  <li>S3 웹 사이트 엔드포인트에 대한 별칭</li>
  <li>사용 리전 선택 (예) <code class="language-plaintext highlighter-rouge">아시아 태평양(서울) [ap-northeast-2]</code></li>
  <li>생성한 S3 엔드포인트 선택  <br />
<img src="/assets/images_post/cloud/aws_s3/aws_s3_17.png" alt="bucket 생성" /></li>
</ul>

<p>일정시간 후 연결됨을 확인 할 수 있습니다.</p>]]></content><author><name>devjaedol</name></author><category term="cloud" /><category term="AWS" /><category term="Simple Storage Service" /><category term="S3" /><category term="File" /><category term="S3 Static Hosting" /><summary type="html"><![CDATA[S3란 (Simple Storage Service) Cloud내 File를 저장하기 위해서 사용함. 특징 99.999999999% 내구성 객체 스토리지 서비스 반대 서비스, Block Storage Serivce (EBS, EFS등) 무제한 확장 가능 객체 한개는 (0byte~5TB 이내 조건) Static web 서비스 기능 제공 서비스 도메인과 Buket명과 같음 암호화 및 보안 적용 지원 SSE S3(S3서비스가 알아서 암호화) SSE KMS(KMS 서비스를 토해서 암호화) SSE C (클라이언트가 제공한 암호 방식 사용) Bucket 단위로 사용 Buket이름은 Unique함]]></summary></entry><entry><title type="html">[AWS] 자주 쓰는 서비스</title><link href="https://kimjaehyun.co.kr/cloud/AWS-Service/" rel="alternate" type="text/html" title="[AWS] 자주 쓰는 서비스" /><published>2022-05-27T00:00:00-05:00</published><updated>2022-05-27T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/cloud/AWS-Service</id><content type="html" xml:base="https://kimjaehyun.co.kr/cloud/AWS-Service/"><![CDATA[<p>AWS에서 너무 많은 서비스가 있는데, 자주 쓰이는 것들과 어떤 서비스를 제공하는지 정도를 틈틈이 정리해보려고 합니다.</p>

<h2 id="iam-identity-and-access-management">IAM (Identity and Access Management)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_AWS-Identity-and-Access-Management_64.png" alt="IAM" width="48px&quot;, height=&quot;48px" />
AWS의 사용자 생성 그룹, 역할 등 서비스 및 리소스 접근 권한을 관리.</p>

<h2 id="ec2-elastic-compute-cloud">EC2 (Elastic Compute Cloud)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-EC2_64.png" alt="EC2" width="48px&quot;, height=&quot;48px" />
클라우드에서 인스턴스로 부르는 가상 컴퓨터(리눅서, window 등 다양한 OS 이미지로 생성이 가능함.)</p>

<h2 id="s3-simple-storage-service">S3 (Simple Storage Service)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-S3-on-Outposts_64.png" alt="S3" width="48px&quot;, height=&quot;48px" />
데이터 저장소로 File, image, movie등 무제한 확장이 가능한 저장소</p>

<h2 id="s3-glacier">S3 Glacier</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-Simple-Storage-Service-Glacier_64.png" alt="S3 Glacier" width="48px&quot;, height=&quot;48px" />
저비용, 장기 백업 서비스로 S3와 함께 사용하여 백업 등의 최적화 구성</p>

<h2 id="dynamodb">DynamoDB</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-DynamoDB_64.png" alt="DynamoDB" width="48px&quot;, height=&quot;48px" />
Key, Value 형태의 NOSQL Database 서비스</p>

<h2 id="rds-relational-database-service">RDS (Relational Database Service)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-RDS_64.png" alt="RDS" width="48px&quot;, height=&quot;48px" />
R-DBMS 를 Cloud로 서비스하는 것으로 사용 및 오픈소스 대부분의 RDBMS를 선택 가능함.  <br />
MySQL, Oracle, SQL Server, PostgreSQL, Maria DB</p>

<h2 id="aurora">Aurora</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-Aurora_64.png" alt="RDS" width="48px&quot;, height=&quot;48px" />
클라우드 전용을  아마존의 관계형 데이터 베이스로 MySQL, PostgreSQL 두개의 오픈소스를 지원</p>

<h2 id="api-gateway">API Gateway</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-API-Gateway_64.png" alt="API Gateway" width="48px&quot;, height=&quot;48px" />
웹어플리케이션 백엔드 구현에 필요한 API개발을 지원하고 ,  Lamdba, EC2기반 앱 개발 등을 지원</p>

<h2 id="cloudtrail">CloudTrail</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_AWS-CloudTrail_64.png" alt="CloudTrail" width="48px&quot;, height=&quot;48px" />
계정 내 API호출 내역과 사요자 액티비티 기록 서비스로 S3를 통해서 로그 파일을 제공함.</p>

<h2 id="cloudwatch">CloudWatch</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-CloudWatch_64.png" alt="CloudWatch" width="48px&quot;, height=&quot;48px" />
AWS 리소스와 애플리케이션을 모니터링 서비스, 각종 로그를 수집 분석하고 경고를 설정 가능함.</p>

<h2 id="lambda">Lambda</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_AWS-Lambda_64.png" alt="Lambda" width="48px&quot;, height=&quot;48px" /></p>

<h2 id="ses-simple-email-service">SES (Simple Email Service)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-Simple-Email-Service_64.png" alt="SES" width="48px&quot;, height=&quot;48px" />
이메일 설정 및 운영, 발송 등의 서비스를 제공.</p>

<h2 id="amazon-mq">Amazon MQ</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-MQ_64.png" alt="Amazon MQ" width="48px&quot;, height=&quot;48px" />
아마존의 메세지 큐 서비스.</p>

<h2 id="route-53">Route 53</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-Route-53_64.png" alt="Route 53" width="48px&quot;, height=&quot;48px" />
DNS의 역할로 Domain 정보를 AWS 서비스로 전달함.</p>

<h2 id="cloud-front">Cloud Front</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-CloudFront_64.png" alt="Cloud Front" width="48px&quot;, height=&quot;48px" />
글로벌 서비스를 위한 CDN(Content Delivery Network)서비스 제공.</p>

<h2 id="iot-core">IoT Core</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_AWS-IoT-Core_64.png" alt="IoT Core" width="48px&quot;, height=&quot;48px" />
사물인터넷에 사용되며 디바이스와 클라우드의 연결을 위한 플랫폼(MQTT 등의 방법 제공)</p>

<h2 id="vpc-virtual-private-cloud">VPC (Virtual Private Cloud)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-Virtual-Private-Cloud_64.png" alt="Virtual Private Cloud" width="48px&quot;, height=&quot;48px" />
VPC를 통해서만 가상 네트워크에서만 클라으드에 접근 할 수 있게 하는 기술.</p>

<h2 id="elb-elastic-load-balancing">ELB (Elastic Load Balancing)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Elastic-Load-Balancing_64.png" alt="Elastic Load Balancing" width="48px&quot;, height=&quot;48px" />
부하를 분산하는 L4 기능을 제공함.</p>

<h2 id="kms-key-management-service">KMS (Key Management Service)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_AWS-Key-Management-Service_64.png" alt="KMS" width="48px&quot;, height=&quot;48px" />
암호화 작업에 사용되는 키생성 및 통합 환경에서의 키관리 및 정책 정의.</p>

<h2 id="ebs-elastic-block-store">EBS (Elastic Block Store)</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-Elastic-Block-Store_64.png" alt="EBS" width="48px&quot;, height=&quot;48px" />
EC2 인스턴스를 위한 스토리리 서비스로 마그네틱 또는 SSD 를 선택 가능함.</p>

<h2 id="efs-elastic-file-system">EFS (Elastic File System)</h2>
<p><img src="/assets/images_post/cloud/aws/Res_Amazon-Elastic-File-System_Standard_48_Light.png" alt="EFS" width="48px&quot;, height=&quot;48px" />
EC2 인스턴스를 활용하기 위해서, 확정성이 높은 공유 스토리지 서비스로, 다수의 EC2에서 동시에 접속 할수 있다.</p>

<h2 id="elastic-transcoder">Elastic-Transcoder</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_Amazon-Elastic-Transcoder_64.png" alt="Elastic-Transcoder" width="48px&quot;, height=&quot;48px" />
비디오 및 오디를 디바이스에 적합한 형태로 파일을 포멧을 변환하기 위한 서비스</p>

<h2 id="snowball">Snowball</h2>
<p><img src="/assets/images_post/cloud/aws/Arch_AWS-Snowball_64.png" alt="Snowball" width="48px&quot;, height=&quot;48px" />
클라우드 안팎에서 페타바이트 규모의 데이터를 전송 할수 있는 기능 제공. 클라우드 백업 및 온프레미스 전송 등에 사용.</p>

<h2 id="aws-아키텍처-아이콘-다운로드">AWS 아키텍처 아이콘 다운로드</h2>
<p>간혹 아키텍처 자료를 만들때 있어보이게 만들수 있는 꿀 템플릿 입니다. <br />
<a href="https://aws.amazon.com/ko/architecture/icons/" target="_blank">서비스 아이콘 다운르도</a></p>]]></content><author><name>devjaedol</name></author><category term="cloud" /><category term="AWS" /><category term="Cloud" /><category term="IasS" /><category term="PaaS" /><category term="SaaS" /><category term="Region" /><category term="AZ" /><category term="ARN" /><summary type="html"><![CDATA[AWS에서 너무 많은 서비스가 있는데, 자주 쓰이는 것들과 어떤 서비스를 제공하는지 정도를 틈틈이 정리해보려고 합니다.]]></summary></entry><entry><title type="html">[AWS] 기초 개념</title><link href="https://kimjaehyun.co.kr/cloud/AWS-Basic/" rel="alternate" type="text/html" title="[AWS] 기초 개념" /><published>2022-05-27T00:00:00-05:00</published><updated>2022-05-27T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/cloud/AWS-Basic</id><content type="html" xml:base="https://kimjaehyun.co.kr/cloud/AWS-Basic/"><![CDATA[<p>AWS 에서 정의된 클라우드 컴퓨팅 내용  <br />
<code class="language-plaintext highlighter-rouge">클라우드 컴퓨팅은 IT 리소스를 인터넷을 통해서 온디맨드(수요에 반응함)로 제공하고 사용한 만큼만 비용을 지불하는것을 말합니다.</code>
쉽게 서버 자원이 필요할때 빌려 쓸수 있는 환경 정도로 이해….  <br />
Amazon.com에서 시작해서 2006년 S3/EC2를 출시하며 시작함.</p>

<h2 id="클라우드-컴퓨팅-모델">클라우드 컴퓨팅 모델</h2>
<ul>
  <li>IaaS : Infrastructure as a Service</li>
  <li>PaaS : Platform as a Service</li>
  <li>SaaS : Software as a Service</li>
</ul>

<table>
  <thead>
    <tr>
      <th>제공범위</th>
      <th style="text-align: center">IaaS</th>
      <th style="text-align: center">PaaS</th>
      <th style="text-align: center">SaaS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>APP</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>런타임</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>OS</td>
      <td style="text-align: center">미지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>H/W</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>스토리지</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
    <tr>
      <td>네트워킹</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
      <td style="text-align: center">지원</td>
    </tr>
  </tbody>
</table>

<h2 id="scale-up-scale-down">Scale-Up, Scale-Down</h2>
<p>Scale-Up, Scale-Down 은 Cloud 장치를 Spec을 올리거나 낮추는 의미로 사용됩니다.  <br />
예를들면 CPU, 메모리 등의 성능을 늘리는 것을 Scale-Up이라고 부르며, 낮추는 것을 Scale-Down 이라고 합니다.</p>

<h2 id="scale-in-scale-out">Scale-In, Scale-Out</h2>
<p>Scale-In, Scale-Out 은 클라우드 서비스 인스턴스 수를 병렬적으로 늘리거나 줄이는 것을 의미 합니다. 
1개의 인스턴스를 N개로 증설시키는 것을 Scale-Out이라고 하며, 반대로 줄이는 것을 Scale-In 이라고 합니다.</p>

<h2 id="클라우드-배포-모델">클라우드 배포 모델</h2>
<ul>
  <li>올인 클라우드</li>
  <li>하이브리드 클라우드</li>
  <li>온프레미스, 프라이빗 클라우드</li>
</ul>

<h2 id="aws-구조">AWS 구조</h2>
<ul>
  <li>AWS 여러 서비스
    <ul>
      <li>리전 Region(북미, 남미, 유럽, 서울, 도쿄 등등…)
        <ul>
          <li>가용영역 AZ(Availability Zone)
            <ul>
              <li>하나의 AZ는 여섯개의 데이터 센터로 구성됨.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>AWS는 기존의 AZ외 사용자는 많지만, 리전이 없는 지역에 로컬존(Local Zone)이 존재하는 경우도 있음.</li>
  <li>엣지 로케이션 또는 POP(Points Of Presence)로 부르는 접속 지점의 경우도 있음.</li>
  <li>리전별 서비스가 다를수 있음.</li>
  <li>미국 동부(버지니아 북부)리전 us-east-1 은 최초 출시된 리전으로 모든 서비스가 최초로 출시적용됨.</li>
  <li>하나의 리전은 2개 이상의 가용역역으로 구성</li>
  <li>모든 AZ는 100km 이내의 거리에 위치(재해 대비)</li>
  <li>리전간에는 일정 이상의 거리 이상 떨어져 있음(재해 대비)</li>
</ul>

<h2 id="aws-의-보인-인증검증-내역">AWS 의 보인 인증/검증 내역</h2>
<p>다양한 종류와 다양한 국가의 인증을 준수하고 있습니다.  <br />
자세한 내용은 아래 링크에서 확인 가능합니다.</p>

<p><a href="https://aws.amazon.com/ko/compliance/programs/" target="_blank">AWS 클라우드 보안</a></p>

<ul>
  <li>C5</li>
  <li>CMMC</li>
  <li>Cyber Essentials Plus</li>
  <li>DoD SRG</li>
  <li>ENS 상위</li>
  <li>FedRAMP</li>
  <li>FINMA</li>
  <li>FIPS</li>
  <li>GSMA</li>
  <li>HDS</li>
  <li>IRAP</li>
  <li>ISMAP</li>
  <li>ISO 9001</li>
  <li>ISO 27001</li>
  <li>ISO 27017</li>
  <li>ISO 27018</li>
  <li>K-ISMS</li>
  <li>MTCS 티어 3</li>
  <li>OSPAR</li>
  <li>PCI DSS 레벨 1</li>
  <li>SOC 1</li>
  <li>SOC 2</li>
  <li>SOC 3</li>
  <li>TISAX</li>
</ul>

<h2 id="aws-서비스-제공-지역에-따른-분류">AWS 서비스 제공 지역에 따른 분류</h2>
<h3 id="글로벌-서비스">글로벌 서비스</h3>
<p>글로벌이 단일 서비스로 묶이는 경우</p>
<ul>
  <li>CloudFront</li>
  <li>IAM</li>
  <li>Route53</li>
  <li>WAF</li>
</ul>

<h3 id="지역-서비스">지역 서비스</h3>
<p>특정 리전을 기반으로 서비스 제공</p>
<ul>
  <li>S3 (데이터는 리전에 종속됨)</li>
</ul>

<h2 id="arn-amazon-resource-name">ARN (Amazon Resource Name)</h2>
<p>아마존 리소스에 고유 이름으로 text형식으로 표현됨.  <br />
<a href="https://docs.aws.amazon.com/ko_kr/quicksight/latest/APIReference/qs-arn-format.html" target="_blank">ARN 형식</a></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">arn</span><span class="p">:</span><span class="nx">partition</span><span class="p">:</span><span class="nx">service</span><span class="p">:</span><span class="nx">region</span><span class="p">:</span><span class="nx">account</span><span class="o">-</span><span class="nx">id</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">arn</span><span class="p">:</span><span class="nx">partition</span><span class="p">:</span><span class="nx">service</span><span class="p">:</span><span class="nx">region</span><span class="p">:</span><span class="nx">account</span><span class="o">-</span><span class="nx">id</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">type</span><span class="o">/</span><span class="nx">resource</span><span class="o">-</span><span class="nx">id</span>
<span class="nx">arn</span><span class="p">:</span><span class="nx">partition</span><span class="p">:</span><span class="nx">service</span><span class="p">:</span><span class="nx">region</span><span class="p">:</span><span class="nx">account</span><span class="o">-</span><span class="nx">id</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">type</span><span class="p">:</span><span class="nx">resource</span><span class="o">-</span><span class="nx">id</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">partition</code> — 리소스가 있는 파티션입니다.  <br />
<code class="language-plaintext highlighter-rouge">service</code> — AWS 제품을 식별하는 서비스 네임스페이스입니다.   <br />
<code class="language-plaintext highlighter-rouge">region</code> — 리소스가 상주하는 AWS 리전입니다.  <br />
<code class="language-plaintext highlighter-rouge">account-id</code> — 리소스를 소유하는 AWS 계정의 ID입니다.(예: 123456789012).   <br />
<code class="language-plaintext highlighter-rouge">resource</code> 또는 <code class="language-plaintext highlighter-rouge">resource-typeARN</code> 이 부분의 내용은 서비스별로 다릅니다.
<code class="language-plaintext highlighter-rouge">*</code> - 와일드 카드를 통해 다수 적용 가능합니다.</p>]]></content><author><name>devjaedol</name></author><category term="cloud" /><category term="AWS" /><category term="Cloud" /><category term="IasS" /><category term="PaaS" /><category term="SaaS" /><category term="Region" /><category term="AZ" /><category term="ARN" /><summary type="html"><![CDATA[AWS 에서 정의된 클라우드 컴퓨팅 내용 클라우드 컴퓨팅은 IT 리소스를 인터넷을 통해서 온디맨드(수요에 반응함)로 제공하고 사용한 만큼만 비용을 지불하는것을 말합니다. 쉽게 서버 자원이 필요할때 빌려 쓸수 있는 환경 정도로 이해…. Amazon.com에서 시작해서 2006년 S3/EC2를 출시하며 시작함.]]></summary></entry><entry><title type="html">NodeJS 기초 정리 - 모듈화</title><link href="https://kimjaehyun.co.kr/nodejs/NodeJS_summary_module/" rel="alternate" type="text/html" title="NodeJS 기초 정리 - 모듈화" /><published>2022-01-22T00:00:00-06:00</published><updated>2022-01-22T00:00:00-06:00</updated><id>https://kimjaehyun.co.kr/nodejs/NodeJS_summary_module</id><content type="html" xml:base="https://kimjaehyun.co.kr/nodejs/NodeJS_summary_module/"><![CDATA[<h2 id="모듈-분리-방법">모듈 분리 방법</h2>
<p>로직을 기능별로 별도 파일을 분리하여 모듈화 할 수 있습니다.</p>

<h3 id="함수-분리">함수 분리</h3>
<p>exports.함수명 = 함수</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nx">main</span><span class="p">.</span><span class="nx">js</span>
<span class="kd">var</span> <span class="nx">module</span> <span class="o">=</span> <span class="nx">reqire</span><span class="p">(</span><span class="dl">"</span><span class="s2">./fn</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">함수명1</span><span class="p">();</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">함수명2</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">함수명3</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>

<span class="err">#</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">js</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">함수명1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
<span class="err">#</span><span class="p">....</span>
<span class="p">}</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">함수명2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
<span class="err">#</span><span class="p">....</span>
<span class="p">}</span>
<span class="nx">exports</span><span class="p">.</span><span class="nx">함수명3</span> <span class="o">=</span> <span class="p">{</span><span class="na">id</span><span class="p">:</span><span class="mi">123</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">홍길동</span><span class="dl">'</span><span class="p">};</span>
</code></pre></div></div>

<h3 id="객체-분리1">객체 분리(1)</h3>
<p>module.exports = 객체</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nx">main</span><span class="p">.</span><span class="nx">js</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">reqire</span><span class="p">(</span><span class="dl">"</span><span class="s2">./obj</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">fn1</span><span class="p">();</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">fn2</span><span class="p">();</span>


<span class="err">#</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">js</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">fn1</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
<span class="err">#</span><span class="p">....</span>
<span class="p">};</span>

<span class="nx">obj</span><span class="p">.</span><span class="nx">fn2</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
<span class="err">#</span><span class="p">....</span>
<span class="p">};</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="err">#</span><span class="nx">객체를</span> <span class="nx">할당함</span>
</code></pre></div></div>

<h3 id="객체-분리2">객체 분리(2)</h3>
<p>module.exports = 함수</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">#</span> <span class="nx">main</span><span class="p">.</span><span class="nx">js</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">reqire</span><span class="p">(</span><span class="dl">"</span><span class="s2">./obj</span><span class="dl">"</span><span class="p">)</span>
<span class="nx">obj</span><span class="p">().</span><span class="nx">id</span><span class="p">;</span>
<span class="nx">obj</span><span class="p">().</span><span class="nx">name</span><span class="p">;</span>


<span class="err">#</span> <span class="nx">obj</span><span class="p">.</span><span class="nx">js</span>
<span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="k">return</span> <span class="p">{</span><span class="na">id</span><span class="p">:</span><span class="mi">123</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">홍길동</span><span class="dl">'</span><span class="p">};</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span> <span class="err">#</span><span class="nx">함수를</span> <span class="nx">할당함</span>
</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="nodejs" /><category term="nodejs" /><summary type="html"><![CDATA[모듈 분리 방법 로직을 기능별로 별도 파일을 분리하여 모듈화 할 수 있습니다.]]></summary></entry><entry><title type="html">[Step 1] GitHub blog 만들기(jekyll 기본 설정)</title><link href="https://kimjaehyun.co.kr/etc/jekyll-git-blog_(1)/" rel="alternate" type="text/html" title="[Step 1] GitHub blog 만들기(jekyll 기본 설정)" /><published>2021-10-24T00:00:00-05:00</published><updated>2021-10-24T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/etc/jekyll-git-blog_(1)</id><content type="html" xml:base="https://kimjaehyun.co.kr/etc/jekyll-git-blog_(1)/"><![CDATA[<p>jekyll을 통해서 GitHub blog를 만들어 보겠습니다.   <br />
작업을 위한 필요 지식 수준은 GitHub에 저장소를 만들고 소스를 등록 및 업데이트 할수 있는 지식 수준이 필요합니다. <br />
최대한 단순하고 간략하게만 정리하도록 하겠습니다.</p>

<h2 id="jekyll-장단점-소개">Jekyll 장단점 소개</h2>

<p>jekyll을 통해서 Git blog를 운용시 다른 플랫폼이 제공하는 블로그에 비해서 장단점이 명확히 다릅니다.</p>

<p>장점으로는</p>

<ul>
  <li>Custmize. ( HTML 기반으로 모든 변경이 가능합니다.)</li>
  <li>다양한 Template ( 수많은 템플릿 중에 선택적으로 설치하여 사용이 가능합니다.)</li>
  <li>GitHub의 공간을 사용하므로, 별도의 호스팅 비용이 필요하지 않습니다.</li>
</ul>

<p>단점으로는</p>

<ul>
  <li>플랫폼이 제공하는 블로그에 비하면 강력하게 불편 합니다.</li>
  <li>손이 많이 갑니다.(Tistory처럼 단순히 글만 쓰면 되는 정도의 수준이 넘습니다.)</li>
  <li>HTML 등의 기초 홈페이지 관리에 대한 기본 지식이 필요합니다.</li>
  <li>로컬에서 뭔가 서버 개발 작업하듯이 설치와 설정을 꽤 많이 해야됩니다.</li>
</ul>

<p>이제 부터 간단히 블로그 생성 방법을 정리해 보겠습니다.</p>

<h2 id="ruby-설치">Ruby 설치.</h2>

<p>Jekyll은 Ruby를 통해서 구동됩니다.
설치 버전 Ruby+Devkit 2.6.6-1 (x64)</p>

<blockquote>
  <p><a href="https://rubyinstaller.org/downloads/archives/" title="루비 설치" target="_blank">Ruby 다운로드</a></p>
</blockquote>

<p>설치를 진행 합니다</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_1.png" alt="jekyll-github-blog-01_1" /></p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_2.png" alt="jekyll-github-blog-01_2" /></p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_3.png" alt="jekyll-github-blog-01_3" /></p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_4.png" alt="jekyll-github-blog-01_4" /></p>

<p>설치가 완료되면 다음과 같은 콘솔이 출력됩니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_5.png" alt="jekyll-github-blog-01_5" /></p>

<p>Which components shall be installed? If unsure press ENTER [1,3]</p>

<p>1 - MSYS2 base installation 을 선택 합니다.</p>

<p>Which components shall be installed? If unsure press ENTER[]</p>

<p>Enter를 입력 합니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_7.png" alt="jekyll-github-blog-01_7" /></p>

<h2 id="bundler-를-설치">bundler 를 설치</h2>

<p>CMD 창에 아래와 같이 명령어를 입력 합니다.</p>

<blockquote>
  <p>gem install bundler</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>C:\&gt;gem install bundler
    Fetching bundler-2.2.29.gem
    Successfully installed bundler-2.2.29g
    Parsing documentation for bundler-2.2.29
    Installing ri documentation for bundler-2.2.29
    Done installing documentation for bundler after 4 seconds
    1 gem installed
</code></pre></div></div>
<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_8.png" alt="jekyll-github-blog-01_8" /></p>

<h2 id="blog-설치-디렉토리-생성">Blog 설치 디렉토리 생성</h2>

<p>블로그 홈 서버를 실행할 작업 임시 경로를 선정하십시요.</p>

<p>저는 아래 경로에 임시로 작업을 진행 합니다.</p>

<p>D:\jekyll-blog</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c:\&gt;d:
d:\&gt;mkdir jekyll-blog
d:\&gt;cd jekyll-blog
d:\jekyll-blog&gt;
</code></pre></div></div>

<h2 id="테마-설치">테마 설치</h2>

<p>Jekyll 의 강력한 장점 중 하나가  다양한 테마 입니다.</p>

<p>아래 사이트 들은 Jekyll 테마를 모아놓은 사이트 입니다.</p>

<p>이곳에서 원하는 테마를 선택 하십시요.</p>

<ul>
  <li><a href="https://jekyll-themes.com/free/" target="_blank">https://jekyll-themes.com/free/</a></li>
  <li><a href="http://themes.jekyllrc.org" target="_blank">http://themes.jekyllrc.org</a></li>
  <li><a href="http://jekyllthemes.org" target="_blank">http://jekyllthemes.org</a></li>
  <li><a href="https://jekyllthemes.io/free" target="_blank">https://jekyllthemes.io/free</a></li>
  <li><a href="https://jekyllthemes.dev/" target="_blank">https://jekyllthemes.dev/</a></li>
  <li><a href="https://drjekyllthemes.github.io/new" target="_blank">https://drjekyllthemes.github.io/new</a></li>
</ul>

<p>저는 Minimal Mistakes Jekyll theme 라는 테마를 통해서 홈페이지를 꾸미고 있습니다.</p>

<p>본 테마는 꽤 인기있는 테마로 심플함이 최대 장점이라서 적용 했습니다.</p>

<ul>
  <li><a href="https://jekyllthemes.io/theme/minimal-mistakes" target="_blank">https://jekyllthemes.io/theme/minimal-mistakes</a></li>
  <li><a href="https://mmistakes.github.io/minimal-mistakes/docs/quick-start-guide/" target="_blank">데모사이트 -Guick start guide</a></li>
</ul>

<p>우선 해당 git에서 소스를 zip 형태로 다운 받습니다.</p>

<p><a href="https://github.com/mmistakes/minimal-mistakes" target="_blank">https://github.com/mmistakes/minimal-mistakes</a></p>

<p>다운로드한  Zip파일을 생성한 D:\jekyll-blog 에 풀어 놓습니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_9.png" alt="jekyll-github-blog-01_9" /></p>

<h2 id="bundle-설치">bundle 설치</h2>

<p>임시로 작업 폴더(테마가 다운된 경로)에서 번들 설치를 위한 다음 명령어를 입력 합니다.</p>

<blockquote>
  <p>bundle install</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d:\jekyll-blog&gt;bundle install
</code></pre></div></div>

<p>테마와 관련된 bundle이 모두 설치 됩니다.</p>

<p>유사 기능으로는 npm install, pip install 과 같이 관련 패키지 모두 자동화로 설치해주신다고 보면 됩니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_10.png" alt="jekyll-github-blog-01_10" /></p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_11.png" alt="jekyll-github-blog-01_11" /></p>

<h2 id="로컬-서비-시작">로컬 서비 시작</h2>

<p>테마가 다운된 경로에서 서비스를 시작 합니다</p>

<blockquote>
  <p>bundle exec jekyll serve</p>
</blockquote>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>d:\jekyll-blog&gt;bundle exec jekyll serve
</code></pre></div></div>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_12.png" alt="jekyll-github-blog-01_12" /></p>

<p>테마에 적용된 내용이 html로 생성되며, 잠시 뒤 http://127.0.0.1:4000 메세지와 함께 서비스가 기동된 것을 알수 있습니다.</p>

<h2 id="브라우저-접속을-통한-blog-서비스-확인">브라우저 접속을 통한 Blog 서비스 확인</h2>

<p>서버 기동 후 http://127.0.0.1:4000 에 접속해보면, 아래와 같은 기초 페이지가 생성되어 보여 집니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_13.png" alt="jekyll-github-blog-01_13" /></p>

<h2 id="첫번째-포트스-작성">첫번째 포트스 작성</h2>
<p>jekyll의 포트스는 markdown을 기본으로 지원 합니다.</p>

<p>아래 파일을 만듭니다.</p>
<blockquote>
  <p>d:\jekyll-blog_posts\2021-10-24-myfirstpost.md</p>
</blockquote>

<p>모든 포스트의 위치는 _posts 폴더 밑 입니다. <br />
파일 내용은 아래와 같이 입력 합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: 첫번째 포스트 입니다.
tags: 
    - 첫포스트
---

안녕하세요.   
첫번째 포스트 입니다.

</code></pre></div></div>

<p>브라우저를 통해서 새로고침하면, 첫 포스트가 계시되어 있습니다. <br />
markdown 작성법은 <a href="https://kimjaehyun.co.kr/etc/markdown/" target="_blank">마크 다운 문법</a>에서 확인 하시기 바랍니다.</p>

<p>minimal-mistakes 에는 다양한 샘플 포스트 작성법을 제공 하고 있습니다.  <br />
<a href="https://mmistakes.github.io/minimal-mistakes/year-archive/" target="_blank">포스트 샘플</a>
에서 참고 바랍니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_29.png" alt="jekyll-github-blog-01_29" /></p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_30.png" alt="jekyll-github-blog-01_30" /></p>

<h2 id="트러블슈팅">트러블슈팅</h2>

<p>bundel 작업중 아래와 같은 에러가 발생 할 경우가 있습니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_27.png" alt="jekyll-github-blog-01_27" /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Please add the following to your Gemfile to avoid polling for changes:
    gem 'wdm', '&gt;= 0.1.0' if Gem.win_platform?
</code></pre></div></div>

<p>위 메세지가 나오면, 프로젝트 폴더에 Gemfile을 메모장으로 편집 합니다.
아래 메세지를 해당 파일 마지막에 추가 합니다. <br />
gem ‘wdm’, ‘&gt;= 0.1.0’</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_28.png" alt="jekyll-github-blog-01_28" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>source "https://rubygems.org"
gem 'wdm', '&gt;= 0.1.0'
gemspec
</code></pre></div></div>

<p>다시 bundle install 을 통해서 변경사항을 재설치 합니다.</p>
<blockquote>
  <p>bundle install</p>
</blockquote>]]></content><author><name>devjaedol</name></author><category term="etc" /><category term="jekyll" /><category term="githug" /><category term="blog" /><category term="github blog" /><category term="minimal-mistakes" /><summary type="html"><![CDATA[jekyll을 통해서 GitHub blog를 만들어 보겠습니다. 작업을 위한 필요 지식 수준은 GitHub에 저장소를 만들고 소스를 등록 및 업데이트 할수 있는 지식 수준이 필요합니다. 최대한 단순하고 간략하게만 정리하도록 하겠습니다.]]></summary></entry><entry><title type="html">Electron 설치 패키지 셋팅</title><link href="https://kimjaehyun.co.kr/nodejs/electron_default_setup/" rel="alternate" type="text/html" title="Electron 설치 패키지 셋팅" /><published>2021-10-24T00:00:00-05:00</published><updated>2021-10-24T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/nodejs/electron_default_setup</id><content type="html" xml:base="https://kimjaehyun.co.kr/nodejs/electron_default_setup/"><![CDATA[<p><strong>Build cross-platform desktop apps with JavaScript, HTML, and CSS</strong>  <br />
최근 설치형 Application 개발에 클로스 플랫폼 지원과 Javascript로 개발을 지원하는 electron의 설치형 패키지 기본 구조를 정리 합니다.</p>

<p>아래 제품들이 Electron을 통해 개발된 SW Package 입니다.</p>
<ul>
  <li>Visual Studio Code</li>
  <li>Facebook Messenger</li>
  <li>Microsoft Teams</li>
</ul>

<p>기본적으로 Nodejs를 설치 합니다.
<a href="https://nodejs.org/ko/download/" target="_blank">https://nodejs.org/ko/download/</a></p>

<p>특정 디렉토리에 노드프로젝트를 설치 합니다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">init</span> 
<span class="c1">// index.js -&gt; main.js로 변경한다.</span>
<span class="c1">// 관련 패키지 설치</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span> <span class="nx">electron</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span> <span class="nx">electron</span><span class="o">-</span><span class="nx">builder</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span><span class="o">--</span><span class="nx">dev</span> <span class="nx">electron</span><span class="o">-</span><span class="nx">log</span>
<span class="nx">npm</span> <span class="nx">install</span> <span class="o">--</span><span class="nx">save</span><span class="o">--</span><span class="nx">dev</span> <span class="nx">electron</span><span class="o">-</span><span class="nx">updater</span>
</code></pre></div></div>

<p>package json</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"test_electron"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
    </span><span class="nl">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"main.js"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"start"</span><span class="p">:</span><span class="w"> </span><span class="s2">"electron ."</span><span class="p">,</span><span class="w">
        </span><span class="nl">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo </span><span class="se">\"</span><span class="s2">Error: no test specified</span><span class="se">\"</span><span class="s2"> &amp;&amp; exit 1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"deploy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"electron-builder --win --x64 --ia32"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"keywords"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
    </span><span class="nl">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w">
    </span><span class="nl">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ISC"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"devDependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"electron"</span><span class="p">:</span><span class="w"> </span><span class="s2">"8.0.0"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"electron-builder"</span><span class="p">:</span><span class="w"> </span><span class="s2">"22.3.2"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"electron-log"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.4.1"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"electron-updater"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.3.9"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"systeminformation"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^5.9.7"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"build"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"productName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HelloElectron"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"appId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"com.electron.hello"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"asar"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
        </span><span class="nl">"npmArgs"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
            </span><span class="s2">"--production"</span><span class="w">
        </span><span class="p">],</span><span class="w">
        </span><span class="nl">"protocols"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"helloElectron"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"schemes"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"helloelectron"</span><span class="w">
            </span><span class="p">]</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"win"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"requestedExecutionLevel"</span><span class="p">:</span><span class="w"> </span><span class="s2">"requireAdministrator"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"target"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"zip"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"nsis"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"icon"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./resources/installer/default.ico"</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"nsis"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"oneClick"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w">
            </span><span class="nl">"allowToChangeInstallationDirectory"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">},</span><span class="w">
        </span><span class="nl">"directories"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"buildResources"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./resources/installer/"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"output"</span><span class="p">:</span><span class="w"> </span><span class="s2">"./dist/"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"app"</span><span class="p">:</span><span class="w"> </span><span class="s2">"."</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>main.js</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app모듈과, BrowserWindow 모듈 할당</span>
<span class="kd">const</span> <span class="p">{</span><span class="nx">Menu</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">BrowserWindow</span><span class="p">,</span> <span class="nx">ipcMain</span><span class="p">,</span> <span class="nx">Tray</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">electron</span><span class="dl">'</span><span class="p">);</span>


<span class="c1">//자동 업데이트를 위해서</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">autoUpdater</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">electron-updater</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">log</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">electron-log</span><span class="dl">'</span><span class="p">);</span>


<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">logger</span> <span class="o">=</span> <span class="nx">log</span><span class="p">;</span>
<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">logger</span><span class="p">.</span><span class="nx">transports</span><span class="p">.</span><span class="nx">file</span><span class="p">.</span><span class="nx">level</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">App starting...</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">process.platform : </span><span class="dl">"</span><span class="o">+</span><span class="nx">process</span><span class="p">.</span><span class="nx">platform</span><span class="p">);</span>        <span class="c1">//process.platform : win32      darwin</span>

<span class="kd">let</span> <span class="nx">win</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">tray</span><span class="p">;</span>

<span class="cm">/** 메인 창 생성 */</span>
<span class="kd">function</span> <span class="nx">createMainWindow</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">win</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BrowserWindow</span><span class="p">(</span>
        <span class="p">{</span>
            <span class="na">width</span> <span class="p">:</span> <span class="mi">800</span>
            <span class="p">,</span> <span class="na">minWidth</span><span class="p">:</span><span class="mi">330</span>
            <span class="p">,</span> <span class="na">height</span> <span class="p">:</span><span class="mi">500</span>
            <span class="p">,</span> <span class="na">minHeight</span><span class="p">:</span> <span class="mi">450</span>
            <span class="p">,</span> <span class="na">show</span><span class="p">:</span> <span class="kc">false</span>
            <span class="c1">//, icon: __dirname + '/resources/installer/Icon.ico'</span>
            <span class="p">,</span> <span class="na">webPreferences</span> <span class="p">:</span>  <span class="p">{</span> 
                                    <span class="na">defaultFontSize</span> <span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
                                    <span class="na">nodeIntegration</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>  <span class="c1">// true로 설정, Uncaught ReferenceError: require is not defined</span>
                                    <span class="na">contextIsolation</span> <span class="p">:</span> <span class="kc">false</span>
                                <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">);</span>

    <span class="c1">// 창이 ready 상태가되면 보여주기</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">'</span><span class="s1">ready-to-show</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">win</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
    <span class="p">});</span>

    <span class="c1">// 윈도우 창에 로드 할 html 페이지</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">loadURL</span><span class="p">(</span><span class="s2">`file://</span><span class="p">${</span><span class="nx">__dirname</span><span class="p">}</span><span class="s2">/index.html`</span><span class="p">);</span> <span class="c1">//작은 따옴표가 아닌  back stick 기호(tab키 위)</span>
    <span class="c1">//__dirname : node.js 전역변수이며, 현재 실행중인 코드의 파일 경로를 나타냄</span>

    <span class="c1">//tray icon</span>
    <span class="nx">initTrayIconMenu</span><span class="p">();</span>

    <span class="c1">//Event 처리</span>
    <span class="c1">//비동기 호출</span>
    <span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">asyncEventKey</span><span class="dl">'</span><span class="p">,(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">argument</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Async &gt; RECV</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">argument</span><span class="p">);</span>

        <span class="nx">win</span><span class="p">.</span><span class="nx">setFullScreen</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>

        <span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
            <span class="nx">event</span><span class="p">.</span><span class="nx">sender</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">asyncEventKeyCb</span><span class="dl">'</span><span class="p">,{</span><span class="na">result</span><span class="p">:</span><span class="dl">'</span><span class="s1">success</span><span class="dl">'</span><span class="p">});</span> <span class="c1">// 비동기 메시지를 전송한다.</span>
        <span class="p">},</span><span class="mi">5000</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">//동기 호출</span>
    <span class="nx">ipcMain</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">syncEventKey</span><span class="dl">'</span><span class="p">,(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">argument</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">Sync &gt; RECV</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">argument</span><span class="p">);</span>

        <span class="nx">win</span><span class="p">.</span><span class="nx">setFullScreen</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

        <span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="p">{</span>
            <span class="nx">event</span><span class="p">.</span><span class="nx">returnValue</span> <span class="o">=</span> <span class="p">{</span><span class="na">result</span><span class="p">:</span><span class="dl">'</span><span class="s1">success</span><span class="dl">'</span><span class="p">}</span> <span class="c1">// 동기 메시지를 전송한다.</span>
        <span class="p">},</span><span class="mi">5000</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">//개발자 도구 오픈</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">webContents</span><span class="p">.</span><span class="nx">openDevTools</span><span class="p">();</span>
<span class="p">}</span><span class="c1">// end fn</span>

<span class="c1">// Tray생성</span>
<span class="kd">function</span> <span class="nx">initTrayIconMenu</span><span class="p">(){</span>
    <span class="nx">tray</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Tray</span><span class="p">(</span><span class="dl">'</span><span class="s1">./resources/installer/default.ico</span><span class="dl">'</span><span class="p">);</span> 
    <span class="kd">const</span> <span class="nx">myMenu</span> <span class="o">=</span> <span class="nx">Menu</span><span class="p">.</span><span class="nx">buildFromTemplate</span><span class="p">([</span>
      <span class="p">{</span><span class="na">label</span><span class="p">:</span> <span class="dl">'</span><span class="s1">1번</span><span class="dl">'</span><span class="p">,</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">normal</span><span class="dl">'</span><span class="p">,</span> <span class="na">checked</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">click</span><span class="p">:</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">1번클릭!</span><span class="dl">'</span><span class="p">)}</span> <span class="p">},</span>  <span class="c1">//checked는 기본선택입니다.</span>
      <span class="p">{</span><span class="na">label</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2번</span><span class="dl">'</span><span class="p">,</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">normal</span><span class="dl">'</span><span class="p">,</span> <span class="na">click</span><span class="p">:</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">2번클릭!</span><span class="dl">'</span><span class="p">)}},</span>
      <span class="p">{</span><span class="na">label</span><span class="p">:</span> <span class="dl">'</span><span class="s1">3번</span><span class="dl">'</span><span class="p">,</span> <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">normal</span><span class="dl">'</span><span class="p">,</span> <span class="na">click</span><span class="p">:</span> <span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">3번클릭!</span><span class="dl">'</span><span class="p">)}}</span>
    <span class="p">])</span>
    <span class="nx">tray</span><span class="p">.</span><span class="nx">setToolTip</span><span class="p">(</span><span class="dl">'</span><span class="s1">트레이 아이콘!</span><span class="dl">'</span><span class="p">)</span>
    <span class="nx">tray</span><span class="p">.</span><span class="nx">setContextMenu</span><span class="p">(</span><span class="nx">myMenu</span><span class="p">)</span>
<span class="p">}</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">ready</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span><span class="p">{</span>
    <span class="nx">createMainWindow</span><span class="p">();</span>
    <span class="c1">//autoUpdater.checkForUpdates(); //업데이트 체크 필요시 해당 위치에서 진행</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">window-all-closed</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">app</span><span class="p">.</span><span class="nx">quit</span><span class="p">();</span>
    <span class="nx">tray</span><span class="p">.</span><span class="nx">destroy</span><span class="p">();</span>
<span class="p">});</span>

<span class="cm">/* autoUpdater 구현시 =====================================*/</span>
<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">checking-for-update</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">업데이트 확인 중...</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">update-available</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">업데이트가 가능합니다.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">update-not-available</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">현재 최신버전입니다.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">에러가 발생하였습니다. 에러내용 : </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">err</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">download-progress</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">progressObj</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">log_message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">다운로드 속도: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">progressObj</span><span class="p">.</span><span class="nx">bytesPerSecond</span><span class="p">;</span>
    <span class="nx">log_message</span> <span class="o">=</span> <span class="nx">log_message</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> - 현재 </span><span class="dl">'</span> <span class="o">+</span> <span class="nx">progressObj</span><span class="p">.</span><span class="nx">percent</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">%</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">log_message</span> <span class="o">=</span> <span class="nx">log_message</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> (</span><span class="dl">'</span> <span class="o">+</span> <span class="nx">progressObj</span><span class="p">.</span><span class="nx">transferred</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">progressObj</span><span class="p">.</span><span class="nx">total</span> <span class="o">+</span> <span class="dl">'</span><span class="s1">)</span><span class="dl">'</span><span class="p">;</span>
    <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">log_message</span><span class="p">);</span>
<span class="p">})</span>
<span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">update-downloaded</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">info</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">log</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">업데이트가 완료되었습니다.</span><span class="dl">'</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">option</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">"</span><span class="s2">question</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">buttons</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">업데이트</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">취소</span><span class="dl">"</span><span class="p">],</span>
        <span class="na">defaultId</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="na">title</span><span class="p">:</span> <span class="dl">"</span><span class="s2">electron-updater</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">message</span><span class="p">:</span> <span class="dl">"</span><span class="s2">업데이트가 있습니다. 프로그램을 업데이트 하시겠습니까?</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">};</span>
    <span class="kd">let</span> <span class="nx">btnIndex</span> <span class="o">=</span> <span class="nx">dialog</span><span class="p">.</span><span class="nx">showMessageBoxSync</span><span class="p">(</span><span class="nx">updateWin</span><span class="p">,</span> <span class="nx">option</span><span class="p">);</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">btnIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">autoUpdater</span><span class="p">.</span><span class="nx">quitAndInstall</span><span class="p">();</span>
    <span class="p">}</span>    
<span class="p">});</span>
</code></pre></div></div>

<p>index.html</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span> Electron<span class="nt">&lt;/title&gt;</span>
    
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span> Electron!<span class="nt">&lt;/h1&gt;</span>

    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">'btnAsync'</span><span class="nt">&gt;</span>Async send<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">'btnSync'</span><span class="nt">&gt;</span>Sync send<span class="nt">&lt;/button&gt;</span>

    <span class="nt">&lt;hr&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">'btnNewWin1'</span><span class="nt">&gt;</span>window 1<span class="nt">&lt;/button&gt;</span>

    <span class="nt">&lt;hr&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">'btnClose'</span><span class="nt">&gt;</span>Close<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"./render.js"</span><span class="nt">&gt;&lt;/script&gt;</span>

<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>

</code></pre></div></div>

<p>화면측 기능을 담당하는 Script 파일  <br />
render.js</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span><span class="nx">ipcRenderer</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">electron</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">btnAsync</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">btnAsync</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">btnSync</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">btnSync</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">c_data</span> <span class="o">=</span>  <span class="p">{</span><span class="na">customdata1</span><span class="p">:</span><span class="mi">1000</span><span class="p">,</span><span class="na">customdata2</span><span class="p">:</span><span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">};</span>

<span class="nx">btnAsync</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">비동기 화면에서 보냄&gt;</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">asyncEventKey</span><span class="dl">'</span><span class="p">,</span> <span class="nx">c_data</span><span class="p">);</span>

<span class="p">});</span>
<span class="nx">btnSync</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">동기 화면에서 보냄&gt;</span><span class="dl">"</span><span class="p">);</span>
    <span class="kd">let</span> <span class="nx">reVal</span> <span class="o">=</span> <span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">sendSync</span><span class="p">(</span><span class="dl">'</span><span class="s1">syncEventKey</span><span class="dl">'</span><span class="p">,</span> <span class="nx">c_data</span><span class="p">);</span>    
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">동기 결과&gt;</span><span class="dl">"</span><span class="p">);</span>    
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">reVal</span><span class="p">);</span>
<span class="p">});</span>


<span class="nx">ipcRenderer</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">asyncEventKeyCb</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">arg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">비동기 결과&gt;</span><span class="dl">"</span><span class="p">);</span>    
    <span class="c1">//console.log(JSON.stringify(event, null, 2));</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">arg</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
<span class="p">})</span>


<span class="c1">///////////////////////////////////////////////////////</span>
<span class="kd">const</span> <span class="nx">electron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">electron</span><span class="dl">'</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">btnWin1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">btnNewWin1</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">btnWin1</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,()</span><span class="o">=&gt;</span><span class="p">{</span>
    <span class="kd">const</span> <span class="nx">BrowserWindow</span> <span class="o">=</span> <span class="nx">electron</span><span class="p">.</span><span class="nx">remote</span><span class="p">.</span><span class="nx">BrowserWindow</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">win</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">BrowserWindow</span><span class="p">({</span>
        <span class="na">height</span><span class="p">:</span> <span class="mi">1080</span><span class="p">,</span>
        <span class="na">width</span><span class="p">:</span> <span class="mi">1920</span><span class="p">,</span>
        <span class="na">show</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">y</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span>
        <span class="na">x</span><span class="p">:</span><span class="o">-</span><span class="mi">959</span><span class="p">,</span>    <span class="c1">//</span>
        <span class="c1">//alwaysOnTop : true,</span>
        <span class="na">fullscreen</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">movable</span> <span class="p">:</span> <span class="kc">true</span><span class="p">,</span>  
        <span class="na">frame</span> <span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="c1">//autoHideMenuBar : true</span>
    <span class="p">});</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">loadURL</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://www.naver.com</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">close</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">win</span> <span class="o">=</span> <span class="kc">null</span> <span class="p">});</span>
    <span class="nx">win</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">'</span><span class="s1">ready-to-show</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">win</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>실행하기</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:\workspace_VS\test_electron&gt;npm start

&gt; test_electron@1.0.0 start D:\workspace_VS\test_electron
&gt; electron .


21:43:48.094 &gt; App starting...
process.platform : win32
(electron) The default value of app.allowRendererProcessReuse is deprecated, it is currently "false".  It will change to be "true" in Electron 9.  For more information please check https://github.com/electron/electron/issues/18397

</code></pre></div></div>

<p><img src="\assets\images_post\nodejs\2021-10-24-electron_01.png" alt="2021-10-24-electron_01.png" /></p>

<p>패키지 빌드 하기</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D:\workspace_VS\test_electron&gt;npm run deploy

&gt; test_electron@1.0.0 deploy D:\workspace_VS\test_electron
&gt; electron-builder --win --x64 --ia32

  • electron-builder  version=22.3.2 os=10.0.18363
  • loaded configuration  file=package.json ("build" field)
  • Specified application directory equals to project dir — superfluous or wrong configuration  appDirectory=.
  • description is missed in the package.json  appPackageFile=D:\workspace_VS\test_electron\package.json
  • writing effective config  file=dist\builder-effective-config.yaml
  • packaging       platform=win32 arch=x64 electron=8.0.0 appOutDir=dist\win-unpacked
  • downloading     url=https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.5.0/winCodeSign-2.5.0.7z size=5.6 MB parts=1  
  • downloaded      url=https://github.com/electron-userland/electron-builder-binaries/releases/download/winCodeSign-2.5.0/winCodeSign-2.5.0.7z duration=4.44s       
  • building        target=zip arch=x64 file=dist\HelloElectron-1.0.0-win.zip
  • packaging       platform=win32 arch=ia32 electron=8.0.0 appOutDir=dist\win-ia32-unpacked
  • building        target=zip arch=ia32 file=dist\HelloElectron-1.0.0-ia32-win.zip
  • building        target=nsis file=dist\HelloElectron Setup 1.0.0.exe archs=x64, ia32 oneClick=false perMachine=false
  • downloading     url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z size=1.3 MB parts=1
  • downloaded      url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.1/nsis-3.0.4.1.7z duration=3.058s
  • building block map  blockMapFile=dist\HelloElectron Setup 1.0.0.exe.blockmap

</code></pre></div></div>
<p>패키지 완료 후 dist 폴더에 해당 설치 파일이 생성 됩니다.</p>

<p><img src="\assets\images_post\nodejs\2021-10-24-electron_02.png" alt="2021-10-24-electron_02.png" /></p>]]></content><author><name>devjaedol</name></author><category term="nodejs" /><category term="nodejs" /><category term="electron" /><category term="install package" /><summary type="html"><![CDATA[Build cross-platform desktop apps with JavaScript, HTML, and CSS 최근 설치형 Application 개발에 클로스 플랫폼 지원과 Javascript로 개발을 지원하는 electron의 설치형 패키지 기본 구조를 정리 합니다.]]></summary></entry><entry><title type="html">[Step 2] GitHub blog 만들기(GitHub 설정 및 도메인 연결)</title><link href="https://kimjaehyun.co.kr/etc/jekyll-git-blog_(2)/" rel="alternate" type="text/html" title="[Step 2] GitHub blog 만들기(GitHub 설정 및 도메인 연결)" /><published>2021-10-24T00:00:00-05:00</published><updated>2021-10-24T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/etc/jekyll-git-blog_(2)</id><content type="html" xml:base="https://kimjaehyun.co.kr/etc/jekyll-git-blog_(2)/"><![CDATA[<p>GitHub에 Jekyll을 통해서 만들어진 HTML 결과물을 배포해 보겠습니다.</p>

<h2 id="github-계정-생성-및-저장소-생성">GitHub 계정 생성 및 저장소 생성</h2>
<p><a href="https://github.com/" target="_blank">https://github.com/</a> 에 Account를 생성 합니다. <br />
Account 로그인 후에 Create a new Repository 를 선택하여, 다음 이름 규칙으로 저장소를 생성합니다. <br />
<img src="\assets\images_post\jekyll\jekyll-github-blog-02_1.png" alt="jekyll-github-blog-02_1" /></p>

<blockquote>
  <p><strong>계정명</strong>.github.io</p>
</blockquote>

<p>제 계정명은 devjaedol 입니다. <br />
저장소 이름은  devjaedol.github.io 로 작성 합니다. <br />
저장소는  Public으로 설정하고 생성 합니다.</p>

<h2 id="git-저장소에-소스-commit-및-구조-설명">Git 저장소에 소스 Commit 및 구조 설명</h2>

<p>1강에서 작업한 D:\jekyll-blog 에 내용을 생성한 git repository에 다음과 같이 위치 시킵니다.
bundle exec jekyll serve 명령어를 통해 서버를 실행 시키면, 
설정된 jekyll 내용대로 html 이 D:\jekyll-blog_site 에 생성됩니다.
위 두가지 설정을 생성한 repository에 2개의 branch를 생성하여 위치 시킵니다.</p>

<p>GitHub 저장소 구조</p>
<ul>
  <li>계정명.github.io
    <ul>
      <li>master   : jekyll를 통해 컴파일된 HTML이 배치됨
        <ul>
          <li>( D:\jekyll-blog_site 이하 내용 )</li>
        </ul>
      </li>
      <li>source   : jekyll 설정 소스가 배치됨
        <ul>
          <li>( D:\jekyll-blog 이하 내용 )</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>source branch의 jekyll 소스를 Travis-CI를 통해 자동 빌드하여 master brach로 자동화 처리를 다음 편에서 진행 합니다. <br />
즉, master에 _site의 내용은 자동으로 업데이트 되나, 지금은 구동되는 구조를 이해하기 위해서 다음과 같이 진행 해보겠습니다.</p>

<p>D:\jekyll-blog_site 에서 cmd 창에 다음 명령어를 입력 합니다. <br />
위 작업을 하기 위해서는 git 설치와 git접속 인증 설정 등이 되어 있어야 합니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
git commit -m "first site commit"
git remote add origin https://github.com/계정명/계정명.github.io.git
git branch -M master
git push -u origin master
</code></pre></div></div>

<p>git push가 완료된 후 브라우저를 통해서   <br />
https://계정명.github.io 으로 접속 해 봅니다. <br />
로컬 기동 화면과 같은 화면이 해당 계정명으로 출력 됩니다. <br />
(아래에서 주소가 다름 참고)</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-01_13.png" alt="jekyll-github-blog-01_1" /></p>

<h2 id="doamin-연결">Doamin 연결</h2>

<p>연결할 도메인의 DNS를 github로 설정을 변경 합니다.   <br />
<img src="\assets\images_post\jekyll\jekyll-github-blog-02_3.png" alt="jekyll-github-blog-02_3" /></p>
<ul>
  <li>DNS 설정 값
    <ul>
      <li>A Type
        <ul>
          <li>185.199.108.153</li>
          <li>185.199.109.153</li>
          <li>185.199.110.153</li>
          <li>185.199.111.153</li>
        </ul>
      </li>
      <li>CNAME Type
        <ul>
          <li>devjaedol.github.io</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>개인 도메인을 GitHub에 연결하려면, 연결할 Repository에 접근 합니다.  <br />
settings &gt;  Pages  &gt; Cusom domain 에 도메인을 입력 후 저장 합니다.</p>

<p><img src="\assets\images_post\jekyll\jekyll-github-blog-02_2.png" alt="jekyll-github-blog-02_2" /></p>

<p>DNS 등이 정상적으로 되었다면, 에러 없이 Save가 됩니다만, DNS오류 등이 발생하면 해당 내용이 출력 됩니다.</p>]]></content><author><name>devjaedol</name></author><category term="etc" /><category term="jekyll" /><category term="githug" /><category term="blog" /><category term="github blog" /><category term="minimal-mistakes" /><summary type="html"><![CDATA[GitHub에 Jekyll을 통해서 만들어진 HTML 결과물을 배포해 보겠습니다.]]></summary></entry><entry><title type="html">ES6(ECMAScript6)등 간략 정리</title><link href="https://kimjaehyun.co.kr/javascript/JS-ES6_Summary/" rel="alternate" type="text/html" title="ES6(ECMAScript6)등 간략 정리" /><published>2021-10-20T00:00:00-05:00</published><updated>2021-10-20T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/javascript/JS-ES6_Summary</id><content type="html" xml:base="https://kimjaehyun.co.kr/javascript/JS-ES6_Summary/"><![CDATA[<p>ES6 문법을 간략히 정리해 보겠습니다.</p>

<p>특별한 설명이 필요없는 보시면 아실듯한…</p>

<h2 id="es6-features2016">ES6 Features(2016)</h2>
<ul>
  <li>JavaScript Exponentiation (**)</li>
  <li>JavaScript Exponentiation assignment (**=)</li>
  <li>JavaScript Array.prototype.includes</li>
</ul>

<h2 id="es6-features2017">ES6 Features(2017)</h2>
<ul>
  <li>JavaScript String padding</li>
  <li>JavaScript Object.entries</li>
  <li>JavaScript Object.values</li>
  <li>JavaScript async functions</li>
  <li>JavaScript shared memory</li>
</ul>

<h2 id="es6-features2018">ES6 Features(2018)</h2>
<ul>
  <li>Asynchronous Iteration</li>
  <li>Promise Finally</li>
  <li>Object Rest Properties</li>
  <li>New RegExp Features</li>
</ul>

<h2 id="let--const">let  const</h2>

<p>let : { } 구역내에서 유효한 변수, 재할당 가능함.</p>

<p>const 수정이 불가능한 변수.</p>

<h2 id="arrow-function-단축-지원">Arrow Function 단축 지원</h2>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//ES5</span>
<span class="kd">function</span> <span class="nx">echo</span><span class="p">(</span><span class="nx">str</span><span class="p">){</span>
	<span class="k">return</span> <span class="nx">str</span><span class="o">+</span><span class="dl">"</span><span class="s2"> : </span><span class="dl">"</span><span class="o">+</span> <span class="nx">str</span>
<span class="p">}</span>

<span class="c1">//ES6</span>
<span class="kd">const</span> <span class="nx">echo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">str</span><span class="o">+</span><span class="dl">"</span><span class="s2"> : </span><span class="dl">"</span><span class="o">+</span> <span class="nx">str</span><span class="p">;</span>

</code></pre></div></div>

<h2 id="function-기본값-지원">Function 기본값 지원</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">echo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">str</span><span class="o">=</span><span class="dl">'</span><span class="s1">야호</span><span class="dl">'</span><span class="p">)</span><span class="o">=&gt;</span> <span class="nx">str</span><span class="o">+</span><span class="dl">"</span><span class="s2"> : </span><span class="dl">"</span><span class="o">+</span> <span class="nx">str</span><span class="p">;</span>
<span class="nx">echo</span><span class="p">();</span>
<span class="dl">'</span><span class="s1">야호 : 야호</span><span class="dl">'</span>

<span class="p">()</span><span class="o">=&gt;</span><span class="p">{}</span>
<span class="nx">v1</span><span class="o">=&gt;</span><span class="p">{}</span>
<span class="p">(</span><span class="nx">v1</span><span class="p">,</span><span class="nx">v2</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{}</span>

<span class="p">()</span><span class="o">=&gt;</span><span class="nx">reval</span>
<span class="nx">v1</span><span class="o">=&gt;</span><span class="nx">reval</span>
<span class="p">(</span><span class="nx">v1</span><span class="p">,</span><span class="nx">v2</span><span class="p">)</span><span class="o">=&gt;</span><span class="nx">reval</span>

</code></pre></div></div>

<h2 id="string-비교-startswith-endswith-includes">String 비교 startsWith(), endsWith(), includes</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">ABCDEFGHIJK</span><span class="dl">'</span><span class="p">;;</span>
<span class="nx">str</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="dl">'</span><span class="s1">CDE</span><span class="dl">'</span><span class="p">);</span>	<span class="c1">//true</span>
<span class="nx">str</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">ABCD</span><span class="dl">'</span><span class="p">);</span>	<span class="c1">//true</span>
<span class="nx">str</span><span class="p">.</span><span class="nx">endsWith</span><span class="p">(</span><span class="dl">'</span><span class="s1">IJK</span><span class="dl">'</span><span class="p">);</span>	<span class="c1">//true</span>
</code></pre></div></div>

<h2 id="템플릿-리터럴">템플릿 리터럴</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">홍길동</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`안녕하세요 저는 </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2"> 입니다.`</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="object-destructuring">Object Destructuring</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">car</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">name</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">sonata</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">price</span> <span class="p">:</span> <span class="mi">10000</span><span class="p">,</span>
	<span class="na">type</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">sedan</span><span class="dl">'</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">price</span><span class="p">}</span> <span class="o">=</span> <span class="nx">car</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>		<span class="c1">// sedan</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">price</span><span class="p">);</span>		<span class="c1">// 10000</span>
</code></pre></div></div>

<h2 id="destructuring">Destructuring</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">old_data</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">D</span><span class="dl">"</span><span class="p">,</span><span class="dl">"</span><span class="s2">E</span><span class="dl">"</span><span class="p">];</span>
<span class="kd">let</span> <span class="p">[</span><span class="nx">v1</span><span class="p">,,,</span><span class="nx">v2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">old_data</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">v1</span><span class="p">);</span>	<span class="c1">//A</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">v2</span><span class="p">);</span>	<span class="c1">//D</span>
</code></pre></div></div>

<h2 id="for-in">for-in</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">A</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">B</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">C</span><span class="dl">'</span><span class="p">,</span><span class="dl">'</span><span class="s1">D</span><span class="dl">'</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">val</span> <span class="k">of</span> <span class="nx">arr</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="spread-orperator">Spread orperator</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">old_val</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">new_val</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,...</span><span class="nx">old_val</span><span class="p">,</span><span class="mi">6</span><span class="p">];</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">new_val</span><span class="p">);</span>	<span class="c1">// [0, 1, 2, 3, 4, 5, 6]</span>

<span class="kd">function</span> <span class="nx">totalSum</span><span class="p">(</span> <span class="nx">v1</span><span class="p">,</span> <span class="nx">v2</span><span class="p">,</span> <span class="nx">v3</span><span class="p">,</span> <span class="nx">v4</span><span class="p">,</span> <span class="nx">v5</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">v1</span> <span class="o">+</span> <span class="nx">v2</span> <span class="o">+</span> <span class="nx">v3</span> <span class="o">+</span> <span class="nx">v4</span> <span class="o">+</span> <span class="nx">v5</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">totalSum</span><span class="p">(...</span><span class="nx">old_val</span><span class="p">);</span>	<span class="c1">//15</span>

</code></pre></div></div>

<h2 id="arrayfrom">Array.from</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">prices</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">data</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
	<span class="c1">//console.log(data);</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">prices</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>	<span class="c1">//배열로 변환되어 반환됨 [1, 2, 3, 4, 5]</span>
</code></pre></div></div>

<h2 id="arraymap">Array.map()</h2>

<h2 id="arrayfilter">Array.Filter()</h2>

<h2 id="spread-operator">spread operator</h2>

<h2 id="set-has">set has</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">set_data</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">();</span>
<span class="nx">set_data</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">A</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">set_data</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">B</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">set_data</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">set_data</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="dl">"</span><span class="s2">D</span><span class="dl">"</span><span class="p">);</span>

<span class="c1">//ES5 C를 포함 여부를 판단하려면</span>
<span class="nx">set_data</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">val</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span> <span class="c1">//비교 로직을 통해서 판단함.</span>
<span class="p">});</span>

<span class="c1">//ES6</span>
<span class="nx">set_data</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="dl">"</span><span class="s2">C</span><span class="dl">"</span><span class="p">);</span>	<span class="c1">//true</span>
<span class="nx">set_data</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="dl">"</span><span class="s2">F</span><span class="dl">"</span><span class="p">);</span>	<span class="c1">//false</span>
</code></pre></div></div>

<h2 id="weakset">WeakSet</h2>

<h2 id="export-import">export import</h2>

<p>sub.js</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">testFn</span><span class="p">(</span><span class="nx">v1</span><span class="p">){</span>
    <span class="k">return</span> <span class="nx">v1</span> <span class="o">*</span> <span class="nx">v1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>main.js</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">testFn</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./sub.js</span><span class="dl">'</span>

<span class="c1">//fn여러개인 경우</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">fnName1</span><span class="p">,</span> <span class="nx">fnName2</span><span class="p">,</span> <span class="nx">fnName3</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./sub.js</span><span class="dl">'</span>

</code></pre></div></div>

<h2 id="promises">Promises</h2>

<h2 id="class-constructor">Class constructor</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Car</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">price</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">price</span> <span class="o">=</span> <span class="nx">price</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">mycar</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Car</span><span class="p">(</span><span class="dl">'</span><span class="s1">sonata</span><span class="dl">'</span><span class="p">,</span> <span class="mi">10000</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mycar</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>	<span class="c1">// sonata</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mycar</span><span class="p">.</span><span class="nx">price</span><span class="p">);</span>	<span class="c1">// 10000</span>
</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="javascript" /><category term="ES6" /><category term="ES5" /><category term="ECMAScript6" /><summary type="html"><![CDATA[ES6 문법을 간략히 정리해 보겠습니다.]]></summary></entry><entry><title type="html">Python 설치</title><link href="https://kimjaehyun.co.kr/python/python_study_01/" rel="alternate" type="text/html" title="Python 설치" /><published>2021-10-19T00:00:00-05:00</published><updated>2021-10-19T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/python/python_study_01</id><content type="html" xml:base="https://kimjaehyun.co.kr/python/python_study_01/"><![CDATA[<p>파이썬 공부를 시작해봅시다. <br />
우선 파이썬 설치를… 시작이 반…</p>

<p><a href="https://www.python.org/downloads/" target="_blank">다운 로드 경로</a></p>

<p><img src="\assets/images_post/python/python-study-01-_1.png" alt="python-study-01-_1" /></p>

<p>다운로드 선택</p>

<p><img src="\assets/images_post/python/python-study-01-_2.png" alt="python-study-01-_2" /></p>

<p>설치 경로를 변경하기 위해서 Customzie 선택</p>

<p><img src="\assets/images_post/python/python-study-01-_3.png" alt="python-study-01-_3" /></p>

<p>기본값 Next</p>

<p><img src="\assets/images_post/python/python-study-01-_4.png" alt="python-study-01-_4" /></p>

<p>경로 변경</p>

<p><img src="\assets/images_post/python/python-study-01-_5.png" alt="python-study-01-_5" /></p>

<p><img src="\assets/images_post/python/python-study-01-_6.png" alt="python-study-01-_6" /></p>

<p><img src="\assets/images_post/python/python-study-01-_7.png" alt="python-study-01-_7" /></p>

<p>완료시 윈도우 시작위치에 위 항목이 추가됨 IDLE를 선택하여 실행함.</p>

<p><img src="\assets/images_post/python/python-study-01-_8.png" alt="python-study-01-_8" /></p>

<p>설치 버전이 정상 표기되면, 설치 완료됨.</p>

<p>window path는 필요시 추가해야 합니다.</p>]]></content><author><name>devjaedol</name></author><category term="python" /><category term="python강좌" /><category term="python" /><category term="초급" /><summary type="html"><![CDATA[파이썬 공부를 시작해봅시다. 우선 파이썬 설치를… 시작이 반…]]></summary></entry></feed>