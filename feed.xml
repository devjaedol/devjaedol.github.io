<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://kimjaehyun.co.kr/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kimjaehyun.co.kr/" rel="alternate" type="text/html" /><updated>2022-06-15T08:48:52-05:00</updated><id>https://kimjaehyun.co.kr/feed.xml</id><title type="html">꿰보노트</title><subtitle>프로그래밍과 소프트웨어 정보 및 클라우드 개발에 대한 정보를 공유하는 블로그 입니다. 꿰보노트 / 꿰보Note / 꿰어야 보배</subtitle><author><name>devjaedol</name></author><entry><title type="html">[Java] Kruskal, 최소 비용 신장 트리</title><link href="https://kimjaehyun.co.kr/algorithm/java/java-Kruskal/" rel="alternate" type="text/html" title="[Java] Kruskal, 최소 비용 신장 트리" /><published>2022-06-15T00:00:00-05:00</published><updated>2022-06-15T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/java/java-Kruskal</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/java/java-Kruskal/"><![CDATA[<p>최소 비용으로 모든 노드를 연결하기 위해서 사용함.(최소 비용 신장 트리) <br />
두 노드의 거리를 오름차순으로 정렬하여, 노드 리스트를 순회하며, 최소 거리 노드를 연결함.  <br />
연결시 사이틀이 발생되지 않는지를 점검함.</p>

<ul>
  <li>연결된 선의 합이 최소 비용인가?</li>
</ul>

<h2 id="mstminimum-spanning-tree">MST(Minimum Spanning Tree)</h2>
<p><code class="language-plaintext highlighter-rouge">MST</code>란 최소의 비용으로 모든 노드가 연결된 트리를 의미함. <br />
<code class="language-plaintext highlighter-rouge">Spanning Tree</code> 란 모든 노드가 연결된 트리를 의미함.</p>

<p>최소 비용 신장 트리 검색 알고리즘</p>
<ul>
  <li>크루스칼 알고리즘(Kruskal) : 전체 간선 중 작은것 부터 연결(Union-Find사용)</li>
  <li>프림 알고리즘 (Prim) : 현재 연결된 트리에 이어진 간선중 가장 작은것을 추가(Heap사용)  <br />
Prim 관련 문제 최소 스패닝 트리 <a href="https://www.acmicpc.net/problem/1197" target="_blank">백준 Q1197</a></li>
</ul>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Vector</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">KruskalAlgorithm</span> <span class="o">{</span>
	<span class="cm">/**
	 * 재귀 호출로 최종 부모 번호를 반환
	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getParent</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="n">x</span> <span class="o">)</span> <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
		<span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span>		
		<span class="k">return</span> <span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
	<span class="o">}</span>

	<span class="cm">/**
	 * 두 노드에서서 작은 부모의 값으로 병합함.
	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">unionParent</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">a</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
		<span class="n">b</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">)</span> <span class="n">parent</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
		<span class="k">else</span> <span class="n">parent</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="cm">/**
	 * a, b가 같은 부모인지 확인
	 * 0 다른 부모, 1 같은 부모
	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findParent</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">a</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
		<span class="n">b</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="c1">//	간선을 거리가 짧은 순서대로 그래프에 포함</span>
		<span class="c1">//	사이클발생시 포함 시키지 않음</span>
		<span class="c1">// 	최소 비용 신장 트리</span>
		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">7</span><span class="o">;</span> <span class="c1">// node수</span>
		<span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">11</span><span class="o">;</span> <span class="c1">// 간선 수</span>
		
		<span class="nc">Vector</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Vector</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;();</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">12</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">28</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">67</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">17</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">24</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">62</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">20</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">37</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">13</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">45</span><span class="o">));</span>
		<span class="n">v</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">73</span><span class="o">));</span>
		
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[정렬전]============"</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">v</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">Edge</span> <span class="n">e</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">distance</span><span class="o">);</span>
		<span class="o">}</span>
		
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[정렬후]============"</span><span class="o">);</span>
		<span class="c1">// 간선의 비용으로 오름차순 정렬 </span>
		<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;()</span> <span class="o">{</span>
			<span class="nd">@Override</span>
			<span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Edge</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">Edge</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
				<span class="k">return</span> <span class="o">(</span><span class="n">o1</span><span class="o">.</span><span class="na">distance</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">distance</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">});</span>		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">v</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">Edge</span> <span class="n">e</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">distance</span><span class="o">);</span>
		<span class="o">}</span>
		
		
		<span class="c1">// 각 정점이 포함된 그래프가 어디인지 저장 (부모 초기화, 자기가 자신이 부모로 설정함)</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">v</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="mi">1</span><span class="o">];</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="o">.</span><span class="na">size</span><span class="o">()+</span><span class="mi">1</span> <span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">set</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
		<span class="o">}</span>
		
		
		<span class="c1">// 거리의 합을 0으로 초기화</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[로직]============"</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
			<span class="c1">// 동일한 부모를 가르키지 않는 경우(이미 연결됨)</span>
			<span class="c1">// 즉, 사이클이 발생하지 않을 때만 선택 </span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%5d %5d (%5d)"</span><span class="o">,</span><span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span>  <span class="n">findParent</span><span class="o">(</span><span class="n">set</span><span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">);</span>
			
			<span class="k">if</span><span class="o">(</span> <span class="n">findParent</span><span class="o">(</span><span class="n">set</span><span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">1</span><span class="o">])</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span> <span class="c1">//다른 부모일 경우</span>
				<span class="n">sum</span> <span class="o">+=</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">distance</span><span class="o">;</span> 
				<span class="n">unionParent</span><span class="o">(</span><span class="n">set</span><span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
				
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">" uinion %d-%d %s"</span><span class="o">,</span><span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">set</span><span class="o">));</span>
			<span class="o">}</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
			
<span class="c1">//			if( findParent(set, v.get(i).node[0], v.get(i).node[1]) == 0 ) {</span>
<span class="c1">//				sum += v.get(i).distance; </span>
<span class="c1">//				unionParent(set, v.get(i).node[0], v.get(i).node[1]);</span>
<span class="c1">//			}</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"==[결과]============"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%s \n"</span><span class="o">,</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">set</span><span class="o">));</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"최소 비용 : %d \n"</span><span class="o">,</span> <span class="n">sum</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">v</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"[%2d] Node : %d , Parent : %d \n"</span><span class="o">,</span><span class="n">i</span> <span class="o">,</span> <span class="n">v</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">node</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">set</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
		<span class="o">}</span>
		
		
	<span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Edge</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">node</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Edge</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">distance</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">node</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
		<span class="k">this</span><span class="o">.</span><span class="na">node</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">node</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">distance</span> <span class="o">=</span> <span class="n">distance</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getDistance</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">distance</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="c1">//출력</span>
<span class="o">==[</span><span class="n">정렬전</span><span class="o">]============</span>
<span class="mi">12</span>
<span class="mi">28</span>
<span class="mi">67</span>
<span class="mi">17</span>
<span class="mi">24</span>
<span class="mi">62</span>
<span class="mi">20</span>
<span class="mi">37</span>
<span class="mi">13</span>
<span class="mi">45</span>
<span class="mi">73</span>
<span class="o">==[</span><span class="n">정렬후</span><span class="o">]============</span>
<span class="mi">12</span>
<span class="mi">13</span>
<span class="mi">17</span>
<span class="mi">20</span>
<span class="mi">24</span>
<span class="mi">28</span>
<span class="mi">37</span>
<span class="mi">45</span>
<span class="mi">62</span>
<span class="mi">67</span>
<span class="mi">73</span>
<span class="o">==[</span><span class="n">로직</span><span class="o">]============</span>
    <span class="mi">1</span>     <span class="mi">7</span> <span class="o">(</span>    <span class="mi">0</span><span class="o">)</span> <span class="n">uinion</span> <span class="mi">1</span><span class="o">-</span><span class="mi">7</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">]</span>
    <span class="mi">4</span>     <span class="mi">7</span> <span class="o">(</span>    <span class="mi">0</span><span class="o">)</span> <span class="n">uinion</span> <span class="mi">4</span><span class="o">-</span><span class="mi">7</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">]</span>
    <span class="mi">1</span>     <span class="mi">5</span> <span class="o">(</span>    <span class="mi">0</span><span class="o">)</span> <span class="n">uinion</span> <span class="mi">1</span><span class="o">-</span><span class="mi">5</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">]</span>
    <span class="mi">3</span>     <span class="mi">5</span> <span class="o">(</span>    <span class="mi">0</span><span class="o">)</span> <span class="n">uinion</span> <span class="mi">3</span><span class="o">-</span><span class="mi">5</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">]</span>
    <span class="mi">2</span>     <span class="mi">4</span> <span class="o">(</span>    <span class="mi">0</span><span class="o">)</span> <span class="n">uinion</span> <span class="mi">2</span><span class="o">-</span><span class="mi">4</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">]</span>
    <span class="mi">1</span>     <span class="mi">4</span> <span class="o">(</span>    <span class="mi">1</span><span class="o">)</span>
    <span class="mi">3</span>     <span class="mi">6</span> <span class="o">(</span>    <span class="mi">0</span><span class="o">)</span> <span class="n">uinion</span> <span class="mi">3</span><span class="o">-</span><span class="mi">6</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">]</span>
    <span class="mi">5</span>     <span class="mi">6</span> <span class="o">(</span>    <span class="mi">1</span><span class="o">)</span>
    <span class="mi">2</span>     <span class="mi">5</span> <span class="o">(</span>    <span class="mi">1</span><span class="o">)</span>
    <span class="mi">1</span>     <span class="mi">2</span> <span class="o">(</span>    <span class="mi">1</span><span class="o">)</span>
    <span class="mi">5</span>     <span class="mi">7</span> <span class="o">(</span>    <span class="mi">1</span><span class="o">)</span>
<span class="o">==[</span><span class="n">결과</span><span class="o">]============</span>
<span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">11</span><span class="o">]</span> 
<span class="n">최소</span> <span class="n">비용</span> <span class="o">:</span> <span class="mi">123</span> 
<span class="o">[</span> <span class="mi">0</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">1</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">0</span> 
<span class="o">[</span> <span class="mi">1</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">4</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">1</span> 
<span class="o">[</span> <span class="mi">2</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">1</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">1</span> 
<span class="o">[</span> <span class="mi">3</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">3</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">1</span> 
<span class="o">[</span> <span class="mi">4</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">2</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">1</span> 
<span class="o">[</span> <span class="mi">5</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">1</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">1</span> 
<span class="o">[</span> <span class="mi">6</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">3</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">1</span> 
<span class="o">[</span> <span class="mi">7</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">5</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">1</span> 
<span class="o">[</span> <span class="mi">8</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">2</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">8</span> 
<span class="o">[</span> <span class="mi">9</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">1</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">9</span> 
<span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="nc">Node</span> <span class="o">:</span> <span class="mi">5</span> <span class="o">,</span> <span class="nc">Parent</span> <span class="o">:</span> <span class="mi">10</span> 


</code></pre></div></div>
<p><a href="https://blog.naver.com/ndb796/221230994142" target="_blank">참고 문헌 : 안경잡개발자 블로그</a></p>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="java" /><category term="Kruskal Algorithm" /><category term="Union-Find" /><category term="MST" /><category term="Spannig Tree" /><summary type="html"><![CDATA[최소 비용으로 모든 노드를 연결하기 위해서 사용함.(최소 비용 신장 트리) 두 노드의 거리를 오름차순으로 정렬하여, 노드 리스트를 순회하며, 최소 거리 노드를 연결함. 연결시 사이틀이 발생되지 않는지를 점검함.]]></summary></entry><entry><title type="html">[Java] Fibonacci, DP</title><link href="https://kimjaehyun.co.kr/algorithm/java/java-dp-fibonacci/" rel="alternate" type="text/html" title="[Java] Fibonacci, DP" /><published>2022-06-15T00:00:00-05:00</published><updated>2022-06-15T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/java/java-dp-fibonacci</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/java/java-dp-fibonacci/"><![CDATA[<p>피보나치 수열을 만드는 함수를 만들어보기. <br />
<code class="language-plaintext highlighter-rouge">1, 1, 2, 3, 5, 8, 13, 21, 34, 55 </code>  <br />
이전 2개의 값을 더해서 현재 값이 되는 패턴.  <br />
<code class="language-plaintext highlighter-rouge">점화식: D[i] = D[i - 1] + D[i - 2]</code></p>

<ul>
  <li>재귀 호출에서 성능을 개선 할수 있는지?</li>
</ul>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Fibonacci</span><span class="o">{</span>
	<span class="kd">static</span> <span class="kt">double</span><span class="o">[]</span> <span class="n">storedValue</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="mi">100</span><span class="o">];</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">dp</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>

		<span class="c1">//한번 구한 값을 저장하여 반환함</span>
		<span class="k">if</span><span class="o">(</span><span class="n">storedValue</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">)</span> 
			<span class="k">return</span> <span class="n">storedValue</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
		
		<span class="c1">//새로 구하는 수는 계산 후 재 사용을 위해서 저장해놓음</span>
		<span class="n">storedValue</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">dp</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">storedValue</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
	<span class="o">}</span>
	
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">(</span><span class="mi">50</span><span class="o">));</span> 
	<span class="o">}</span>	
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="java" /><category term="Fibonacci" /><category term="DP" /><category term="다이나믹 프로그래밍" /><category term="Dynamic Programming" /><summary type="html"><![CDATA[피보나치 수열을 만드는 함수를 만들어보기. 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 이전 2개의 값을 더해서 현재 값이 되는 패턴. 점화식: D[i] = D[i - 1] + D[i - 2]]]></summary></entry><entry><title type="html">[Java] Union-Find, 두개의 노드 연결 여부 확인</title><link href="https://kimjaehyun.co.kr/algorithm/java/java-Union-Find/" rel="alternate" type="text/html" title="[Java] Union-Find, 두개의 노드 연결 여부 확인" /><published>2022-06-15T00:00:00-05:00</published><updated>2022-06-15T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/algorithm/java/java-Union-Find</id><content type="html" xml:base="https://kimjaehyun.co.kr/algorithm/java/java-Union-Find/"><![CDATA[<p>여러개의 노드에서 임의의 두개의 노드가 연결되어 있는지를 판단할때 사용합니다.</p>

<ul>
  <li>서로 연결되어 있는지?</li>
</ul>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnionFind</span> <span class="o">{</span>

	<span class="cm">/**
	 * 재귀 호출로 최종 부모 번호를 반환
	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getParent</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="n">x</span> <span class="o">)</span> <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
		<span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">]);</span>		
		<span class="k">return</span> <span class="n">parent</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
	<span class="o">}</span>
	
	
	<span class="cm">/**
	 * 두 노드에서서 작은 부모의 값으로 병합함.
	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">unionParent</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">a</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
		<span class="n">b</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
		<span class="c1">//더 작은 값으로 부모를 통일함.</span>
		<span class="k">if</span><span class="o">(</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">)</span> <span class="n">parent</span><span class="o">[</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
		<span class="k">else</span> <span class="n">parent</span><span class="o">[</span><span class="n">a</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d-%d  : %s \n"</span><span class="o">,</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">parent</span><span class="o">));</span>
	<span class="o">}</span>
	
	
	<span class="cm">/**
	 * a, b가 같은 부모인지 확인
	 * 0 다른 부모, 1 같은 부모
	 */</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findParent</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span><span class="o">,</span> <span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">a</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">a</span><span class="o">);</span>
		<span class="n">b</span> <span class="o">=</span> <span class="n">getParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
		<span class="k">if</span><span class="o">(</span> <span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
		<span class="k">else</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">parent</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">11</span><span class="o">];</span>
		
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">parent</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">parent</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
		<span class="o">}</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Init : %s \n"</span><span class="o">,</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">parent</span><span class="o">));</span>
		
		<span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span> <span class="c1">//1-2  연결 의미</span>
		<span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
		<span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>
		<span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
		<span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
		<span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"1과 5는 연결 여부 확인? %d\n"</span><span class="o">,</span> <span class="n">findParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>
		<span class="n">unionParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"1과 5는 연결 여부 확인? %d\n"</span><span class="o">,</span> <span class="n">findParent</span><span class="o">(</span><span class="n">parent</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>
		
	<span class="o">}</span>

<span class="o">}</span>
<span class="c1">//출력</span>
<span class="nc">Init</span> <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 
<span class="mi">1</span><span class="o">-</span><span class="mi">2</span>  <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 
<span class="mi">1</span><span class="o">-</span><span class="mi">3</span>  <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 
<span class="mi">1</span><span class="o">-</span><span class="mi">4</span>  <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 
<span class="mi">5</span><span class="o">-</span><span class="mi">6</span>  <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 
<span class="mi">5</span><span class="o">-</span><span class="mi">7</span>  <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 
<span class="mi">5</span><span class="o">-</span><span class="mi">8</span>  <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 

<span class="mi">1</span><span class="n">과</span> <span class="mi">5</span><span class="n">는</span> <span class="n">연결</span> <span class="n">여부</span> <span class="n">확인</span><span class="o">?</span> <span class="mi">0</span>
<span class="mi">1</span><span class="o">-</span><span class="mi">5</span>  <span class="o">:</span> <span class="o">[</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">10</span><span class="o">]</span> 
<span class="mi">1</span><span class="n">과</span> <span class="mi">5</span><span class="n">는</span> <span class="n">연결</span> <span class="n">여부</span> <span class="n">확인</span><span class="o">?</span> <span class="mi">1</span>


</code></pre></div></div>

<p><a href="https://blog.naver.com/ndb796/221230967614" target="_blank">참고 문헌 : 안경잡개발자 블로그</a></p>]]></content><author><name>devjaedol</name></author><category term="algorithm" /><category term="java" /><category term="Union-Find" /><category term="합집합" /><category term="소로소" /><summary type="html"><![CDATA[여러개의 노드에서 임의의 두개의 노드가 연결되어 있는지를 판단할때 사용합니다.]]></summary></entry><entry><title type="html">[백준 11726]2×n 타일링, DP</title><link href="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q11726-dp/" rel="alternate" type="text/html" title="[백준 11726]2×n 타일링, DP" /><published>2022-06-15T00:00:00-05:00</published><updated>2022-06-15T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q11726-dp</id><content type="html" xml:base="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q11726-dp/"><![CDATA[<p>패턴을 찾고 점화식을 세우는 문제.  <br />
시간 복잡도 : O(N)  <br />
<code class="language-plaintext highlighter-rouge">점화식 : An = An-1 + An-2</code></p>

<p><a href="https://www.acmicpc.net/problem/11726" target="_blank">백준 Q11726</a></p>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">data</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">1001</span><span class="o">];</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">dp</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">)</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
		<span class="k">if</span><span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">)</span> <span class="k">return</span> <span class="mi">2</span><span class="o">;</span> <span class="c1">// n이 2일때 2가지 반환 Case 2가지</span>
		<span class="k">if</span><span class="o">(</span><span class="n">data</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">data</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
		
		<span class="n">data</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">dp</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="n">dp</span><span class="o">(</span><span class="n">x</span><span class="o">-</span><span class="mi">2</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">data</span><span class="o">[</span><span class="n">x</span><span class="o">]%</span><span class="mi">10007</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">dp</span><span class="o">(</span><span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()));</span>
		<span class="c1">// 9 입력시 55 응답</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="baekjoon" /><category term="java" /><category term="DP" /><category term="다이나믹프로그래밍" /><category term="Q11726" /><category term="백준2667" /><summary type="html"><![CDATA[패턴을 찾고 점화식을 세우는 문제. 시간 복잡도 : O(N) 점화식 : An = An-1 + An-2]]></summary></entry><entry><title type="html">Git 명령어</title><link href="https://kimjaehyun.co.kr/etc/git-01/" rel="alternate" type="text/html" title="Git 명령어" /><published>2022-06-14T00:00:00-05:00</published><updated>2022-06-14T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/etc/git-01</id><content type="html" xml:base="https://kimjaehyun.co.kr/etc/git-01/"><![CDATA[<p>자주 쓰이는 Git을 정리해 봅시다. <br />
<a href="https://git-scm.com/" target="_blank">Git-SCM</a> 다운로드</p>

<h1 id="git-기본">Git 기본</h1>
<h2 id="github-clone">Github clone</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone 주소
</code></pre></div></div>

<h2 id="git-pullfetch">git pull/fetch</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># github의 변화를 로컬에 반영
git fetch

git pull 원격명 브랜치명
git pull orign master

</code></pre></div></div>

<h2 id="git-정보-등록">git 정보 등록</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init 
git config --global user.name "gildong.hong"
git config --global user.email "xxxxx@xxxxxx"
</code></pre></div></div>

<h2 id="git-상태">git 상태</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git status
git status -s (단축해서 보여짐)
</code></pre></div></div>

<h2 id="git-commit">git commit</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add -A
git commit -m "first message"
git status
</code></pre></div></div>

<h2 id="git-branch-생성">git branch 생성</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch 새브랜치 이름
git branch      #생성 내용 확인
git checkout 이동할_브랜치이름 (ex) git checkout master

#생성과 동시에 이동
git checkout -b 새브랜치이름
git checkout -b 새브랜치이름 origin/my-branch
</code></pre></div></div>
<h2 id="git-branch-삭제">git branch 삭제</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch -D 브랜치이름
</code></pre></div></div>

<h2 id="git-원격-branch-삭제">git 원격 branch 삭제</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git push -d 원격브랜치명
git push -d origin my-branch
</code></pre></div></div>

<h2 id="git-branch-상태-확인">git branch 상태 확인</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch
* master

git branch -a	(로컬과 원격까지 보여줌)
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/master
</code></pre></div></div>

<h2 id="git-checkout">git checkout</h2>
<p>원격 저장소 origin에 브랜치명을 새브랜치로 생성함.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout -b 새브랜치명 origin/브랜치명 
</code></pre></div></div>

<h2 id="git-상태-원복하기">git 상태 원복하기</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset 커밋아이디번호 --hard

sourcetree의 경우 &gt; 오른쪽마우스 &gt; 이 시점까지 초기화 &gt; 옵션 Hard
</code></pre></div></div>

<h2 id="git-상태-잠시이동">git 상태 잠시이동</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git revert 커밋아이디번호

sourcetree의 경우 &gt; 오른쪽마우스 &gt; 커밋 되돌리기
</code></pre></div></div>

<h1 id="git-스킬업">Git 스킬업</h1>
<h2 id="git-병합">git 병합</h2>
<p>A branch를 B Branch로 병합할 경우, B브랜치로 이동하여 merge 명령어를 실행함.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout master
git merge 병합할 브랜치 ( 새브랜치를 -&gt; master에 병합한다는 의미)
</code></pre></div></div>
<h2 id="git-병합-충돌">git 병합 충돌</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
&lt;&lt;&lt;&lt;&lt; HEAD (현재 변경사항)
text 내가 작성한 부분
================	*wirter
text 상대방이 작성한 부분
&gt;&gt;&gt;&gt;&gt;&gt; dafqweradsfasdfsafa (수신 변경 사항)


최종 병합 충돌이 생긴 파일을 모두 수정후
git add
git commit -m "text"

</code></pre></div></div>

<h2 id="git-부분-병합">git 부분 병합</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git cheery-pick 커밋아이디번호

</code></pre></div></div>

<h2 id="git-rebase">git rebase</h2>
<p>병합 내용을 일렬로 만들어 주는 방법.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 상태 보기
git log --graph --all --decorate

# 모든 병합이 모두 1개의 history로 병합됨
git rebase 브랜치명

sourcetree의 경우 &gt; 오른쪽마우스 &gt; 재배치

</code></pre></div></div>

<h2 id="git-remote-수정-삭제">git remote 수정 삭제</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote -v
origin http://192.168.0.100/저장소이름.git (fetch)
origin http://192.168.0.100/저장소이름.git (push)

git remote set-url origin http://192.168.0.200/저장소이름.git
</code></pre></div></div>

<h2 id="git-tag">git Tag</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git tag 생성할Tag명

# 등록한 Tag리스트 
git tag

# 태그 전체를 리모트 저장소에 Push
git push origin --tags

#특정 태그 1개만 리모트 저장소에 Push
git push origin 생성한Tag명

</code></pre></div></div>

<h2 id="git-예외-등록">git 예외 등록</h2>
<p>몇 가지 작성 규칙이 있습니다.</p>
<ul>
  <li>’#’로 시작하는 라인은 무시, 주석 개념.</li>
  <li><code class="language-plaintext highlighter-rouge">/</code> 는 하위 적용이 아님.</li>
  <li><code class="language-plaintext highlighter-rouge">!</code> 로 시작하는 패턴은 무시히지 않음</li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git 폴더 최상위에
.gitignore

gitignore sample

*.class
!sample.class       #위에서 class모두 무시라고했는데, sample.class는 무시하지 않는다는 의미

/test.java

src/*.java
doc/**/*.txt
</code></pre></div></div>
<p>최근에는 이렇게 한번에 생성해주는 사이트도 있습니다.   <br />
<a href="https://www.toptal.com/developers/gitignore" target="_blank">gitignore.io</a></p>

<h1 id="github-활용">Github 활용</h1>
<h2 id="등록">등록</h2>
<p>github에서 Repository 생성시 하기 안내 명력어가 표시됨.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote  (원격 저장소 등록 내용 확인)
git remote add origin https://github.com/xxxxx.git
git push -u orign master	(origin 저장소에 master 브랜치명을 생성하여 등록함)
</code></pre></div></div>

<h2 id="github-등록시-2개-이상의--git-ssh--등록-방법">github 등록시 2개 이상의  git ssh  등록 방법</h2>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
.ssh/config
# Default account
Host github.com-account1
  HostName github.com
  User git
  IdentityFile ~/.ssh/git-addrss1/id_rsa

# Secondary account
Host github.com-account2
  HostName github.com
  User git
  IdentityFile ~/.ssh/git-addrss2/id_rsa

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="etc" /><category term="git" /><category term="githug" /><summary type="html"><![CDATA[자주 쓰이는 Git을 정리해 봅시다. Git-SCM 다운로드]]></summary></entry><entry><title type="html">[백준 2667]단지번호붙이기, DFS</title><link href="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q2667-dfs/" rel="alternate" type="text/html" title="[백준 2667]단지번호붙이기, DFS" /><published>2022-06-09T00:00:00-05:00</published><updated>2022-06-09T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q2667-dfs</id><content type="html" xml:base="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q2667-dfs/"><![CDATA[<p>Map이 주어지고, 탐색을 통해서 넓이나 지역의 수량을 찾는 문제 유형.</p>

<p><a href="https://www.acmicpc.net/problem/2667" target="_blank">백준 Q2667</a></p>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">static</span> <span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="c1">//static Stack&lt;Integer[]&gt; st;</span>
	<span class="kd">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="kt">int</span> <span class="n">r</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">ck</span><span class="o">,</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">count</span><span class="o">++;</span>
		<span class="n">ck</span><span class="o">[</span><span class="n">r</span><span class="o">][</span><span class="n">c</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">//방문 처리</span>
		
		<span class="kt">int</span><span class="o">[]</span> <span class="n">_r</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,-</span><span class="mi">1</span><span class="o">};</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">_c</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
	
		<span class="c1">//st.add(new Integer[] {r, c});	</span>
		<span class="c1">//Integer[] curr = st.pop();</span>

		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">int</span> <span class="n">new_r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">_r</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="kt">int</span> <span class="n">new_c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">+</span> <span class="n">_c</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
			<span class="k">if</span><span class="o">(</span><span class="n">new_r</span> <span class="o">&gt;</span> <span class="no">N</span> <span class="o">||</span> <span class="n">new_c</span> <span class="o">&gt;</span><span class="no">N</span> <span class="o">||</span> <span class="n">new_r</span> <span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">new_c</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
			
			<span class="k">if</span><span class="o">(</span><span class="n">ck</span><span class="o">[</span><span class="n">new_r</span><span class="o">][</span><span class="n">new_c</span><span class="o">]==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">[</span><span class="n">new_r</span><span class="o">][</span><span class="n">new_c</span><span class="o">]==</span><span class="mi">1</span><span class="o">){</span>
				<span class="n">dfs</span><span class="o">(</span><span class="n">new_r</span><span class="o">,</span> <span class="n">new_c</span><span class="o">,</span> <span class="n">ck</span><span class="o">,</span> <span class="n">map</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	

		<span class="k">try</span> <span class="o">{</span>
			<span class="c1">// 입력 처리</span>
			<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
			<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
			<span class="no">N</span> 	<span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			
			<span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span>	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			<span class="kt">int</span><span class="o">[][]</span> <span class="n">ck</span>	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			
			<span class="c1">//st = new Stack&lt;Integer[]&gt;();</span>
			 
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
					<span class="c1">//map[i][j+1] = str.charAt(j) - '0'; //방법 1</span>
					<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Character</span><span class="o">.</span><span class="na">getNumericValue</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">));</span> <span class="c1">//방법 2</span>
				<span class="o">}</span>
			<span class="o">}</span>
	
			<span class="c1">//System.out.println(Arrays.toString(map));</span>
			
			<span class="kt">int</span> <span class="n">zone</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">al</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
			
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>	
					<span class="c1">//System.out.format("%d, %d \n",i,j);</span>
					<span class="k">if</span><span class="o">(</span> <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">){</span> 
						<span class="n">zone</span><span class="o">++;</span>
						<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
						<span class="n">dfs</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">ck</span><span class="o">,</span> <span class="n">map</span><span class="o">);</span>						
						<span class="n">al</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
					<span class="o">}</span>
					
				<span class="o">}</span>
			<span class="o">}</span>
			
			<span class="c1">//Arrays.sort();</span>
			<span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">al</span><span class="o">);</span>
			
<span class="c1">//			System.out.println("Zone 	: "+zone);</span>
<span class="c1">//			System.out.println("Count 	: "+al.toString());</span>
<span class="c1">//			System.out.println("END");</span>
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">zone</span><span class="o">);</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">al</span><span class="o">.</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">al</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
		<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	
	<span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*
입력
7
0110100
0110101
1110101
0000111
0100000
0111110
0111000

출력
3
7
8
9

*/</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="baekjoon" /><category term="java" /><category term="DFS" /><category term="깊이탐색" /><category term="Q2667" /><category term="백준2667" /><summary type="html"><![CDATA[Map이 주어지고, 탐색을 통해서 넓이나 지역의 수량을 찾는 문제 유형.]]></summary></entry><entry><title type="html">[백준 1926]그림, BFS</title><link href="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1926-bfs/" rel="alternate" type="text/html" title="[백준 1926]그림, BFS" /><published>2022-06-04T00:00:00-05:00</published><updated>2022-06-04T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1926-bfs</id><content type="html" xml:base="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1926-bfs/"><![CDATA[<p>Map이 주어지고, 탐색을 통해서 넓이나 길을 찾는 문제 유형.</p>

<p><a href="https://www.acmicpc.net/problem/1926" target="_blank">백준 Q1926</a></p>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="k">try</span> <span class="o">{</span>
			<span class="c1">// 입력 처리</span>
			<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
			<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
			<span class="kt">int</span> <span class="no">R</span> 	<span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="kt">int</span> <span class="no">C</span> 	<span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			
			<span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span>	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">R</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">C</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			<span class="kt">int</span><span class="o">[][]</span> <span class="n">ck</span>	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">R</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="no">C</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">R</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="no">C</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
					<span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
				<span class="o">}</span>
			<span class="o">}</span>
			
			<span class="kt">int</span><span class="o">[]</span> <span class="n">dx</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">};</span>
			<span class="kt">int</span><span class="o">[]</span> <span class="n">dy</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="o">};</span>
			
			
			<span class="kt">int</span> <span class="n">max_zone</span> 	<span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//영역의 갯수</span>
			<span class="kt">int</span> <span class="n">max_count</span>	<span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="c1">//최대 영역의 수</span>
			
			<span class="nc">Queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">[]&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">();</span>
			
			
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">R</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="no">C</span><span class="o">;</span><span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
					
					<span class="kt">int</span> <span class="n">temp_count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
					
					<span class="k">if</span><span class="o">(</span> <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]==</span><span class="mi">0</span><span class="o">){</span>
						<span class="n">ck</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
						<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">});</span> <span class="c1">// 행, 열</span>
						<span class="n">max_zone</span><span class="o">++;</span>
						<span class="n">temp_count</span><span class="o">++;</span>
					<span class="o">}</span><span class="c1">//end if</span>
					
					<span class="k">while</span><span class="o">(!</span> <span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
						<span class="kt">int</span><span class="o">[]</span> <span class="n">cur</span>  	<span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
						<span class="kt">int</span> <span class="n">r</span> 		<span class="o">=</span> <span class="n">cur</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
						<span class="kt">int</span> <span class="n">c</span> 		<span class="o">=</span> <span class="n">cur</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
						
						<span class="c1">//현재 방문 처리</span>
						<span class="c1">//ck[r][c] 	= 1;</span>
						
						<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span><span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
							<span class="kt">int</span> <span class="n">new_r</span> <span class="o">=</span> <span class="n">r</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
							<span class="kt">int</span> <span class="n">new_c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
							
							<span class="k">if</span><span class="o">(</span> <span class="n">new_c</span> <span class="o">&gt;</span> <span class="no">C</span> <span class="o">||</span> <span class="n">new_c</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">new_r</span> <span class="o">&gt;</span> <span class="no">R</span> <span class="o">||</span> <span class="n">new_r</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
							
							<span class="c1">//System.out.format("%d, %d\n",new_c,new_r);</span>
							
							<span class="k">if</span><span class="o">(</span> <span class="n">map</span><span class="o">[</span><span class="n">new_r</span><span class="o">][</span><span class="n">new_c</span><span class="o">]</span> <span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">ck</span><span class="o">[</span><span class="n">new_r</span><span class="o">][</span><span class="n">new_c</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">){</span> <span class="c1">//ck[행][열]</span>
								<span class="n">ck</span><span class="o">[</span><span class="n">new_r</span><span class="o">][</span><span class="n">new_c</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
								<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="n">new_r</span><span class="o">,</span><span class="n">new_c</span><span class="o">});</span>
								<span class="n">temp_count</span><span class="o">++;</span>
							<span class="o">}</span>
						<span class="o">}</span>
						
						<span class="n">max_count</span>	<span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">max_count</span><span class="o">,</span> <span class="n">temp_count</span><span class="o">);</span>
					<span class="o">}</span><span class="c1">//while</span>
					
					
				<span class="o">}</span><span class="c1">//end for</span>
			<span class="o">}</span><span class="c1">//end for</span>
			
			
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max_zone</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max_count</span><span class="o">);</span>
			
			
		<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	
	
	<span class="o">}</span>
<span class="o">}</span>
<span class="cm">/*
입력
6 5
1 1 0 1 1
0 1 1 0 0
0 0 0 0 0
1 0 1 1 1
0 0 1 1 1
0 0 1 1 1

출력
4
9

*/</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="baekjoon" /><category term="java" /><category term="BFS" /><category term="넓이탐색" /><category term="Q1926" /><category term="백준1926" /><summary type="html"><![CDATA[Map이 주어지고, 탐색을 통해서 넓이나 길을 찾는 문제 유형.]]></summary></entry><entry><title type="html">[백준 1948]임계경로, Topology Sort</title><link href="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1948-topology/" rel="alternate" type="text/html" title="[백준 1948]임계경로, Topology Sort" /><published>2022-06-04T00:00:00-05:00</published><updated>2022-06-04T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1948-topology</id><content type="html" xml:base="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1948-topology/"><![CDATA[<p>토플로지 관련 줄세우기 문제.   <br />
원리 알고리즘은 알고리즘 내용 참조.</p>

<p>임계경로를 구하는 문제로, 임계 경로란 A에서 B지점 까지 가는 최대 소요 시간이 걸리는 경로를 임계경로라고 한다.(최대값이 소모되는 길)</p>

<p><a href="https://www.acmicpc.net/problem/1948" target="_blank">백준 Q1948</a></p>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
			<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
			<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			
			<span class="kt">int</span><span class="o">[]</span> <span class="n">line</span> 		<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">();</span>
			<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">al</span>	<span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
				<span class="n">al</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
			
			<span class="c1">//System.out.format("N: %d M: %d \n",N,M);</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">st</span> 	<span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				<span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
				<span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
				<span class="c1">//System.out.format("%d %d \n",s,e);</span>
				<span class="n">al</span><span class="o">[</span><span class="n">s</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
				<span class="n">line</span><span class="o">[</span><span class="n">e</span><span class="o">]++;</span> 
			<span class="o">}</span>
			
			<span class="c1">//line 이 0인 item을 q에 넣는다.</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">line</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			
			<span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
				<span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">().</span><span class="na">intValue</span><span class="o">();</span>
				
				<span class="c1">//연결 선을 빼면서 line을 제거, 제거후에 0인경우 q에 입력</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">al</span><span class="o">[</span><span class="n">t</span><span class="o">].</span><span class="na">size</span><span class="o">()</span> <span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
					<span class="kt">int</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">al</span><span class="o">[</span><span class="n">t</span><span class="o">].</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
					<span class="k">if</span><span class="o">(--</span><span class="n">line</span><span class="o">[</span><span class="n">sub</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">){</span>
						<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sub</span><span class="o">);</span>
					<span class="o">}</span>
				<span class="o">}</span>				
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
			<span class="o">}</span>
			
			<span class="c1">//System.out.println(Arrays.toString(line));</span>
			<span class="c1">//System.out.println("End");</span>
			
			
		<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>	
	
	
	<span class="o">}</span>
<span class="o">}</span>

<span class="cm">/*
입력
4 2
4 2
3 1

출력
3 4 1 2 

*/</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="baekjoon" /><category term="java" /><category term="Topology" /><category term="위상정렬" /><category term="줄세우기" /><category term="임계 경로" /><category term="Q1948" /><category term="백준2252" /><category term="백준1516" /><category term="백준1948" /><summary type="html"><![CDATA[토플로지 관련 줄세우기 문제. 원리 알고리즘은 알고리즘 내용 참조.]]></summary></entry><entry><title type="html">[백준 2252]줄세우기, Topology Sort</title><link href="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q2252-topology/" rel="alternate" type="text/html" title="[백준 2252]줄세우기, Topology Sort" /><published>2022-06-02T00:00:00-05:00</published><updated>2022-06-02T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q2252-topology</id><content type="html" xml:base="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q2252-topology/"><![CDATA[<p>토플로지 관련 줄세우기 문제.   <br />
원리 알고리즘은 알고리즘 내용 참조.</p>

<p><a href="https://www.acmicpc.net/problem/2252" target="_blank">백준 Q2252</a></p>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
			<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
			<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			<span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
			
			<span class="kt">int</span><span class="o">[]</span> <span class="n">line</span> 		<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">();</span>
			<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">al</span>	<span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
				<span class="n">al</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
			
			<span class="c1">//System.out.format("N: %d M: %d \n",N,M);</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">st</span> 	<span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				<span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
				<span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
				<span class="c1">//System.out.format("%d %d \n",s,e);</span>
				<span class="n">al</span><span class="o">[</span><span class="n">s</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
				<span class="n">line</span><span class="o">[</span><span class="n">e</span><span class="o">]++;</span> 
			<span class="o">}</span>
			
			<span class="c1">//line 이 0인 item을 q에 넣는다.</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">line</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
				<span class="o">}</span>
			<span class="o">}</span>
			
			<span class="k">while</span><span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
				<span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">().</span><span class="na">intValue</span><span class="o">();</span>
				
				<span class="c1">//연결 선을 빼면서 line을 제거, 제거후에 0인경우 q에 입력</span>
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">al</span><span class="o">[</span><span class="n">t</span><span class="o">].</span><span class="na">size</span><span class="o">()</span> <span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
					<span class="kt">int</span> <span class="n">sub</span> <span class="o">=</span> <span class="n">al</span><span class="o">[</span><span class="n">t</span><span class="o">].</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>
					<span class="k">if</span><span class="o">(--</span><span class="n">line</span><span class="o">[</span><span class="n">sub</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">){</span>
						<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sub</span><span class="o">);</span>
					<span class="o">}</span>
				<span class="o">}</span>				
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span> <span class="n">t</span><span class="o">);</span>
			<span class="o">}</span>
			
			<span class="c1">//System.out.println(Arrays.toString(line));</span>
			<span class="c1">//System.out.println("End");</span>
			
			
		<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>	
	
	
	<span class="o">}</span>
<span class="o">}</span>

<span class="cm">/*
입력
4 2
4 2
3 1

출력
3 4 1 2 

*/</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="baekjoon" /><category term="java" /><category term="Topology" /><category term="위상정렬" /><category term="줄세우기" /><category term="Q2252" /><category term="백준2252" /><category term="백준1516" /><category term="백준1948" /><summary type="html"><![CDATA[토플로지 관련 줄세우기 문제. 원리 알고리즘은 알고리즘 내용 참조.]]></summary></entry><entry><title type="html">[백준 1516]게임 개발, Topology Sort</title><link href="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1516-topology/" rel="alternate" type="text/html" title="[백준 1516]게임 개발, Topology Sort" /><published>2022-06-02T00:00:00-05:00</published><updated>2022-06-02T00:00:00-05:00</updated><id>https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1516-topology</id><content type="html" xml:base="https://kimjaehyun.co.kr/baekjoon/java/baekjoon-Q1516-topology/"><![CDATA[<p>토플로지 관련 누적 비용 최대값 계산.       <br />
원리 알고리즘은 알고리즘 내용 참조.</p>

<p><a href="https://www.acmicpc.net/problem/1516" target="_blank">백준 Q1516</a></p>

<h2 id="sample-source-code">Sample Source Code</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		
		<span class="k">try</span> <span class="o">{</span>
			<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
			<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
			
			<span class="c1">// N(1 ≤ N ≤ 500)</span>
			<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>	<span class="c1">//line수 </span>
			
			
			
			<span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;[]</span> <span class="n">al</span>	<span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">//(연결 건물) </span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">al</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>
			<span class="o">}</span>
			
			<span class="kt">int</span><span class="o">[]</span> <span class="n">result</span>	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>	<span class="c1">// 위상순서를 저장하기</span>
			
			<span class="kt">int</span><span class="o">[]</span> <span class="n">time</span>		<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">//누적 해당 건물을 짓는 시간</span>
			<span class="kt">int</span><span class="o">[]</span> <span class="n">time_sum</span>	<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">//누적 해당 건물을 짓는 시간</span>
			<span class="kt">int</span><span class="o">[]</span> <span class="n">line</span>		<span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span> <span class="c1">//나를 의존하는 line</span>
			<span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">q</span><span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">();</span>
		
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">st</span> 			<span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
				
				<span class="kt">int</span> <span class="n">t</span> 		<span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>	
				<span class="n">time</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>		<span class="o">=</span> <span class="n">t</span><span class="o">;</span>
				
				<span class="c1">//필요 건물이 여러개 나올수 있음.				</span>
				<span class="k">for</span><span class="o">(;;)</span> <span class="o">{</span>
					<span class="kt">int</span> <span class="n">s</span> 		<span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
					<span class="k">if</span><span class="o">(</span><span class="n">s</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
						<span class="k">break</span><span class="o">;</span>
					<span class="o">}</span><span class="k">else</span> <span class="o">{</span>
						<span class="n">al</span><span class="o">[</span><span class="n">s</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
						<span class="n">line</span><span class="o">[</span><span class="n">i</span><span class="o">]++;</span>
					<span class="o">}</span>					
				<span class="o">}</span>				
				<span class="c1">//System.out.format("%d %d \n",s,e);</span>
			<span class="o">}</span>
			
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="no">N</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">if</span><span class="o">(</span><span class="n">line</span><span class="o">[</span><span class="n">i</span><span class="o">]==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
					<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>	
					<span class="n">time_sum</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">time</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
				<span class="o">}</span>
			<span class="o">}</span>
			
			
			
			<span class="c1">//System.out.println("L : "+Arrays.toString(line));</span>
			
			<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">while</span><span class="o">(!</span> <span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">){</span>
				<span class="kt">int</span> <span class="n">parent</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">().</span><span class="na">intValue</span><span class="o">();</span>
				<span class="n">result</span><span class="o">[</span><span class="n">x</span><span class="o">++]</span> <span class="o">=</span> <span class="n">parent</span><span class="o">;</span>
				
				<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">al</span><span class="o">[</span><span class="n">parent</span><span class="o">].</span><span class="na">size</span><span class="o">();</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
					<span class="kt">int</span> <span class="n">child</span> <span class="o">=</span> <span class="n">al</span><span class="o">[</span><span class="n">parent</span><span class="o">].</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">intValue</span><span class="o">();</span>

					<span class="n">time_sum</span><span class="o">[</span><span class="n">child</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">time_sum</span><span class="o">[</span><span class="n">child</span><span class="o">],</span> <span class="n">time_sum</span><span class="o">[</span><span class="n">parent</span><span class="o">]</span> <span class="o">+</span> <span class="n">time</span><span class="o">[</span><span class="n">child</span><span class="o">]);</span>
					
					<span class="k">if</span><span class="o">(--</span><span class="n">line</span><span class="o">[</span><span class="n">child</span><span class="o">]==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
						<span class="n">q</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
					<span class="o">}</span>
				<span class="o">}</span>
				<span class="c1">//total을 Sum처리함.</span>
				<span class="c1">//System.out.format("%d -&gt;", parent);</span>
			<span class="o">}</span>

			<span class="c1">//순서</span>
<span class="c1">//			for(int i=0;i&lt;result.length-1;i++) {</span>
<span class="c1">//				System.out.format("%d -&gt;", result[i]);				</span>
<span class="c1">//			}</span>
<span class="c1">//			System.out.println("");</span>
<span class="c1">//			</span>
<span class="c1">//			System.out.println("Line : "+Arrays.toString(line));</span>
<span class="c1">//			System.out.println("Time : "+Arrays.toString(time));</span>
<span class="c1">//			System.out.println("TimeS : "+Arrays.toString(time_sum));</span>

			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">time_sum</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%d\n"</span><span class="o">,</span> <span class="n">time_sum</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>				
			<span class="o">}</span>
			<span class="c1">//System.out.println("End");</span>
			
		<span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
	
	
	<span class="o">}</span>
<span class="o">}</span>

<span class="cm">/*
입력
5
10 -1
10 1 -1
4 1 -1
4 3 1 -1
3 3 -1

출력
10
20
14
18
17

*/</span>

</code></pre></div></div>]]></content><author><name>devjaedol</name></author><category term="baekjoon" /><category term="java" /><category term="Topology" /><category term="위상정렬" /><category term="줄세우기" /><category term="Q1516" /><category term="백준1516" /><category term="백준1516" /><category term="백준1948" /><summary type="html"><![CDATA[토플로지 관련 누적 비용 최대값 계산. 원리 알고리즘은 알고리즘 내용 참조.]]></summary></entry></feed>